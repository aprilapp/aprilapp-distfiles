%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1410.m00.i121.n045.P.c25.168146156 Colored vector jester hat.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 10/28/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.0 x430 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2014-10-25T23:24+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-10-25T23:24+04:00</xmp:CreateDate>
         <xmp:MetadataDate>2014-10-25T23:24+04:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEEsASwAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAEsAAAAAEA&#xA;AQSwAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWL/mH+ZHlbyDon6W1+4KLITHZ2kQ53FxLSvCJ&#xA;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&#xA;nS70A1Niym60lzU1tpGPwk+KNVTm50+bxICXXq872tpuE8Qeh6vepp35dmdtlWPkf+CMhH4Z3Mso&#xA;EjPoBf2POwxGUIw/nED7Wa/kD5Nj8r+Uo9QvVB1TU1F/fvSjc5hWKL/YKx27MWzzbPqOPKZHlH73&#xA;v8ePhgAOrOrq8nuXLSNt+yg6DNfkyymbLkRiApreSWymQSmJV3Y1oAPE9qfPBCchyKSAeaH18+X9&#xA;X0qW28wQxSWky0M1F32qDxNVbMiGck7jfvDWYdz598z/AJNaLpmtW+q2Sfpvy/bzrLe6Paz+mJo6&#xA;1KI45NC5H7J67hWGbXDqv53z/W488e23yfVP5aecvy/8x+XbdfJk9uthZxqh0uJVhltBvSOW3G8e&#xA;4Pah7E5nuOy7FXktleyzfnh5wFxu1jZ6Rb2YYUAhaOefY79ZZXrmn7SlWXHfn+h2GkF45V5fpQ/5&#xA;lai/5heRbuw8iXPPzvpV5C8drFcx2t5p91BKY5zKWeNkHp+rGGHwvXYlc2MT16OCQl/kzyzcecvy&#xA;5k0b80rWW781afczx3El2IxdWxbiYJbSWMUVWQKeabMwNeVDmPqMvBybcUL5pf8AnnZWr/lpq/6Q&#xA;ZZbiO1UG5ChC8qMGUgCtA0ig0znccz+Zhw/zv1/ot3RiPBlf838fa8M0K01nWX03TNKtWvtb1FEF&#xA;vart8RUF3kbokadWY9BnRRxXKhyeEnHJqc8pSJJMtyX2H+Vn5baf5C8tjTopBdaldP8AWNW1HjxM&#xA;85FNhvxjQfCi9h7k5nAUKDuIQERQ5MywsnYq7FXYq7FUr1jyp5X1qv6Y0ey1KoofrdvFPt/z0VsV&#xA;fGf5geXNJ8j/AJ16xolhaEaFLHFf2disjIE9SNWcIwJKhZOdPAAZsuzZ+owPIh1famP0iY5gsp0L&#xA;WrzzDOLSS8t1sm+CTTb/AI3DOtOw9OHkNu7E+Ocz7Qdl6TSRM4YMnFz44Gog/M1/pQO53XYfaWq1&#xA;MuGWbHX8yYuUh8hf+mJZbH+WvlNopVOh6bHGy1LC1g4Mo33ZV2p1zz7+U9Rf95P/AExeynj04/gj&#xA;/pR+pb+RflDRksk81XKPFa3lw6eXbKd3aOytLmZYYxCkrOI3um4u/HrUAe/ZCWTLIYpni4Pq85df&#xA;ly+Dz0xCAM4iuLl5Dp8+b2TzJ5s0Py1e6BY30kUA12+/R8Jc0oxgkkU/TIiR/Nhm4hjAFAOslMk7&#xA;oHzidCk1C18v30cTvrNtdvHby8SsqW3pLLHwb7VVnqR4A5rddphXENqc3S5zdF5R5Dv5NH80aj5H&#xA;Nw9zYWsX13y5LIzPJHaJKbea0Z23P1adeKVJPHvQDMSROSAmfrBqXv5g/Efa2TgISofSdx+kfB6e&#xA;tkBxe9m69ErU/f8A0ywYesy1cf8ANCYhIjEI1FEIoB02zLAFV0abNpJe2/oTcaAA7qKk7fMgZrss&#xA;OE05MJWFFHZHDqaMpqD7jKwaNhkQ8s/5yT8v+toOnebrOOs2kTcpwoqfq85Ecy/7F+J+RObbRZAJ&#xA;10n94cHV4ePGYlid/JHrflXyxpKOHXV7+3tZfEx+p+9/5JEn5Z1mo1HDozL+jXy/6ReX7Pw3qIxP&#xA;8JJ/R+l78p4xiNdkHRRsNhQZ57b21NYFdirHfMyW1lYSCNwgufh+qEVRm681G3Ar1qNvEZfiJJYy&#xA;eVny95m81/mFaeUtFn+qWurWPLWL4As0FpBK3N0oR8TepwFepYdOubjSYxIWehcTNIgvqryb5J8t&#xA;eTdDg0Xy/ZpaWcIHJgAZJXAoZJnpV3buT9G2bBx08xV4T/zkPB5l8q3sf5keX+TwpZDTdZhUVCGK&#xA;UzWNwyfDyT1XaGUlqhH+HfcYmr0oy13g/Z1/X7w5GDOYX5/gfjzUvyxtLO5vI/zBt+Vjr2twiPzF&#xA;ZhudpOdqPDuwHHiDG6MVZag7nkNNPXCNwuwOX7f0ueNIT6upei3erIQzVA23bboMw82ssORi0275&#xA;u/Pz8w7PW3/wbpcwliRxPrl0hHpxxwnl6denKoBPgRTuaZHZWmkZePLl/D5k9fdXz5uN2rqxix+H&#xA;HeR/AHz591Pd/wAjPystvKOhrrF6vPzHrEEb3RIoLaAgOlpGOnwftn9pvYLnTQjwinSYcQhGg9Qy&#xA;Ta7FXYq7FXYq7FXYq8z/ADb/ACJ0D8w7m01X67Po3mKwT0rbVbYB6xgllSWMleQVmJFGU7nfDGRB&#xA;sIlEEUeTzi8/IH8xNPgII0nzVGgoJAZNMv2HahpLAT82X55sMfaUxtLd1uTsvGd4+lg2veZvMnl2&#xA;11Hy9qC3mkX11azxQadq6/b5IU5W1ypaOShO1GYfLNbq+xuz9TIZBHw8sTe2wJG+45b/AALlYNfr&#xA;cA4JHxMZ233I9x57fEIryve+evNf5K61pmmcbBtNj0+XTXDEzTw2UETtHEVNEJltuSvU1aqEA1Oa&#xA;WPh4s/PeRlfvJP6/0u7nxzx+4D7npv5y/kyPPlp5cvX1a6nv9NmtLW9Ysvpy2k0scd1PHEgVElA/&#xA;eVAAIFOy0zsepi4csJTjzl+XGj3/AJm8n61byXEf+GjJAFFxMzNbmB/TDSM5c8ZVWu/xKSGqMwtR&#xA;rPTId7k4cG4LyjRvLUmh/nXZ2Vtez3QdNV1OeKWQyGG2u3RYwWNWblMvI1Y7+9a4kM/i45SoD6I/&#xA;EWfuIcjNi4DEX/OPwNfpBe2QRz3EteZqv2pGPQfPKYRlM82skAI+0jgRyYeU0tP71geP35lYoxB2&#xA;3Pe1SJ6tXKX8g4c1LnpDGKmniSemOQTO32BY8IQMlhexirwsB4gV/VmNLDMcw2iYPVL9Y0601fQr&#xA;/Rr0crW+ieJx1IEilGI96GvzGOPIY/A2so2+cPyohvW8/wCieW78/v8Ay5c6g1xF2VoYjEhFezM4&#xA;NfbOi1upB0lDqb+dftdPpdLw6mUu8frv9D6XzmHdOxV2KpZ5i00X2mSIB++i/eRfNR0+kbZZjlRR&#xA;IJN+R0it+Z+sR8Ryi0WA8+49S7eo/wCEGb/RfQfe4Ofm98zMaXYqsuLeC4gkt7iNZreZWjmhkUMj&#xA;owoyspqCCDQg4q8d1b/nHNbO9mvfy/8AM955SE7NJJpYRb3T+Tbn0oJGX0uTddzTsANsxNRocObe&#xA;cbPfyPzG7kYdVkx7RO3zHyKWv/zj5+YmqkQeY/zIuJNNJHrW+n2UdtLIn7SiYP8AB/wLD2ynH2Tp&#xA;4GxGz5kn7y2z7QzSFcVe4Afc8Q/ND8vbP8tPNuoaHHFJLod/bpfaTPLSR5Io143ETmgVnRwTT+U1&#xA;75mTj6gXXZ9xH+jL79vvp9nat5x8o6NFbzaxrdhpkV2vO1e8uYbcSLQGqeqycuvbLWxQ0T8wPImu&#xA;3C2ui+YtN1G7dSy2trdwSzcR1Ppqxfb5Yqn+KuxV2KuxV2KuxV2KuxVI/OXkvy35x0KfRNfs0u7K&#xA;cHiSB6kT0oJYXpVHXsR9O22KvlzQPMFx+SXnW98g+Z5Gl0J2Fzo2rhTtBKSVLqK/AW5BqfZfl1Bq&#xA;NH2n2fKR8XH9XUd/mPP7/hvtNFqogcE+XQ937Humm+bdLvrOO5sryG4tpBWOWN0ZSPY1zRfnOE1L&#xA;Y+f7XZflL3G48mMee/zb8seWrVjeXazXrCkGnwESTyMfsgIOgPj0yWKOXUmsYvz6fP8AQN1mIYRc&#xA;zXl1+X63glr+ZHm/yZ+ZWq6p5r8vSvrGs2sPoWDsYpoYZQsluifC+x2V1pXkN/iBGdJ/JsY4RjB5&#xA;bk9/eXST1ZnkMiOf2PY9I0784tXKahrGvab5T02nqS2drDFPcrGRUq810siIwHVkBGYsPCG0dz3y&#xA;/QylxHn9iDvfzb/KfydcNJL5n1XzRqaGpjt7qaeLxpRXis+vgMyo4skvxQ/W1GUQm2n/AJ0p5mSN&#xA;9B8j+YLxmX4Lh4IoIK9h67TenT3rkcmlB+ogFMcpHJkllqPnqYIz6INPqfjim1APIo9lt4rhWP8A&#xA;sxmJOHDykfg2iV9E5e11KYVeFi38xWjfT0r9OUHHklzDYJRHV5/Z/lveaf8Am9f+a0tXFpf6YI3Y&#xA;KaC69VFY7DvHGv45fMy8AQINg/Y1iuO2dx3Ji29GMkdQ68j+OYkcnD0DaY31W2vmDSL1GaJLa5VP&#xA;tm2cGn/AFt8uOQfxQH3MeHuKSz6r5f1sOvlzW4o9UtyVNrJIOJI2ZCD8NfmK5Z4A93v/AFseMsN1&#xA;nz/qGm3Euka16ek3ZBVWuAIjIv8ANHIWMbVHhuPDCNL1AXxE8/5xqMWqeYvOXmC2YS2A+o6Za3CE&#xA;MkjwLLLNQjrT1kpQ5udNAxgLcTLKy96y9rdirsVdirsVeS/n3oml+bYtF8mJCra9dzm+t78EB9Pt&#xA;LdlFxcUG7erzEKIdmJ5fsZjarOMUL5k7D3tuLD4hrp1Tryr+VXlHy/HHHBCj6k8QEl5OfWvJUjCp&#xA;WSZ6yMF2FPsr0AA2zXS0Zy75Dfl0coaoQ2gKYh+Y+n/l7dapJ5c161tU14wi40UXB9J7hWaiC0uU&#xA;HqLJ6icSifHXcKw640tFPD6sZIHl+kcvm5EdVHJtMX70B/zj/wDnBqd9qv8AgnzG95LJIJj5f1DU&#xA;k4Xr/VVDXFld/wA80KnkH/aXdqHbN3gy8Qo1xDnXLyPx/He67LjrcXwnv+579mQ0uxV2KuxV2Kux&#xA;V2KuxV85/wDOU+j2N35z/Lh5I43lubi8tZ43UN6kP7hqMD1VOTbU/ayGXKMeOcz0hI/7EpjjM5Ri&#xA;Oso/7oMCvvyk8qXv5qeV/K+jW81iup+pc62ttPIAtpFGHcjkX4c2DKtNq7UznvZ/U5tTCRynijE0&#xA;Nh+O53HamHHhI8PYm7917PozyT+Rf5X+Tbpb7R9GRtTSnHUbtmuZ1YftIZSyxt7xhc6R0zyb/nL+&#xA;1TWtU8l+XdIgWfzXcTXEtu6sEkjtwFHxNUUVnUtXtwOQyTEYky5JiCTQYp5e/J7z15nuX/5WB5iv&#xA;JNHhk9OKwWVl9f0zvIyn4UQlfhqvNhv8OamWrxw/uwL7+5yhikfqLL21j/nHj8s5GSO0sRqMHQIn&#xA;129DDtyb1Wj/ANk65PFPLk6EjvOzGQjFjPmD/nMVCXh8ueX3ev2Li+lCf8kYQ3/J3MqOnl1LWZhg&#xA;epf85HfnBqVXtpbfT1bYC3h5U/6SWnyQ0UOtn4lgdTXUJJL+av5x3TFn1+4VhU/B6SVr7RqMmNFj&#xA;7mB1nm3bfmr+dNsxeLXLknb+89CQbe0itidFj7kfnB3si07/AJyQ/Nix4jUoLfU4h9szQlWI9jEy&#xA;oP8Agcpn2fE9T9/3tkdWO8JnF+b/AOUvmO6WfzL5dm0LVia/pnTWKSq/85mt/Sm+jg2UHS5YD0ni&#xA;Hd+Nm8ZYnnsyC7/LPTPN0I1fy75pGrvGAkN9KUW+i22DXduEckfyzxMabAr1ygak4zwyjX3fL9RZ&#xA;+GJbgsJ/MLV/Nei6NdeUPO8Q1SIIX0PVgBUPQFanqhFfiANPn9rMzBwzIlA13hqnY2L68/J7yRb+&#xA;S/y60bREh9K6WBJ9SqPia8mUPOW+THiP8kAZntDM8VdirsVdirsVeUw3k8v52+afXQcrLTdIgseV&#xA;FBib61MfiAJoZZGB2PTNR2jIDLjvz/Q5+lFwnXl+lKPzM1TWPP8A5YtpvytuSfOWhaiPrkUc8Vtd&#xA;WI4SxTwXIkdRR3Tjx3VytRUCubCPnycIqugeWE80+T/L+r+aklHn/Q3/AH+ozqEuoLqCYuYnVOCm&#xA;F1I+ECjIwYHcNmHq83CK6OTgx2Ug/MtYLTzn+X17bUhvpPNNhG0qbO0c1IZlJG9GjUKfbNV2RI/m&#xA;SOnAfvj+suw10R4F/wBIfcf2PofOodI7FXYq7FXYq8y/NT8/PKfkGY6YUOreYiiyHTIZEiSFX+w1&#xA;1cPVIFau2xbcfDQ1yMpAc0xiSk2k+e/zv1u1XVLCy8uwafOBJa20y6k0rIRVeUzCDqD9oREHqM1k&#xA;u1AJVwS+z9bmjRbXxD7WV6H+Z8n6Ut9F826U3l/Ub2T0dPulmF1p11KQCsUdzwhaOV9+Mcsa8uil&#xA;jmXp9ZDLsNj3Hm0ZdPKHPl3vI/zW806Vqv5lnXbqSvl7yTDLY2bL8Ru9Vudp0t1/aKALF/rj2zV9&#xA;tZZZANNi3nPn5R8/xydh2ZjELzz2jHl5n8fazz8kPy+1ezudQ8/eaofR8zeYEVLaxYUaw08ENHAR&#xA;2keitIPYdDXNnotJHT4hjj0+097r9TnOWZkXreZbQ+QPP3nHTdP/AOcmte1zzDcelZeW7JINPiHx&#xA;SOz2yKIol2qztcyv4DucxdZCU4cMepbcRANl5555/PLzn5reS10xm0bRzVRDAxE0i/8AFswo2/8A&#xA;KlB41yGn0EIbn1FGXUn3MDg0avxTNWvbM8RcKWfuTG3sYk2ijqe5/rkqaJZCeaNitwBVwK1pStT+&#xA;qn44WoyVwKDwwtbsVdiqlPa204pNGr+5G/34KZRmRyKlpja35d1FNV8t3slneRGvAGquP5WB+F1/&#xA;yWrlWXDGYoiw5mHWEHdn3mL8xIfO3k+9vry3jt9Z0lYJJrUVoHilVvUTlUhX3HiK09zrcWnOLIAO&#xA;RdmcgnG33HHIkkayRnkjgMrDoQRUHNk467FXYq7FXYq7FXiH/OQ+mebNCki/Mbytzkks7M2GtwrV&#xA;+NvHIZ7a59MfaWKVnWbqfTcmlAWGLqtNHKBfQ/2/jvAb8OYwvzQ35VRaQ6L5z01ha6rrsSnzNFFJ&#xA;69tdXK1Jljo7qjLIzcShpxJVl5fZ0eXX8JMD/Dy7/i7KOksCXezfWfMdna2slzdzpBbxKWklkYKq&#xA;qNySTTYZgZtXxbDmXJxaanmX5fQXH5pfmpa+aY4mHknyczmwuJFIW81FxQMlabQ7PXsQP5tt92To&#xA;pYomc/rl9g/HP9jrtfqRMiMfpj9p/HJ9HZt3XOxV2KuxVj/5g+ak8p+Sdb8xsFZtMtJJoY3rxeal&#xA;IUNN6PIVXFXi35ceQbSTyrHq+s6fFrvmXWCdTv3vgtJLu5BI9TmHVRErlahTxHLitTQ8pLUyzZyb&#xA;qI2Fdw/Xz+XcHe+CMeICt+Z9/wCzl/anGirD+XGopqH5o+cBcLqrP+g7QCWLT7ZojyljEK8uXHmn&#xA;pu4otOzUrv8AHjjXpDqJzle5Z9fweV/PflCaVIDdaNfIRFJLE8ImjNCJYw4Rwtd0eg6cl2ocxtXh&#xA;HDxDaUW3T5TdHcFg35F/lv5eS3bVtTMmp695fvbnS7cXCqtvafV3/dy28KgKJZ4WjleVqtVtiMyN&#xA;FCHDxxG89z139/lyDHVTnxcJO0dh+PN7Zma4zsVfHP8AzmT+X09j5ts/OsCf7j9ZSO0vpB+xeQJx&#xA;Tl7PAi8f9Q4qXhGmfEvAHi0defSv45IONlCZr2ruPuybjI2P0KUgLCu5VyCdvYAYsJKmFrdirsVd&#xA;irsVdiqUanZz3Op2lpYk/XNRZbX01JHP1HVUDU8WyuYc7SE0R0fpVZwG3s4ICeRijRCw6EqoFci5&#xA;atirsVdirsVdiriARQ7g9RirynW/+cb/ACNdahLqOg3eo+U7qdudwmi3HoW8jV6tAyugp2CcR7ZT&#xA;l0+PJ9cRL3htx5pw+kkIGH/nF7yhc3cc/mTXNb8yQRtyWwvrvjbE0pUrCsb/APAuMjh0mLGbhERP&#xA;uTk1GSe0pEvW9N03T9MsYNP062is7G2UR29tAixxoo7KqgAZkNKJxV2KuxV2KsB/PvQrrXPye806&#xA;faDlP9U+sooBJb6pIlyVAFalhCQPfFWNflZ5jtdY8oaRqMLKRLbxiRVNeMirxkT/AGLAjOJxjwss&#xA;oH+E/j7N3pcp8SAkOo/H2qH5pfl5+WuuWFz5k896jdJFYRMbac3Ajitl68IIQAjtI1KhgzuaCvQZ&#xA;0el1N0A6XNhrdP8Ayf8Amdb+cPLiarp2kT6VobIUtXvPTSSQx/CfSiiaRREpBAYsK0+zlXaGoEIk&#xA;Xuz0mEyIKr+RjPd+XdZ14FTaa/rd5e2DIahraER2Mb7/AO/PqfMexzO0OMwwxB519+7RqZiWQkPR&#xA;symh2KpR5t8p6H5s8v3ega5bi5069XjIlaMrA1V0b9l0YVU4q+P/AMwf+cUfP3lq5kvfLFfMWkrU&#xA;xiEBb6Na/ZkgJpLQUFYzU/yjDbGUbeWMbmyujbXkb2V/E3CS3mVoZVbpQo4VhkgXDniIRRuAzn1l&#xA;+MdSdz+OSaTEr1miPQgfPbC1kFUqOnfFFOxVa8kaCrsFHiSB+vFIBPJCS6xpsfWYMfBKt+rI8QbY&#xA;6eZ6Mh8t/l1+avnBkHl7y7cpaSfZ1G6T0IKdyJZuCGn+TyORMnJhpQOe76K/Jr/nFvT/ACjqlv5l&#xA;803i6v5htyJbWCIH6rby9nBejyuv7LEKB4VAORckCnveKXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq4gEUO4PUYq+ddd/Ljzz+WOvXureRtPfX/JN/Kbi58uwH/S7KRqczbJ1lSv2VUVpsRtyOr7Q7MG&#xA;f1RPDkHXv9/63P0mtOL0yFw+73KB/P8A8n8DHcxXdlrUNVjsLuynM8cpFOJEatQ/I5pxodXE1w2O&#xA;8EfpI+5zzqNPIXxV7wf1H70B5J8m/nD57N1Brcl5ovli9nla8vruL6ncPaSvze1sbEl2j9Su88pP&#xA;wn4ehDbqHZ8TISkOXTnv3k/oddLVEAiPXr+oPpjTtOstN0+206whW3srOJLe1gT7KRRKERB7BRTN&#xA;k4SIxV2KuxV2KpR5h8n+VfMkAh1/SLTVIwOKfWoUlZR/kMwLL/sTirzTVv8AnE78nL6QyWlld6RK&#xA;annY3cgoT4Cf11H0CmKsZvf+cL/KcrD6t5n1eNAT8MxhmNO26pF+rFHCEuP/ADhRZ1NPOl2B2BtV&#xA;Jp/yOw2jgj3I6D/nDDy/xVbvzZqkyBaMqLHGCfbl6lB7YLXgHcnWm/8AOHf5R2rh7t9T1M/tLc3K&#xA;qp/5ERwt+OLJ6H5Y/KT8tPK5V9D8uWVrMn2Llo/XnFPCeYyS/wDDYqy7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXVxV1RirqjFXVGKuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtFgMVU2nAxVTa6IxVSa8bxxVSa+bxxVT&#xA;a/bxxVTOoN44qtOpHxxV36SPjirY1FvHFV66g3jiqot83jiqqt63jiqqt2xxVUW4riqqsgOKrsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirRUHFVNoK98VUmtScVUms28MVUmsm8MVU2sG8MVW&#xA;HT28MVWHTm8MVd+jT4Yq2NObwxVeLBvDFVRbFvDFVVbJ/DFVVbRsVVVt6YqqrGBiq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq6gxV1BirqDwxV1BirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:83D72D6F245CE411B5F7FE10C9F6760A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:83D72D6F245CE411B5F7FE10C9F6760A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:71014e2a-37b2-4548-82cc-6ea99ecca0e4</stRef:instanceID>
            <stRef:documentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:83D72D6F245CE411B5F7FE10C9F6760A</stEvt:instanceID>
                  <stEvt:when>2014-10-25T23:24+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
227.05 423.103 mo
162.326 423.103 109.856 415.934 109.856 407.092 cv
109.856 398.248 162.326 391.08 227.05 391.08 cv
291.775 391.08 344.245 398.248 344.245 407.092 cv
344.245 415.934 291.775 423.103 227.05 423.103 cv
level3{
gsave
clp
[117.199 0 0 16.0108 227.051 407.091 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~g=k97g=k<9gY:K;gt^]?gt^]?gtgfBh;-oDhVR,GhV[5Jhr!>Li8EPOi8EPOiSibTio8tWioB(Zj5]1\
jQ,FajlPUck2tggk2tjikND$kkih6okih9ql07HslK[[#lg*p(m-O**mHs</mdBN2mdKW5n*f`7nF5u<
naZ/>o()ABo()DDoCV\Ip%A"Np%A%Pp@n=Up\4FWq"XXZq"jj`qYL'cqtp9fqu$BirVc]orr2orrr<#u
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[117.199 0 0 16.0108 227.051 407.091 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~g"G'3g"P06g=k97g=tB:gY:K;gY:K;gYCT>gt^]?gtgfBh;-oCh;7#FhVR,GhV[5Jhr!>Khr!>Khr*GN
i8ESQiSibSiSieUio8tWio9"Yj5]4]jQ,C_jQ,FajlPUcjlPXek2tggk2tjikND$kkND'mkih6okih9q
l07HtlK[[#lg*m&lg*m'm-O*+mHs<.mHs</mdBN2mdBN3n*f`7nF5r:nF5r;naZ/>naZ/?o()ACoCMSG
o^qeJo^qeJp%A"Np@e4Rp@e4Rp\4FVp\4FVq"X[\q>'j^qYL'bqYL'bqtp9fr;?KjrVc]nrVc]nrr2or
~>
<~g"G'3g"P06g=k97g=tB:gY:K;gY:K;gYCT>gt^]?gtgfBh;-oCh;7#FhVR,GhV[5Jhr!>Khr!>Khr*GN
i8ESQiSibSiSieUio8tWio9"Yj5]4]jQ,C_jQ,FajlPUcjlPXek2tggk2tjikND$kkND'mkih6okih9q
l07HtlK[[#lg*m&lg*m'm-O*+mHs<.mHs</mdBN2mdBN3n*f`7nF5r:nF5r;naZ/>naZ/?o()ACoCMSG
o^qeJo^qeJp%A"Np@e4Rp@e4Rp\4FVp\4FVq"X[\q>'j^qYL'bqYL'bqtp9fr;?KjrVc]nrVc]nrr2or
~>
<~g"G'3g"P06g=k97g=tB:gY:K;gY:K;gYCT>gt^]?gtgfBh;-oCh;7#FhVR,GhV[5Jhr!>Khr!>Khr*GN
i8ESQiSibSiSieUio8tWio9"Yj5]4]jQ,C_jQ,FajlPUcjlPXek2tggk2tjikND$kkND'mkih6okih9q
l07HtlK[[#lg*m&lg*m'm-O*+mHs<.mHs</mdBN2mdBN3n*f`7nF5r:nF5r;naZ/>naZ/?o()ACoCMSG
o^qeJo^qeJp%A"Np@e4Rp@e4Rp\4FVp\4FVq"X[\q>'j^qYL'bqYL'bqtp9fr;?KjrVc]nrVc]nrr2or
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
212.117 317.866 mo
203.588 318.371 195.87 320.704 188.559 323.951 cv
191.502 328.115 195.462 329.639 199.929 329.843 cv
193.126 331.771 187.034 327.91 180.231 329.838 cv
188.15 332.886 195.865 340.402 205.815 338.171 cv
196.778 339.996 187.437 338.673 178.502 338.265 cv
192.908 351.904 218.844 351.067 239.911 353.17 cv
247.731 352.366 255.361 350.796 262.232 348.088 cv
266.806 346.286 289.642 341.014 292.841 333.735 cv
288.475 326.791 285.858 321.094 281.933 318.299 cv
276.598 314.5 268.831 310.006 262.301 308.891 cv
257.775 308.118 248.333 306.848 241.649 305.45 cv
222.608 304.616 206.103 309.332 201.964 314.716 cv
204.502 317.965 209.071 315.936 212.117 317.866 cv
cp
.0509804 .227451 .207843 rgb
f
239.911 353.17 mo
218.844 351.067 191.84 350.338 178.502 338.265 cv
187.437 338.673 196.778 339.996 205.815 338.171 cv
195.865 340.402 188.15 332.886 180.231 329.838 cv
187.034 327.91 193.126 331.771 199.929 329.843 cv
195.462 329.639 191.502 328.115 188.559 323.951 cv
195.87 320.704 203.588 318.371 212.117 317.866 cv
209.071 315.936 204.502 317.965 201.964 314.716 cv
213.671 307.824 228.216 306.627 241.649 305.45 cv
237.755 304.637 233.659 304.099 229.542 304.287 cv
221.677 304.649 218.025 304.759 210.104 305.744 cv
206.349 306.211 203.089 306.773 200.111 307.411 cv
200.947 307.685 189.029 309.806 189.834 310.12 cv
176.12 313.11 158.583 321.992 161.923 326.008 cv
162.769 328.886 165.101 329.736 165.101 329.736 cv
163.351 334.42 169.277 336.847 173.001 338.879 cv
168.881 339.048 165.27 333.856 161.15 334.025 cv
165.535 338.941 170.435 344.216 175.819 349.091 cv
187.904 352.025 201.327 352.625 210.192 353.282 cv
219.617 353.979 229.919 354.199 239.911 353.17 cv
cp
.0352941 .164706 .152941 rgb
f
173.001 338.879 mo
169.277 336.847 163.351 334.42 165.101 329.736 cv
165.101 329.736 173.42 328.177 175.903 329.532 cv
171.654 328.009 162.72 327.161 164.649 324.657 cv
162.542 322.549 196.39 308.734 210.104 305.744 cv
209.299 305.43 200.947 307.685 200.111 307.411 cv
191.208 309.319 184.817 311.899 175.223 314.602 cv
166.683 317.007 163.715 318.675 158.033 320.867 cv
154.532 322.218 148.029 325.194 149.289 330.322 cv
152.594 340.693 163.513 346.103 175.819 349.091 cv
170.435 344.216 165.535 338.941 161.15 334.025 cv
165.27 333.856 168.881 339.048 173.001 338.879 cv
cp
.0235294 .101961 .0941176 rgb
f
99.9079 325.172 mo
100.803 324.301 101.654 323.392 102.467 322.454 cv
101.656 323.385 100.798 324.291 99.9079 325.172 cv
cp
.6 .6 .6 rgb
f
51.2437 184.029 mo
51.0802 184.557 50.948 185.119 50.8359 185.702 cv
51.2053 186.359 51.5664 187.022 51.9148 187.691 cv
51.6685 186.483 51.4534 185.256 51.2437 184.029 cv
cp
0 .333333 .552941 rgb
f
105.231 318.888 mo
104.846 319.443 104.452 319.994 104.039 320.531 cv
104.455 319.99 104.853 319.443 105.231 318.888 cv
cp
f
52.025 225.928 mo
53.447 224.202 55.5783 226.538 56.3902 228.366 cv
60.1495 219.467 59.6511 208.636 56.3234 198.234 cv
53.8699 195.336 52.7157 191.615 51.9148 187.691 cv
51.5664 187.022 51.2053 186.359 50.8359 185.702 cv
50.0894 189.59 50.3627 194.517 50.0547 198.018 cv
49.0856 209.048 46.8078 217.218 43.5199 227.829 cv
40.5635 237.372 37.128 244.516 45.313 248.22 cv
45.0715 240.833 50.5743 232.25 52.025 225.928 cv
cp
.2 .552941 .788235 rgb
f
101.861 281.483 mo
92.9109 270.774 79.3863 270.13 65.8516 265.978 cv
66.3972 267.205 67.3409 268.36 69.1179 269.447 cv
77.9023 274.822 90.3136 275.343 99.0818 281.801 cv
101.955 283.918 103.877 285.554 105.234 287.128 cv
104.48 285.126 103.371 283.217 101.861 281.483 cv
cp
f
74.9601 262.792 mo
77.7022 261.575 82.1697 261.779 84.5056 259.647 cv
81.1566 254.57 71.1031 259.035 69.1761 252.231 cv
69.6845 250.912 73.2378 251.522 73.3402 249.288 cv
64.811 249.793 59.3303 242.379 57.4033 235.576 cv
72.2278 234.463 69.3898 218.217 70.3065 207.963 cv
70.3366 207.297 70.3819 206.616 70.4395 205.926 cv
69.152 205.35 67.937 204.72 66.8542 204.037 cv
64.3085 203.35 61.9017 202.456 59.7947 201.191 cv
58.4022 200.355 57.2704 199.353 56.3234 198.234 cv
59.6511 208.636 60.1495 219.467 56.3902 228.366 cv
55.5783 226.538 53.447 224.202 52.025 225.928 cv
50.5743 232.25 45.0715 240.833 45.313 248.22 cv
46.426 248.723 47.7485 249.166 49.3227 249.539 cv
55.018 250.891 60.4484 251.357 63.4374 256.655 cv
65.4129 260.159 64.6384 263.247 65.8516 265.978 cv
79.3863 270.13 92.9109 270.774 101.861 281.483 cv
103.371 283.217 104.48 285.126 105.234 287.128 cv
107.941 290.268 108.353 293.152 109.288 299.073 cv
109.288 299.073 109.413 306.922 109.371 307.091 cv
109.417 311.165 107.781 315.163 105.231 318.888 cv
111.908 309.271 114.272 297.11 108.866 284.938 cv
102.27 272.548 86.7363 269.599 74.9601 262.792 cv
cp
0 .333333 .552941 rgb
f
57.4033 235.576 mo
59.3303 242.379 64.811 249.793 73.3402 249.288 cv
73.2378 251.522 69.6845 250.912 69.1761 252.231 cv
71.1031 259.035 81.1566 254.57 84.5056 259.647 cv
82.1697 261.779 77.7022 261.575 74.9601 262.792 cv
86.7363 269.599 102.27 272.548 108.866 284.938 cv
114.584 297.813 111.616 310.679 104.039 320.531 cv
103.851 320.776 103.662 321.021 103.466 321.263 cv
103.225 321.564 102.977 321.86 102.726 322.155 cv
102.64 322.255 102.553 322.354 102.467 322.454 cv
101.654 323.392 100.803 324.301 99.9079 325.172 cv
93.5058 331.505 85.4149 336.417 80.8478 338.52 cv
80.8717 338.536 li
137.866 316.324 118.152 280.629 115.759 274.394 cv
112.482 265.857 106.167 257.872 97.2046 254.855 cv
92.8402 253.385 85.0991 256.188 81.5838 253.421 cv
75.509 248.641 86.0912 247.729 84.2052 242.678 cv
81.3295 243.775 78.1736 246.11 75.5431 245.01 cv
75.7701 244.376 75.8548 243.718 75.8951 243.055 cv
75.5061 242.703 75.1295 242.342 74.726 242.001 cv
75.4508 240.281 76.3335 238.586 77.3705 236.941 cv
79.8792 232.983 83.2822 229.286 87.4951 226.345 cv
89.5999 224.876 91.9044 223.601 94.3634 222.589 cv
95.5901 222.079 96.8597 221.644 98.1554 221.271 cv
98.7471 221.107 li
98.7488 221.106 li
98.758 221.096 98.8002 221.051 98.9537 220.889 cv
100.24 219.498 li
101.529 218.069 102.752 216.608 103.896 215.119 cv
102.558 215.105 101.346 215.487 99.6497 215.051 cv
95.216 213.911 93.3092 210.619 89.9925 208.74 cv
84.9856 210.143 76.7506 208.747 70.4395 205.926 cv
70.3819 206.616 70.3366 207.297 70.3065 207.963 cv
69.3898 218.217 72.2278 234.463 57.4033 235.576 cv
cp
.984314 .560784 .0588235 rgb
f
102.726 322.155 mo
102.977 321.86 103.225 321.564 103.466 321.263 cv
103.224 321.563 102.978 321.861 102.726 322.155 cv
cp
.6 .6 .6 rgb
f
88.8059 173.569 mo
89.2024 173.948 89.6213 174.298 90.0923 174.577 cv
89.9933 174.62 89.8913 174.671 89.7921 174.714 cv
90.7646 174.79 91.7435 174.967 92.6322 175.288 cv
93.8311 176.391 94.5261 177.912 95.0002 179.64 cv
95.0493 179.819 95.115 180.013 95.1885 180.213 cv
94.9938 180.298 94.8737 180.357 95.021 180.455 cv
93.0543 181.794 93.136 181.899 91.243 183.321 cv
91.4088 183.836 91.6683 184.334 92.0548 184.818 cv
94.3669 184.377 95.2384 184.787 97.151 185.316 cv
101.543 183.763 107.516 186.605 113.003 190.909 cv
112.917 188.083 112.423 185.366 111.601 182.876 cv
111.143 181.472 110.59 180.141 109.971 178.881 cv
109.867 179.817 109.87 180.749 110.015 181.576 cv
107.341 173.459 96.298 171.436 88.8059 173.569 cv
cp
0 .333333 .552941 rgb
f
151.968 233.624 mo
151.425 233.037 150.914 232.433 150.482 231.834 cv
150.348 231.972 150.208 232.091 150.069 232.216 cv
150.667 232.732 151.302 233.197 151.968 233.624 cv
cp
.6 .6 .6 rgb
f
139.035 192.112 mo
138.671 191.234 138.309 190.345 137.952 189.448 cv
131.683 183.095 121.846 179.156 115.297 173.759 cv
114.528 173.125 113.808 172.98 113.155 173.152 cv
114.009 174.172 114.808 175.289 115.507 176.522 cv
117.105 179.313 118.104 182.674 118.291 186.163 cv
118.458 189.034 118.122 191.955 117.466 194.821 cv
121.803 199.025 125.353 203.702 126.799 206.991 cv
126.964 207.367 127.109 207.747 127.246 208.127 cv
129.623 213.438 129.111 220.297 128.411 225.223 cv
132.912 230.737 144.082 237.584 150.069 232.216 cv
148.943 231.243 147.962 230.07 147.263 228.496 cv
147.962 230.07 148.943 231.243 150.069 232.216 cv
150.208 232.091 150.348 231.972 150.482 231.834 cv
150.342 231.647 li
148.944 229.635 147.729 227.036 147.001 224.025 cv
146.242 221.019 145.95 217.656 145.661 214.151 cv
145.449 211.641 145.214 209.034 144.684 206.442 cv
144.645 206.25 144.604 206.059 144.562 205.867 cv
144.381 205.053 144.17 204.241 143.915 203.435 cv
143.915 203.532 143.922 203.623 143.92 203.72 cv
143.922 203.623 143.915 203.532 143.915 203.435 cv
143.903 203.391 li
143.618 202.5 143.284 201.62 142.892 200.756 cv
141.606 197.97 li
140.738 196.071 139.876 194.118 139.035 192.112 cv
cp
0 .333333 .552941 rgb
f
128.411 225.223 mo
127.979 228.259 127.476 230.565 127.534 231.309 cv
127.523 231.526 127.514 231.742 127.502 231.958 cv
127.478 231.925 li
127.534 231.309 li
127.22 233.359 126.58 235.597 125.831 237.916 cv
127.243 241.112 128.432 244.612 130.826 246.921 cv
133.14 249.152 136.635 249.77 139.286 251.074 cv
140.618 249.485 141.837 247.798 142.883 246.066 cv
142.984 245.974 143.086 245.884 143.186 245.79 cv
138.371 243.288 133.86 236.863 131.645 232.37 cv
135.864 236.453 142.837 240.865 149.184 240.801 cv
151.106 239.391 153.156 238.078 155.439 236.907 cv
155.555 236.998 155.701 237.108 155.447 236.901 cv
154.571 236.172 153.2 234.955 151.968 233.624 cv
151.302 233.197 150.667 232.732 150.069 232.216 cv
144.082 237.584 132.912 230.737 128.411 225.223 cv
cp
.984314 .560784 .0588235 rgb
f
115.297 173.759 mo
121.846 179.156 131.683 183.095 137.952 189.448 cv
136.67 186.232 135.454 182.884 134.484 179.325 cv
134.006 177.505 133.591 175.67 133.4 173.737 cv
130.498 172.195 127.545 170.658 124.534 169.129 cv
118.896 166.273 113.067 163.454 107.035 160.773 cv
104.02 159.432 100.953 158.131 97.8316 156.895 cv
96.2721 156.277 94.6967 155.679 93.1081 155.106 cv
91.5301 154.524 89.9586 154.029 88.3323 153.578 cv
86.69 153.13 85.0263 152.753 83.3644 152.502 cv
84.3639 160.499 84.6544 169.601 88.8059 173.569 cv
96.298 171.436 107.341 173.459 110.015 181.576 cv
109.87 180.749 109.867 179.817 109.971 178.881 cv
108.983 176.866 107.825 175.035 106.602 173.405 cv
102.587 168.091 98.047 164.846 94.7961 162.98 cv
94.5093 162.818 94.2454 162.679 93.9789 162.536 cv
93.655 162.386 93.346 162.244 93.0547 162.11 cv
90.7507 161.072 89.4416 160.559 89.4459 160.551 cv
89.512 160.569 li
89.5739 160.583 li
89.7539 160.623 90.1452 160.709 90.7044 160.864 cv
91.3376 161.027 92.1873 161.256 93.2546 161.572 cv
95.6865 162.307 99.2158 163.438 103.322 165.557 cv
105.367 166.625 107.555 167.955 109.694 169.721 cv
110.889 170.708 112.067 171.85 113.155 173.152 cv
113.808 172.98 114.528 173.125 115.297 173.759 cv
cp
.2 .552941 .788235 rgb
f
285.018 315.319 mo
284.664 315.967 284.186 316.298 283.618 316.397 cv
286.622 319.255 288.987 322.363 291.807 326.282 cv
293.453 322.009 292.331 316.586 291.987 312.312 cv
289.55 308.011 285.422 304.642 280.963 301.722 cv
284.817 305.39 286.842 309.902 285.018 315.319 cv
cp
.584314 .505882 .313726 rgb
f
291.793 249.743 mo
290.834 250.025 295.518 251.775 292.357 251.662 cv
291.531 251.905 288.865 251.139 287.167 249.876 cv
289.719 252.138 292.344 255.16 293.373 258.66 cv
287.165 255.274 282.594 250.364 275.032 249.46 cv
280.281 253.129 285.811 257.757 292.018 261.143 cv
290.382 262.667 288.745 264.19 288.068 265.432 cv
289.365 273.389 298.902 281.008 291.792 285.183 cv
285.358 288.118 277.345 282.135 270.065 282.192 cv
275.031 284.901 278.36 289.133 280.053 294.889 cv
274.805 291.221 269.726 291.672 263.688 292.406 cv
265.3 292.949 266.951 293.562 268.591 294.245 cv
268.328 294.075 268.058 293.906 267.804 293.736 cv
276.885 294.653 285.625 299.272 292.089 305.541 cv
292.418 303.979 293.059 302.008 293.719 300.486 cv
291.912 296.469 286.379 292.082 283.295 289.804 cv
287.303 292.529 292.095 293.97 295.345 297.434 cv
297.01 294.37 299.379 289.848 299.799 287.241 cv
300.561 282.527 301.278 271.861 301.197 267.556 cv
301.143 264.095 301.168 260.388 301.544 256.496 cv
302.223 257.205 302.929 257.897 303.678 258.565 cv
303.573 259.501 303.495 260.424 303.426 261.342 cv
305.473 258.484 308.029 253.889 310.597 252.621 cv
308.735 249.981 307.336 248.761 303.589 246.052 cv
297.666 242.226 298.349 243.03 297.663 242.225 cv
297.627 242.313 297.497 242.225 297.299 242.017 cv
292.923 239.495 288.195 237.235 283.909 235.361 cv
289.472 239.967 294.843 244.52 299.355 250.647 cv
296.477 251.493 294.671 248.897 291.793 249.743 cv
cp
f
173.54 307.06 mo
172.81 307.391 172.081 307.724 171.362 308.09 cv
172.203 307.843 172.906 307.482 173.54 307.06 cv
cp
.866667 .768627 .478431 rgb
f
160.586 246.634 mo
159.796 251.036 154.434 250.528 152.403 254.252 cv
159.57 257.356 165.552 249.343 172.719 252.447 cv
167.696 260.178 149.581 262.379 154.434 268.248 cv
156.804 272.763 164.14 262.266 171.025 264.411 cv
169.671 266.894 166.228 265.822 164.874 268.305 cv
170.235 268.813 174.75 266.443 179.152 267.233 cv
174.806 273.723 165.325 273.384 161.262 280.833 cv
168.429 283.937 172.605 273.328 180.054 277.391 cv
173.903 281.285 165.663 281.623 159.23 284.557 cv
166.397 287.661 173.508 283.486 180.787 283.429 cv
178.474 286.195 174.636 287.323 172.04 289.129 cv
177.119 288.678 185.753 286.138 184.681 289.581 cv
181.577 296.748 165.663 299.343 165.324 308.824 cv
169.556 305.494 173.789 302.165 180.109 302.391 cv
177.113 303.272 175.797 305.56 173.54 307.06 cv
187.528 300.737 203.382 300.914 217.863 299.627 cv
210.697 296.523 202.626 300.981 195.459 297.877 cv
199.41 293.588 204.489 293.137 209.286 291.726 cv
205.561 289.695 202.006 291.782 198.564 290.71 cv
198.281 289.751 198.959 288.509 199.918 288.227 cv
195.121 289.638 189.591 285.01 187.221 280.495 cv
191.341 280.326 192.131 275.924 195.009 275.078 cv
190.043 272.369 184.738 279.141 180.167 274.231 cv
185.923 272.538 191.68 270.845 197.154 268.193 cv
193.429 266.161 187.955 268.813 187.504 263.734 cv
187.222 262.775 190.664 263.847 191.059 261.647 cv
188.181 262.493 185.698 261.138 183.779 261.703 cv
184.457 260.461 186.093 258.938 188.012 258.373 cv
186.206 255.777 183.215 259.784 181.127 256.229 cv
182.369 256.906 182.764 254.705 183.723 254.423 cv
182.482 253.746 180.563 254.31 179.321 253.633 cv
179.039 252.673 181.353 249.908 180.112 249.231 cv
175.992 249.4 172.832 249.287 173.622 244.885 cv
176.162 235.8 185.756 232.978 193.826 228.52 cv
193.648 228.508 li
192.443 228.69 191.078 228.919 189.443 229.209 cv
185.288 230.404 181.421 231.405 177.313 233.17 cv
170.533 236.085 163.382 238.191 156.603 240.949 cv
153.4 243.989 150.472 247.495 147.155 250.584 cv
151.951 249.173 155.789 248.045 160.586 246.634 cv
cp
.921569 .882353 .737255 rgb
f
291.793 249.743 mo
294.671 248.897 296.477 251.493 299.355 250.647 cv
294.843 244.52 289.472 239.967 283.909 235.361 cv
280.287 233.776 276.979 232.467 274.477 231.515 cv
269.493 229.622 251.249 224.974 249.857 229.946 cv
248.855 233.525 244.559 241.962 240.782 248.546 cv
239.906 251.264 239.085 253.913 238.333 256.465 cv
236.124 263.964 233.701 285.601 232.465 292.398 cv
232.546 293.193 232.523 293.532 232.332 293.094 cv
232.303 293.086 232.273 293.009 232.243 292.883 cv
230.618 288.995 221.598 264.155 216.482 251.132 cv
211.557 241.925 206.172 234.148 203.36 227.853 cv
199.594 227.839 197.414 227.939 193.648 228.508 cv
193.826 228.52 li
185.756 232.978 176.162 235.8 173.622 244.885 cv
172.832 249.287 175.992 249.4 180.112 249.231 cv
181.353 249.908 179.039 252.673 179.321 253.633 cv
180.563 254.31 182.482 253.746 183.723 254.423 cv
182.764 254.705 182.369 256.906 181.127 256.229 cv
183.215 259.784 186.206 255.777 188.012 258.373 cv
186.093 258.938 184.457 260.461 183.779 261.703 cv
185.698 261.138 188.181 262.493 191.059 261.647 cv
190.664 263.847 187.222 262.775 187.504 263.734 cv
187.955 268.813 193.429 266.161 197.154 268.193 cv
191.68 270.845 185.923 272.538 180.167 274.231 cv
184.738 279.141 190.043 272.369 195.009 275.078 cv
192.131 275.924 191.341 280.326 187.221 280.495 cv
189.591 285.01 195.121 289.638 199.918 288.227 cv
198.959 288.509 198.281 289.751 198.564 290.71 cv
202.006 291.782 205.561 289.695 209.286 291.726 cv
204.489 293.137 199.41 293.588 195.459 297.877 cv
202.626 300.981 210.697 296.523 217.863 299.627 cv
203.382 300.914 187.528 300.737 173.54 307.06 cv
172.906 307.482 172.203 307.843 171.362 308.09 cv
172.081 307.724 172.81 307.391 173.54 307.06 cv
175.797 305.56 177.113 303.272 180.109 302.391 cv
173.789 302.165 169.556 305.494 165.324 308.824 cv
165.663 299.343 181.577 296.748 184.681 289.581 cv
185.753 286.138 177.119 288.678 172.04 289.129 cv
174.636 287.323 178.474 286.195 180.787 283.429 cv
173.508 283.486 166.397 287.661 159.23 284.557 cv
165.663 281.623 173.903 281.285 180.054 277.391 cv
172.605 273.328 168.429 283.937 161.262 280.833 cv
165.325 273.384 174.806 273.723 179.152 267.233 cv
174.75 266.443 170.235 268.813 164.874 268.305 cv
166.228 265.822 169.671 266.894 171.025 264.411 cv
164.14 262.266 156.804 272.763 154.434 268.248 cv
149.581 262.379 167.696 260.178 172.719 252.447 cv
165.552 249.343 159.57 257.356 152.403 254.252 cv
154.434 250.528 159.796 251.036 160.586 246.634 cv
155.789 248.045 151.951 249.173 147.155 250.584 cv
150.472 247.495 153.4 243.989 156.603 240.949 cv
154.596 241.765 152.618 242.631 150.696 243.601 cv
148.553 244.683 143.887 248.833 140.621 251.861 cv
140.836 252.012 li
140.35 252.477 139.679 252.967 138.954 253.421 cv
137.824 254.488 137.095 255.196 137.095 255.196 cv
137.088 255.182 li
135.837 256.593 134.53 258.057 133.045 259.566 cv
138.244 261.992 140.639 265.685 141.936 269.586 cv
141.532 266.87 141.058 264.076 140.407 261.217 cv
141.106 260.171 142.405 259.084 142.519 259.644 cv
143.568 264.747 144.031 269.603 144.436 274.072 cv
144.737 277.458 144.831 279.402 145.13 281.742 cv
145.297 280.508 145.35 279.262 145.142 278.012 cv
150.126 291.355 li
152.802 290.141 155.543 289.653 158.283 289.195 cv
160.051 287.985 162.013 287.171 163.998 287.001 cv
164.169 286.924 li
164.017 287 li
164.846 286.931 165.679 286.962 166.5 287.136 cv
164.272 288.094 161.996 288.559 159.711 288.953 cv
158.836 289.351 157.95 289.745 157.056 290.127 cv
154.85 291.971 153.084 294.4 152.182 296.861 cv
152.484 297.669 li
152.328 297.561 152.167 297.467 152.006 297.375 cv
151.878 297.778 151.777 298.18 151.7 298.579 cv
152.47 299.643 153.226 300.639 153.781 301.427 cv
155.497 300.611 157.28 299.593 158.657 299.134 cv
160.36 298.564 162.075 297.986 163.793 297.421 cv
166.775 295.466 170.187 294.191 173.376 293.967 cv
175.197 294.571 li
178.418 293.83 169.737 298.65 169.17 298.753 cv
167.796 299.447 166.428 300.19 165.037 300.889 cv
161.38 302.726 159.062 305.252 155.965 307.084 cv
156.803 304.267 158.678 301.659 161.076 299.514 cv
159.66 300.496 158.335 301.515 157.154 302.439 cv
155.256 303.921 152.998 305.27 151.285 307.04 cv
150.905 312.89 148.895 319.522 148.432 323.118 cv
154.995 317.822 164.986 311.946 169.812 310.613 cv
203.465 301.327 212.222 299.397 227.638 299.999 cv
242.645 300.585 266.489 304.794 275.111 310.023 cv
278.648 312.168 281.32 314.21 283.618 316.397 cv
284.186 316.298 284.664 315.967 285.018 315.319 cv
286.842 309.902 284.817 305.39 280.963 301.722 cv
276.75 298.964 272.252 296.605 268.591 294.245 cv
266.951 293.562 265.3 292.949 263.688 292.406 cv
269.726 291.672 274.805 291.221 280.053 294.889 cv
278.36 289.133 275.031 284.901 270.065 282.192 cv
277.345 282.135 285.358 288.118 291.792 285.183 cv
298.902 281.008 289.365 273.389 288.068 265.432 cv
288.745 264.19 290.382 262.667 292.018 261.143 cv
285.811 257.757 280.281 253.129 275.032 249.46 cv
282.594 250.364 287.165 255.274 293.373 258.66 cv
292.344 255.16 289.719 252.138 287.167 249.876 cv
286.895 249.674 286.643 249.461 286.432 249.235 cv
286.675 249.439 286.922 249.658 287.167 249.876 cv
288.865 251.139 291.531 251.905 292.357 251.662 cv
295.518 251.775 290.834 250.025 291.793 249.743 cv
cp
.866667 .768627 .478431 rgb
f
287.167 249.876 mo
286.922 249.658 286.675 249.439 286.432 249.235 cv
286.643 249.461 286.895 249.674 287.167 249.876 cv
cp
f
107.717 216.702 mo
106.619 218.577 105.547 220.358 104.531 222.051 cv
103.525 223.728 li
103.28 224.139 li
103.2 224.272 103.103 224.437 103.085 224.458 cv
102.858 224.79 li
102.682 225.022 102.807 225.345 103.044 225.452 cv
103.154 225.52 103.279 225.566 103.409 225.603 cv
103.612 225.652 li
103.68 225.666 103.842 225.686 103.955 225.696 cv
106 225.855 108.011 225.421 109.631 224.865 cv
111.09 224.354 112.273 223.679 113.166 222.965 cv
112.745 222.394 112.293 221.834 111.796 221.293 cv
110.67 220.065 109.224 218.042 107.717 216.702 cv
cp
.984314 .560784 .0588235 rgb
f
399.081 194.356 mo
390.849 187.045 381.855 180.064 372.49 172.428 cv
370.104 176.764 367.988 180.952 366.186 184.961 cv
377.444 195.271 388.525 207.908 405.779 204.511 cv
407.099 205.02 404.558 211.619 402.628 214.664 cv
399.275 219.435 411.46 217.307 409.936 221.266 cv
408.818 226.139 399.173 221.669 396.735 226.034 cv
393.891 229.485 400.084 231.112 402.622 234.362 cv
390.131 243.192 384.439 259.943 387.785 274.87 cv
388.259 276.485 388.8 278.04 389.385 279.555 cv
391.328 282.788 393.583 285.91 396.017 288.824 cv
391.639 281.544 389.323 270.546 393.001 264.344 cv
396.661 255.568 405.496 247.894 410.72 240.803 cv
412.27 238.698 413.521 236.475 414.51 234.195 cv
414.783 223.678 414.103 213.401 409.84 203.802 cv
408.216 200.146 402.532 197.199 399.081 194.356 cv
cp
.0823529 .415686 .164706 rgb
f
411.041 201.15 mo
406.294 196.066 401.867 190.545 397.685 184.774 cv
393.276 178.712 389.098 172.41 384.668 166.238 cv
383.121 164.071 381.522 161.94 379.928 159.807 cv
378.476 162.13 377.083 164.421 375.76 166.674 cv
374.617 168.62 373.531 170.537 372.49 172.428 cv
381.855 180.064 390.849 187.045 399.081 194.356 cv
402.532 197.199 408.216 200.146 409.84 203.802 cv
414.103 213.401 414.783 223.678 414.51 234.195 cv
420.064 221.394 417.227 206.786 411.041 201.15 cv
cp
0 .572549 .270588 rgb
f
402.622 234.362 mo
400.084 231.112 393.891 229.485 396.735 226.034 cv
399.173 221.669 408.818 226.139 409.936 221.266 cv
411.46 217.307 399.275 219.435 402.628 214.664 cv
404.558 211.619 407.099 205.02 405.779 204.511 cv
388.525 207.908 377.444 195.271 366.186 184.961 cv
365.299 186.933 364.485 188.865 363.752 190.748 cv
363.364 191.737 363.006 192.708 362.664 193.671 cv
361.531 197.659 360.577 201.553 359.77 205.292 cv
364.798 206.511 369.793 208.317 373.611 209.194 cv
378.816 210.388 394.958 213.678 397.194 218.757 cv
393.301 221.189 389.278 218.284 385.464 220.007 cv
386.799 225.224 391.758 227.532 393.454 232.221 cv
390.922 233.705 382.015 228.103 379.203 230.797 cv
379.191 231.829 379.103 232.814 378.946 233.752 cv
381.065 236.43 389.426 237.717 391.216 240.125 cv
378.704 250.909 381.362 266.202 389.385 279.555 cv
388.8 278.04 388.259 276.485 387.785 274.87 cv
384.439 259.943 390.131 243.192 402.622 234.362 cv
cp
.568627 .113725 .133333 rgb
f
298.596 81.4183 mo
305.3 71.8761 304.491 60.2 310.79 49.7432 cv
314.039 45.3211 318.324 40.9508 323.642 39.729 cv
320.559 38.1958 317.364 36.9814 314.11 36.3649 cv
310.679 35.7063 307.195 35.7495 303.915 36.6157 cv
300.631 37.465 297.58 39.1008 294.839 41.1579 cv
292.101 43.2172 289.614 45.6829 287.398 48.2823 cv
285.15 50.9615 282.96 53.6834 280.863 56.4079 cv
276.658 61.8651 272.775 67.383 269.23 72.9222 cv
262.13 83.9987 256.391 95.1621 251.995 106.007 cv
249.79 111.429 247.919 116.769 246.352 121.973 cv
244.746 127.175 243.596 132.244 242.418 137.139 cv
241.679 140.166 240.933 143.085 240.18 145.916 cv
240.184 145.938 li
242.768 137.343 268.168 102.766 274.685 98.2871 cv
271.437 102.542 248.858 137.678 240.066 159.052 cv
239.469 161.152 234.823 173.084 232.3 180.247 cv
229.162 194.115 225.845 207.837 223.214 222.123 cv
225.651 217.758 228.09 213.392 232.254 210.449 cv
236.21 221.822 223.719 230.652 224.629 240.095 cv
224.434 253.575 229.817 266.516 231.375 280.357 cv
232.57 274.063 234.388 263.158 236.213 255.887 cv
237.371 250.203 243.099 228.348 248.153 217.543 cv
248.153 217.543 254.609 221.051 259.679 222.826 cv
261.398 223.43 263.124 223.918 264.858 224.382 cv
250.238 175.644 271.254 125.075 298.596 81.4183 cv
cp
0 .443137 .737255 rgb
f
381.737 133.125 mo
383.159 131.399 380.724 125.916 376.154 127.945 cv
376.256 125.712 379.404 125.408 378.592 123.58 cv
360.015 108.852 326.813 110.466 324.589 80.8175 cv
313.618 95.5364 305.694 112.186 294.724 126.905 cv
298.277 127.515 300.309 122.236 301.121 124.064 cv
303.252 126.4 300.814 130.765 298.987 131.577 cv
283.246 142.944 276.132 161.421 280.696 179.089 cv
284.351 177.466 288.007 175.843 291.663 174.219 cv
290.139 178.178 286.381 182.035 284.856 185.995 cv
283.534 195.336 289.014 202.749 289.925 212.192 cv
290.927 219.319 282.027 223.373 284.075 230.919 cv
286.768 232.177 289.429 233.525 292.045 234.878 cv
293.068 233.562 296.298 223.835 296.83 221.585 cv
297.384 219.34 297.205 216.676 296.391 213.851 cv
295.606 211.008 294.249 208.001 293.039 204.56 cv
292.44 202.836 291.885 200.989 291.57 198.982 cv
291.254 196.985 291.206 194.809 291.645 192.629 cv
291.752 192.086 291.888 191.545 292.055 191.008 cv
292.526 189.533 li
292.834 188.565 293.132 187.585 293.417 186.592 cv
293.989 184.606 294.514 182.569 294.933 180.495 cv
295.345 178.425 295.661 176.303 295.691 174.228 cv
295.723 172.184 295.41 170.083 294.436 168.875 cv
293.958 168.273 293.34 167.879 292.505 167.625 cv
292.297 167.563 292.078 167.508 291.846 167.463 cv
291.586 167.414 291.508 167.391 290.804 167.303 cv
290.711 167.293 li
290.179 167.231 289.632 167.178 289.16 167.053 cv
288.674 166.93 288.309 166.728 288.025 166.494 cv
287.989 166.472 li
287.711 166.228 287.475 165.929 287.32 165.488 cv
287.186 165.067 287.178 164.703 287.254 164.301 cv
287.388 163.501 288.059 162.596 288.786 161.786 cv
289.206 161.32 289.416 161.104 289.606 160.91 cv
290.212 160.302 li
291.422 159.134 li
294.627 156.189 297.493 153.227 300.137 150.255 cv
301.859 148.304 303.466 146.366 304.946 144.449 cv
301.235 147.046 296.048 149.262 292.251 151.645 cv
289.394 155.803 287.86 161.175 283.685 162.908 cv
282.882 155.567 296.326 142.639 304.665 138.648 cv
306.711 137.099 308.864 135.775 311.147 134.795 cv
311.429 134.217 311.704 133.641 311.942 133.071 cv
312.502 131.714 312.926 130.382 313.159 129.102 cv
313.276 128.462 313.345 127.836 313.362 127.23 cv
313.363 127.122 313.36 126.821 313.4 126.676 cv
313.419 126.55 313.43 126.426 313.43 126.305 cv
313.424 126.259 li
313.227 125.735 313.002 125.283 312.754 124.937 cv
312.601 124.723 312.394 124.507 312.155 124.287 cv
311.823 124.038 311.463 123.815 311.122 123.612 cv
310.246 123.099 309.391 122.659 308.668 122.17 cv
307.943 121.687 306.706 121.028 306.348 120.435 cv
305.985 119.843 304.431 117.436 305.747 115.423 cv
306.179 114.76 306.434 114.94 306.587 115.402 cv
306.606 115.38 li
307.592 117.97 309.625 120.831 312.239 120.92 cv
312.349 121.015 312.453 121.123 312.565 121.21 cv
313.127 121.306 313.712 121.374 314.341 121.37 cv
315.248 121.365 316.22 121.246 317.177 120.956 cv
317.653 120.81 318.128 120.622 318.552 120.375 cv
318.76 120.256 318.971 120.11 319.12 119.976 cv
319.231 119.874 319.332 119.755 319.399 119.622 cv
319.554 119.358 319.485 119.012 319.274 118.806 cv
319.111 118.665 li
318.766 118.332 li
318.063 117.658 li
315.779 115.473 li
315.752 115.325 li
315.543 114.258 314.843 112.89 313.87 111.988 cv
313.856 111.959 313.876 111.843 313.907 111.694 cv
314.015 111.428 314.091 111.135 314.132 110.833 cv
314.144 110.82 li
314.365 110.744 li
314.463 110.74 314.563 110.732 314.662 110.739 cv
314.68 110.739 li
316.924 113.378 319.713 114.755 323.106 113.304 cv
325.796 113.311 328.426 113.744 330.88 114.497 cv
336.111 116.117 340.549 119 344.197 122.242 cv
344.977 122.941 345.717 123.662 346.431 124.393 cv
347.544 125.537 348.572 126.718 349.517 127.928 cv
349.773 128.256 350.019 128.586 350.264 128.917 cv
350.254 128.94 li
351.064 128.929 351.98 128.855 352.945 128.749 cv
352.886 128.118 li
362.241 113.863 356.342 127.051 357.736 128.112 cv
364.064 130.256 370.105 123.202 369.451 125.176 cv
366.932 132.778 346.724 133.123 353.711 142.215 cv
359.188 142.18 364.375 136.71 369.608 134.702 cv
369.59 135.743 369.109 137.077 368.4 138.521 cv
368.478 138.471 li
368.397 138.635 li
367.843 139.769 367.245 140.945 366.614 142.165 cv
364.719 145.829 362.527 149.867 360.292 154.244 cv
359.071 156.652 357.861 159.184 356.742 161.827 cv
356.742 161.827 352.096 171.158 350.585 183.83 cv
349.801 190.411 352.217 210.297 352.217 210.297 cv
352.47 213.478 354.206 219.967 355.91 226.597 cv
355.551 223.796 355.46 220.885 355.522 217.992 cv
355.543 217.036 355.557 216.335 355.572 215.747 cv
353.834 187.183 365.833 156.393 381.737 133.125 cv
cp
0 .333333 .552941 rgb
f
396.485 103.445 mo
394.958 100.809 392.679 98.5749 390.048 96.7256 cv
387.262 94.8269 384.422 92.7477 381.684 90.5771 cv
376.184 86.2187 370.929 81.3484 365.805 76.2323 cv
355.545 66.0362 345.696 54.7826 333.569 45.8707 cv
330.544 43.6588 327.416 41.6445 324.168 39.98 cv
323.994 39.8916 323.816 39.8158 323.642 39.729 cv
318.324 40.9508 314.039 45.3211 310.79 49.7432 cv
304.491 60.2 305.3 71.8761 298.596 81.4183 cv
271.254 125.075 250.238 175.644 264.858 224.382 cv
267.332 225.044 269.827 225.646 272.369 226.377 cv
276.319 227.512 280.23 229.122 284.075 230.919 cv
282.027 223.373 290.927 219.319 289.925 212.192 cv
289.014 202.749 283.534 195.336 284.856 185.995 cv
286.381 182.035 290.139 178.178 291.663 174.219 cv
288.007 175.843 284.351 177.466 280.696 179.089 cv
276.132 161.421 283.246 142.944 298.987 131.577 cv
300.814 130.765 303.252 126.4 301.121 124.064 cv
300.309 122.236 298.277 127.515 294.724 126.905 cv
305.694 112.186 313.618 95.5364 324.589 80.8175 cv
326.813 110.466 360.015 108.852 378.592 123.58 cv
379.404 125.408 376.256 125.712 376.154 127.945 cv
380.724 125.916 383.159 131.399 381.737 133.125 cv
365.833 156.393 353.834 187.183 355.572 215.747 cv
355.612 214.249 355.663 213.493 355.867 211.248 cv
358.041 201.988 361.522 192.627 364.583 185.37 cv
364.632 185.25 364.676 185.133 364.726 185.012 cv
365.113 183.8 li
365.04 184.088 364.952 184.367 364.871 184.652 cv
366.128 181.633 367.556 178.515 369.138 175.311 cv
369.164 175.257 li
369.159 175.269 li
370.686 172.177 372.357 169.005 374.164 165.76 cv
375.568 163.237 377.063 160.665 378.623 158.058 cv
379.295 156.938 379.978 155.811 380.677 154.675 cv
381.186 153.849 381.692 153.024 382.214 152.19 cv
385.164 147.562 388.161 142.787 390.912 137.628 cv
393.641 132.482 396.224 126.993 397.783 121.099 cv
398.547 118.159 399.024 115.11 398.909 112.08 cv
398.801 109.054 398.038 106.065 396.485 103.445 cv
cp
.984314 .560784 .0588235 rgb
f
199.661 208.509 mo
200.78 203.637 205.046 198.459 204.336 194.398 cv
204.439 192.164 202.509 195.21 200.68 196.021 cv
198.245 190.538 206.369 189.118 204.745 185.463 cv
199.161 164.299 186.17 148.021 170.116 134.697 cv
183.342 152.164 193.956 171.322 198.549 193.685 cv
198.549 193.685 193.574 194.801 192.152 196.526 cv
189.714 200.892 197.632 203.94 195.702 206.985 cv
195.6 209.219 190.829 205.867 187.173 207.49 cv
191.347 212.065 193.292 218.675 199.089 222.573 cv
200.924 222.055 202.407 221.65 203.419 221.396 cv
207.969 215.129 212.83 207.762 215.707 200.29 cv
209.817 201.812 206.363 208.817 199.661 208.509 cv
cp
.0431373 .4 .235294 rgb
f
232.3 180.247 mo
231.822 181.605 231.419 182.794 231.135 183.709 cv
227.071 196.841 218.586 209.306 208.817 217.544 cv
215.577 211.451 221.784 198.655 223.233 189.537 cv
217.912 192.494 213.03 200.718 206.425 200.659 cv
213.834 197.639 218.677 193.835 218.18 186.14 cv
217.738 179.311 212.813 174.264 208.745 166.545 cv
207.284 163.942 203.446 153.909 201.882 151.09 cv
199.081 146.06 200.931 146.235 197.384 140.819 cv
193.84 135.406 185.118 128.962 180.261 123.756 cv
177.85 121.144 174.321 114.418 171.605 111.816 cv
168.893 109.227 171.605 111.816 168.75 109.17 cv
163.04 103.874 151.899 98.5809 145.545 93.217 cv
140.525 88.9798 138.468 84.6168 134.704 79.8746 cv
138.594 91.9753 142.758 103.684 151.665 112.748 cv
158.124 119.826 164.366 127.103 170.116 134.697 cv
186.17 148.021 199.161 164.299 204.745 185.463 cv
206.369 189.118 198.245 190.538 200.68 196.021 cv
202.509 195.21 204.439 192.164 204.336 194.398 cv
205.046 198.459 200.78 203.637 199.661 208.509 cv
206.363 208.817 209.817 201.812 215.707 200.29 cv
212.83 207.762 207.969 215.129 203.419 221.396 cv
203.844 221.288 204.194 221.204 204.438 221.153 cv
204.528 221.377 204.614 221.58 204.701 221.787 cv
209.436 220.522 214.015 221.69 218.442 218.77 cv
219.152 222.832 211.841 226.079 215.292 228.923 cv
217.017 230.345 220.98 222.02 221.792 223.848 cv
223.577 226.63 225.047 229.483 226.289 232.402 cv
229.334 225.619 235.127 218.704 232.254 210.449 cv
228.09 213.392 225.651 217.758 223.214 222.123 cv
225.845 207.837 229.162 194.115 232.3 180.247 cv
cp
0 .572549 .270588 rgb
f
221.792 223.848 mo
220.98 222.02 217.017 230.345 215.292 228.923 cv
211.841 226.079 219.152 222.832 218.442 218.77 cv
214.015 221.69 209.436 220.522 204.701 221.787 cv
206.785 226.783 207.761 227.28 209.455 230.909 cv
209.638 230.773 210.105 232.638 210.286 232.499 cv
215.541 242.282 li
217.837 246.612 219.915 250.816 221.659 254.874 cv
224.997 262.586 229.285 274.814 231.226 281.135 cv
231.274 280.889 231.325 280.62 231.375 280.357 cv
229.817 266.516 224.434 253.575 224.629 240.095 cv
224.38 237.507 225.14 234.963 226.289 232.402 cv
225.047 229.483 223.577 226.63 221.792 223.848 cv
cp
.0431373 .380392 .235294 rgb
f
121.262 248.639 mo
121.44 247.936 121.633 247.202 121.834 246.451 cv
121.611 246.535 121.392 246.621 121.164 246.701 cv
121.193 247.348 121.222 247.994 121.262 248.639 cv
cp
0 .572549 .270588 rgb
f
126.685 220.7 mo
126.712 219.911 126.672 219.191 126.518 218.615 cv
124.226 208.61 li
124.14 208.361 124.04 208.113 123.945 207.864 cv
123.968 207.971 123.999 208.072 124.019 208.182 cv
124.575 212.558 125.78 216.644 126.685 220.7 cv
cp
f
126.685 220.7 mo
125.78 216.644 124.575 212.558 124.019 208.182 cv
123.999 208.072 123.968 207.971 123.945 207.864 cv
123.678 207.168 123.376 206.471 123.033 205.775 cv
121.491 203.636 118.59 203.189 116.1 205.133 cv
114.882 202.392 114.173 198.33 112.041 195.994 cv
111.127 196.4 109.299 197.211 108.385 197.618 cv
102.802 192.437 95.1873 192.537 91.3304 188.779 cv
90.6896 188.043 90.0622 187.287 89.4427 186.522 cv
88.9712 186.22 88.5807 185.875 88.3053 185.474 cv
85.9343 187.152 83.4732 188.693 80.7522 189.866 cv
80.2483 190.132 79.7429 190.372 79.2377 190.6 cv
83.8729 190.012 88.5936 188.592 93.4616 191.115 cv
94.7817 191.623 94.171 195.176 95.491 195.684 cv
114.984 200.158 121.881 225.544 121.063 243.414 cv
121.077 244.494 121.115 245.575 121.162 246.652 cv
121.367 246.561 li
121.162 246.652 li
121.164 246.701 li
121.392 246.621 121.611 246.535 121.834 246.451 cv
123.344 240.783 125.346 233.87 125.835 227.483 cv
125.963 225.823 126.606 222.973 126.685 220.7 cv
cp
f
108.385 197.618 mo
109.299 197.211 111.127 196.4 112.041 195.994 cv
114.173 198.33 114.882 202.392 116.1 205.133 cv
118.59 203.189 121.491 203.636 123.033 205.775 cv
122.68 205.056 122.292 204.337 121.845 203.619 cv
120.687 201.752 118.863 199.585 116.743 197.489 cv
115.543 196.303 114.247 195.145 112.922 194.073 cv
110.459 192.083 107.896 190.401 105.652 189.472 cv
103.036 188.39 93.3202 189.001 89.4427 186.522 cv
90.0622 187.287 90.6896 188.043 91.3304 188.779 cv
95.1873 192.537 102.802 192.437 108.385 197.618 cv
cp
.0431373 .380392 .235294 rgb
f
69.0186 195.044 mo
64.391 193.932 60.268 191.511 55.4913 190.788 cv
55.6677 191.627 55.9048 192.432 56.2399 193.185 cv
57.1983 195.338 60.7627 198.134 65.0912 200.714 cv
65.4068 200.757 65.7363 200.821 66.073 200.893 cv
65.6499 199.94 64.9066 198.266 64.5225 197.401 cv
66.1114 197.473 67.3441 195.498 69.0186 195.044 cv
cp
1 0 0 rgb
f
69.0186 195.044 mo
69.7732 195.224 70.539 195.376 71.326 195.474 cv
70.4473 194.917 69.6976 194.859 69.0186 195.044 cv
cp
f
120.315 252.922 mo
120.528 251.658 120.863 250.211 121.262 248.639 cv
121.155 246.902 121.086 245.16 121.063 243.414 cv
121.382 236.429 120.517 228.3 118.188 220.717 cv
117.844 221.44 117.548 222.183 117.3 222.944 cv
117.707 224.265 117.985 225.62 118.133 226.99 cv
120.303 234.673 118.348 245.737 120.315 252.922 cv
cp
f
168.591 212.46 mo
162.906 209.514 158.237 203.928 159.355 199.054 cv
159.051 195.907 165.347 195.3 168.901 195.91 cv
172.962 195.201 179.155 196.827 178.851 193.679 cv
179.666 185.658 174.084 180.478 185.354 178.756 cv
175.915 169.818 163.225 163.417 155.612 153.667 cv
144.651 138.84 141.915 120.36 130.04 105.938 cv
118.165 91.5165 105.782 78.415 87.7109 72.2156 cv
93.086 91.7123 84.957 112.829 66.0676 124.499 cv
58.2484 129.066 63.9304 141.861 59.9681 150.186 cv
57.5298 154.551 51.1352 147.543 49.5115 143.888 cv
51.2343 155.158 62.1986 160.137 65.3431 169.682 cv
60.3676 170.797 56.9163 167.953 54.3789 164.704 cv
52.7524 170.897 57.5237 174.249 59.5526 178.818 cv
60.3646 180.647 70.0092 185.117 64.5253 187.552 cv
61.9286 188.705 58.1609 189.408 55.4387 190.513 cv
55.4564 190.604 55.4721 190.697 55.4913 190.788 cv
60.268 191.511 64.391 193.932 69.0186 195.044 cv
69.6976 194.859 70.4473 194.917 71.326 195.474 cv
70.539 195.376 69.7732 195.224 69.0186 195.044 cv
67.3441 195.498 66.1114 197.473 64.5225 197.401 cv
64.9066 198.266 65.6499 199.94 66.073 200.893 cv
66.4067 200.964 66.7491 201.049 67.0997 201.144 cv
78.3224 202.204 88.9644 197.76 98.738 202.996 cv
101.378 204.012 103.001 207.668 106.96 209.192 cv
105.133 210.004 104.218 210.41 102.391 211.221 cv
104.014 214.877 106.452 210.512 107.772 211.02 cv
112.576 213.703 115.801 218.081 117.3 222.944 cv
117.548 222.183 117.844 221.44 118.188 220.717 cv
114.559 208.898 107.365 198.41 95.491 195.684 cv
94.171 195.176 94.7817 191.623 93.4616 191.115 cv
88.5936 188.592 83.8729 190.012 79.2377 190.6 cv
76.4938 191.835 73.7802 192.466 71.6171 192.069 cv
73.4191 190.811 75.3603 191.195 77.117 190.792 cv
76.9115 190.805 li
73.3582 190.195 76.6078 187.657 76.2021 186.743 cv
78.1322 183.698 87.1696 181.873 81.4844 178.927 cv
81.3309 178.869 li
79.2465 179.87 77.1548 180.767 75.1244 181.327 cv
66.9399 183.584 70.5096 179.961 74.8051 177.457 cv
75.1477 174.643 77.4477 171.699 78.3393 169.381 cv
78.5439 164.914 71.8428 164.607 69.7115 162.271 cv
56.3122 151.809 77.6393 135.773 87.0851 125.014 cv
95.6175 114.66 107.502 99.5349 96.9463 85.6214 cv
105.169 91.8176 109.633 101.871 118.363 106.747 cv
122.729 109.185 126.787 118.324 122.419 125.735 cv
123.333 125.329 125.161 124.518 125.161 124.518 cv
128.51 129.596 122.822 136.498 122.617 140.966 cv
122.941 144.314 124.31 147.196 126.234 149.784 cv
127.495 150.334 128.808 150.916 130.137 151.623 cv
131.866 152.546 133.651 153.706 135.168 155.357 cv
135.539 155.761 135.911 156.23 136.218 156.659 cv
137.114 157.906 li
137.356 158.251 137.597 158.601 137.838 158.954 cv
144.837 168.869 159.539 183.46 170.451 186.994 cv
158.107 184.938 144.649 179.723 139.365 168.05 cv
139.157 168.182 138.863 168.33 138.772 168.377 cv
137.744 168.888 137.539 169.081 137.255 169.67 cv
136.995 170.254 136.896 171.175 136.93 172.138 cv
136.945 172.318 li
137.001 173.467 137.192 174.677 137.452 175.91 cv
137.624 176.726 137.82 177.549 138.038 178.372 cv
139.202 182.652 140.749 186.807 142.298 190.788 cv
143.08 192.779 143.873 194.729 144.666 196.635 cv
145.861 199.487 li
146.269 200.49 146.607 201.505 146.883 202.517 cv
147.071 203.22 147.222 203.915 147.357 204.608 cv
151.512 208.973 152.757 216.228 174.477 220.788 cv
170.819 222.836 152.283 219.601 148.323 218.914 cv
148.408 220.582 148.288 220.68 148.545 222.165 cv
149.013 225.037 151.022 227.391 152.95 230.348 cv
153.959 231.896 156.501 234.668 159.085 235.644 cv
159.956 235.257 160.847 234.879 161.769 234.517 cv
170.381 231.129 189.462 225.297 199.089 222.573 cv
198.213 221.984 197.433 221.327 196.71 220.629 cv
189.893 217.419 177.271 216.838 168.591 212.46 cv
cp
.568627 .113725 .133333 rgb
f
151.665 112.748 mo
142.758 103.684 138.594 91.9753 134.704 79.8746 cv
133.714 78.6262 132.611 77.3529 131.298 76.0469 cv
129.717 74.4918 128.151 72.9036 126.599 71.2892 cv
121.91 66.5076 li
118.76 63.3246 115.602 60.0895 112.059 57.5577 cv
110.29 56.3052 108.414 55.2596 106.448 54.6648 cv
104.485 54.0632 102.438 53.9495 100.408 54.3389 cv
96.3236 55.1272 92.4759 57.7163 89.0171 60.6884 cv
86.2395 63.0881 83.6837 65.7763 81.2562 68.5529 cv
78.8267 71.3403 76.5405 74.2067 74.3908 77.1598 cv
70.0842 83.0638 66.223 89.1931 62.6578 95.3424 cv
59.0993 101.499 60.1514 109.475 57.2368 115.659 cv
56.2559 117.744 53.361 119.02 51.1921 120.576 cv
50.2757 121.029 49.4275 121.601 48.7809 122.386 cv
47.8665 123.496 47.5717 124.832 47.6548 126.195 cv
47.4397 126.738 47.223 127.27 47.0522 127.766 cv
46.9438 128.071 46.773 131.668 46.6112 135.086 cv
47.5151 143.387 46.2009 152.521 46.874 160.447 cv
45.955 161.959 45.492 163.494 45.9635 165.309 cv
46.3445 166.774 47.2211 168.292 48.4848 169.18 cv
48.8047 169.404 49.1668 169.585 49.545 169.689 cv
50.3666 171.406 51.2761 173.104 52.129 174.857 cv
52.685 176.001 53.2175 177.169 53.6783 178.384 cv
53.8151 178.746 53.9311 179.113 54.0372 179.484 cv
55.0711 183.089 54.7759 187.08 55.4387 190.513 cv
58.1609 189.408 61.9286 188.705 64.5253 187.552 cv
70.0092 185.117 60.3646 180.647 59.5526 178.818 cv
57.5237 174.249 52.7524 170.897 54.3789 164.704 cv
56.9163 167.953 60.3676 170.797 65.3431 169.682 cv
62.1986 160.137 51.2343 155.158 49.5115 143.888 cv
51.1352 147.543 57.5298 154.551 59.9681 150.186 cv
63.9304 141.861 58.2484 129.066 66.0676 124.499 cv
84.957 112.829 93.086 91.7123 87.7109 72.2156 cv
105.782 78.415 118.165 91.5165 130.04 105.938 cv
141.915 120.36 144.651 138.84 155.612 153.667 cv
163.225 163.417 175.915 169.818 185.354 178.756 cv
174.084 180.478 179.666 185.658 178.851 193.679 cv
179.155 196.827 172.962 195.201 168.901 195.91 cv
165.347 195.3 159.051 195.907 159.355 199.054 cv
158.237 203.928 162.906 209.514 168.591 212.46 cv
177.271 216.838 189.893 217.419 196.71 220.629 cv
192.661 216.717 190.716 211.373 187.173 207.49 cv
190.829 205.867 195.6 209.219 195.702 206.985 cv
197.632 203.94 189.714 200.892 192.152 196.526 cv
193.574 194.801 198.549 193.685 198.549 193.685 cv
191.959 161.598 172.98 136.107 151.665 112.748 cv
cp
.701961 .109804 .121569 rgb
f
107.772 211.02 mo
106.452 210.512 104.014 214.877 102.391 211.221 cv
104.218 210.41 105.133 210.004 106.96 209.192 cv
103.001 207.668 101.378 204.012 98.738 202.996 cv
88.9644 197.76 78.3224 202.204 67.0997 201.144 cv
70.7866 202.142 75.2837 204.302 78.0708 204.815 cv
80.2644 205.218 85.0537 205.556 88.1574 205.824 cv
88.9403 205.376 89.7412 205.201 90.5129 205.033 cv
100.836 202.793 103.373 206.043 95.1424 208.739 cv
92.4256 209.629 94.1809 210.816 99.2358 212.477 cv
101.155 213.107 103.376 212.67 105.411 213.047 cv
105.807 213.121 106.198 213.214 106.578 213.365 cv
107.435 213.707 108.225 214.1 108.973 214.525 cv
111.441 215.93 114.002 218.437 116.942 224.142 cv
117.051 223.738 117.17 223.339 117.3 222.944 cv
115.801 218.081 112.576 213.703 107.772 211.02 cv
cp
1 0 0 rgb
f
118.133 226.99 mo
117.985 225.62 117.707 224.265 117.3 222.944 cv
117.17 223.339 117.051 223.738 116.942 224.142 cv
117.207 224.656 117.475 225.188 117.746 225.756 cv
117.891 226.155 118.014 226.57 118.133 226.99 cv
cp
f
76.2021 186.743 mo
76.6078 187.657 73.3582 190.195 76.9115 190.805 cv
77.117 190.792 li
77.5618 190.691 77.9956 190.541 78.4114 190.298 cv
80.3135 189.189 80.8066 187.084 82.1923 185.948 cv
83.0694 185.229 84.6149 184.361 86.1049 183.4 cv
89.8486 179.031 li
88.5717 178.216 86.8287 177.51 85.2909 176.888 cv
83.9848 177.552 82.6592 178.232 81.3309 178.869 cv
81.4844 178.927 li
87.1696 181.873 78.1322 183.698 76.2021 186.743 cv
cp
0 .572549 .270588 rgb
f
114.606 110.604 mo
112.778 111.416 112.167 114.97 112.065 117.203 cv
105.872 115.577 109.326 108.572 105.469 104.814 cv
108.614 114.359 102.418 122.582 98.4556 130.906 cv
97.2379 128.164 97.34 125.931 99.2701 122.885 cv
90.332 132.325 72.5615 139.123 73.7763 151.713 cv
74.6892 159.322 77.3116 166.868 81.0238 173.84 cv
83.3385 171.914 84.0547 169.562 83.6409 164.891 cv
83.3123 161.179 82.5737 157.066 81.8019 152.971 cv
81.7593 152.745 81.7175 152.518 81.6744 152.292 cv
81.5979 152.283 li
81.2321 151.18 80.8186 150.09 80.3763 149.007 cv
80.013 148.12 79.6327 147.237 79.2248 146.364 cv
79.2927 146.142 79.3558 145.92 79.4296 145.697 cv
79.9494 144.162 80.6585 142.6 81.7283 141.161 cv
82.7818 139.723 84.254 138.452 85.9559 137.635 cv
87.6555 136.805 89.5034 136.42 91.2802 136.247 cv
93.064 136.072 94.8102 136.096 96.4758 136.07 cv
98.1255 136.043 99.76 135.958 100.916 135.484 cv
101.491 135.248 101.91 134.941 102.244 134.511 cv
102.581 134.083 102.835 133.496 103.003 132.806 cv
103.119 132.323 103.194 131.85 103.239 131.271 cv
103.274 130.828 li
103.302 130.684 103.376 130.545 103.425 130.404 cv
103.64 129.875 li
104.036 128.987 li
104.581 127.828 105.169 126.749 105.761 125.697 cv
105.736 125.964 105.725 126.229 105.693 126.496 cv
105.639 126.951 105.654 127.422 105.717 127.894 cv
105.699 127.117 105.743 126.329 105.843 125.523 cv
105.947 125.402 106.053 125.278 106.157 125.157 cv
106.286 125.235 106.415 125.319 106.541 125.367 cv
107.047 125.563 li
107.07 127.219 107.288 128.875 108.183 130.43 cv
110.729 129.823 112.395 127.638 113.766 124.988 cv
113.806 124.857 113.846 124.74 113.88 124.654 cv
113.998 124.53 li
114.825 122.863 115.553 121.043 116.318 119.329 cv
116.714 119.057 117.101 118.773 117.507 118.515 cv
117.775 119.002 118 119.523 118.201 120.055 cv
118.221 118.919 118.265 117.77 118.361 116.596 cv
117.549 114.768 116.839 110.706 114.606 110.604 cv
cp
.0431373 .388235 .235294 rgb
f
118.261 123.783 mo
116.534 132.495 115.089 141.664 121.85 147.752 cv
122.857 148.292 123.949 148.792 125.086 149.283 cv
125.249 149.355 li
121.692 141.358 118.758 133.173 118.261 123.783 cv
cp
0 .572549 .270588 rgb
f
122.419 125.735 mo
126.787 118.324 122.729 109.185 118.363 106.747 cv
109.633 101.871 105.169 91.8176 96.9463 85.6214 cv
107.502 99.5349 95.6175 114.66 87.0851 125.014 cv
77.6393 135.773 56.3122 151.809 69.7115 162.271 cv
71.8428 164.607 78.5439 164.914 78.3393 169.381 cv
77.4477 171.699 75.1477 174.643 74.8051 177.457 cv
75.349 177.139 75.9045 176.839 76.4495 176.572 cv
78.3951 175.618 79.8965 174.779 81.0238 173.84 cv
77.3116 166.868 74.6892 159.322 73.7763 151.713 cv
72.5615 139.123 90.332 132.325 99.2701 122.885 cv
97.34 125.931 97.2379 128.164 98.4556 130.906 cv
102.418 122.582 108.614 114.359 105.469 104.814 cv
109.326 108.572 105.872 115.577 112.065 117.203 cv
112.167 114.97 112.778 111.416 114.606 110.604 cv
116.839 110.706 117.549 114.768 118.361 116.596 cv
118.265 117.77 118.221 118.919 118.201 120.055 cv
118.386 120.55 118.551 121.054 118.706 121.552 cv
118.559 122.29 118.409 123.035 118.261 123.783 cv
118.758 133.173 121.692 141.358 125.249 149.355 cv
125.574 149.497 125.902 149.639 126.234 149.784 cv
124.31 147.196 122.941 144.314 122.617 140.966 cv
122.822 136.498 128.51 129.596 125.161 124.518 cv
125.161 124.518 123.333 125.329 122.419 125.735 cv
cp
f
316.33 192.808 mo
307.297 195.784 306.621 208.759 297.451 210.483 cv
297.731 211.474 297.989 212.456 298.181 213.425 cv
298.812 216.427 301.475 218.964 303.15 220.872 cv
309.929 216.588 313.915 213.438 316.002 205.045 cv
317.225 217.08 311.386 223.612 303.199 230.665 cv
302.109 233.798 300.506 236.947 299.298 239.188 cv
299.913 239.674 300.538 240.196 301.17 240.744 cv
307.344 238.02 317.49 233.115 320.422 230.651 cv
320.987 230.352 321.52 230.022 322.035 229.676 cv
325.232 225.874 329.669 220.678 329.725 215.487 cv
329.745 213.531 327.808 209.907 326.435 206.429 cv
326.102 206.068 325.837 205.629 325.735 204.981 cv
325.707 204.813 325.654 204.496 325.621 204.115 cv
324.738 201.149 323.197 196.726 324.108 193.649 cv
325.726 195.427 331.212 202.869 333.277 204.036 cv
334.768 204.875 335.122 207.482 337.216 205.768 cv
337.435 205.588 337.609 205.407 337.749 205.226 cv
336.783 203.941 li
335.186 201.816 333.476 199.54 331.717 197.101 cv
331.203 196.38 330.681 195.642 330.158 194.893 cv
329.251 193.673 328.392 192.432 327.598 191.166 cv
327.452 190.932 327.315 190.696 327.172 190.461 cv
325.147 187.32 323.179 183.937 321.478 180.233 cv
321.032 179.251 320.627 178.255 320.244 177.255 cv
321.253 182.983 322.34 188.65 322.117 193.52 cv
322.016 195.754 317.04 196.869 316.33 192.808 cv
cp
.568627 .113725 .133333 rgb
f
333.394 172.1 mo
328.587 167.757 325.285 159.029 325.678 152.961 cv
322.607 157.292 323.091 163.266 322.917 166.771 cv
322.723 170.59 323.609 173.015 324.823 177.124 cv
325.683 180.101 326.953 183.053 328.557 185.939 cv
328.73 186.251 328.91 186.558 329.09 186.869 cv
331.883 191.653 335.589 196.242 339.911 200.445 cv
341.27 201.745 li
342.463 202.844 li
342.468 202.845 li
342.612 202.872 li
343.602 203.069 li
344.258 203.209 344.905 203.372 345.546 203.554 cv
346.34 203.782 347.112 204.055 347.876 204.34 cv
348.133 204.293 348.393 204.251 348.657 204.216 cv
348.601 203.806 348.549 203.336 348.5 202.824 cv
348.179 200.639 347.914 198.812 347.763 197.771 cv
347.797 196.852 347.914 196.026 348.08 195.266 cv
347.871 188.882 347.876 181.893 347.946 181.046 cv
348.089 179.303 348.321 177.546 348.633 175.787 cv
343.534 175.6 337.755 175.693 333.394 172.1 cv
cp
f
351.168 155.453 mo
344.569 152.913 348.531 144.588 345.588 140.425 cv
346.4 142.252 344.47 145.298 344.47 145.298 cv
338.785 142.352 345.387 135.043 343.358 130.474 cv
331.374 137.983 320.71 146.002 311.671 157.675 cv
311.671 157.675 310.654 160.315 311.466 162.142 cv
310.449 164.782 308.925 168.741 304.864 169.451 cv
309.234 181.22 301.4 189.685 294.333 198.019 cv
294.475 199.992 294.91 201.946 295.437 203.804 cv
296.091 206.11 296.841 208.323 297.451 210.483 cv
306.621 208.759 307.297 195.784 316.33 192.808 cv
317.04 196.869 322.016 195.754 322.117 193.52 cv
322.34 188.65 321.253 182.983 320.244 177.255 cv
319.366 174.967 318.657 172.64 318.214 170.295 cv
317.576 166.932 317.49 163.528 318.057 160.381 cv
318.61 157.229 319.802 154.386 321.273 152.014 cv
322.752 149.634 324.479 147.704 326.176 146.12 cv
329.593 142.958 332.82 141.085 335.041 139.849 cv
335.914 139.376 336.639 139.006 337.203 138.728 cv
337.851 138.386 338.289 138.203 338.47 138.126 cv
338.495 138.114 li
338.568 138.079 li
338.575 138.086 337.386 138.841 335.348 140.335 cv
335.17 140.469 li
334.776 140.802 334.366 141.16 333.926 141.577 cv
331.239 144.138 327.779 148.468 325.492 154.661 cv
325.396 154.918 325.319 155.195 325.23 155.458 cv
324.836 161.526 328.587 167.757 333.394 172.1 cv
337.755 175.693 343.534 175.6 348.633 175.787 cv
348.775 174.984 348.93 174.18 349.107 173.377 cv
350.258 168.159 352.135 163.367 354.253 159.007 cv
354.817 157.217 355.507 155.509 356.649 154.195 cv
356.759 153.852 356.871 153.505 356.983 153.158 cv
356.873 153.112 356.767 153.062 356.652 153.018 cv
355.332 152.51 352.488 155.962 351.168 155.453 cv
cp
.0823529 .415686 .164706 rgb
f
350.102 145.343 mo
348.133 143.574 347.952 141.949 348.547 140.427 cv
348.086 139.515 347.709 138.559 347.486 137.582 cv
347.892 136.527 348.384 135.514 348.979 134.552 cv
348.761 134.653 348.551 134.762 348.357 134.887 cv
347.075 132.657 346.719 130.406 346.129 128.337 cv
345.991 128.189 345.859 128.039 345.719 127.892 cv
343.516 128.183 341.305 128.954 339.189 129.92 cv
337.676 130.619 336.192 131.39 334.779 132.248 cv
333.337 133.117 331.911 134.024 330.511 134.949 cv
327.713 136.798 324.997 138.724 322.35 140.679 cv
311.953 148.406 302.571 156.482 293.998 164.272 cv
295.222 164.703 296.465 165.482 297.317 166.586 cv
298.286 167.811 298.769 169.201 299.036 170.5 cv
299.297 171.809 299.357 173.074 299.33 174.294 cv
299.262 176.736 298.865 179.027 298.377 181.23 cv
297.881 183.429 297.27 185.536 296.611 187.57 cv
296.28 188.588 295.938 189.587 295.585 190.567 cv
295.064 191.994 li
294.913 192.422 294.784 192.857 294.678 193.295 cv
294.288 194.857 294.219 196.443 294.333 198.019 cv
301.4 189.685 309.234 181.22 304.864 169.451 cv
308.925 168.741 310.449 164.782 311.466 162.142 cv
310.654 160.315 311.671 157.675 311.671 157.675 cv
320.71 146.002 331.374 137.983 343.358 130.474 cv
345.387 135.043 338.785 142.352 344.47 145.298 cv
344.47 145.298 346.4 142.252 345.588 140.425 cv
348.531 144.588 344.569 152.913 351.168 155.453 cv
352.488 155.962 355.332 152.51 356.652 153.018 cv
356.767 153.062 356.873 153.112 356.983 153.158 cv
357.999 150.005 358.999 146.714 358.36 144.763 cv
355.323 146.2 352.189 147.22 350.102 145.343 cv
cp
0 .572549 .270588 rgb
f
85.4854 156.809 mo
85.3428 158.418 95.4174 161.673 97.3762 161.099 cv
94.9175 157.564 88.0225 154.063 83.6241 154.423 cv
85.4854 156.809 li
cp
.4 .666667 .843137 rgb
f
100.086 160.761 mo
100.94 163.629 106.7 165.776 109.087 167.698 cv
111.577 169.703 113.801 171.188 116.62 172.686 cv
118.765 173.825 129.256 180.501 131.829 178.013 cv
134.722 175.217 120.72 169.712 118.872 168.764 cv
115.617 167.095 112.313 165.591 108.917 164.378 cv
106.339 163.457 103.433 161.599 100.719 161.283 cv
100.086 160.761 li
cp
f
42.9596 242.727 mo
38.6646 235.73 43.2265 225.791 45.9004 218.841 cv
49.1061 210.511 49.1671 201.294 50.4093 192.574 cv
51.5768 198.491 52.968 204.543 54.0537 210.514 cv
54.3849 212.336 55.5964 216.406 54.0726 218.041 cv
52.3935 219.845 50.8804 218.934 50.1951 216.675 cv
46.6065 220.041 46.0465 227.457 44.594 231.966 cv
43.3629 235.784 42.355 239.698 42.5861 243.695 cv
42.9596 242.727 li
cp
f
72.7116 270.858 mo
75.6726 273.028 82.4616 274.3 86.0858 274.923 cv
84.1847 270.98 77.2487 270.405 73.3824 270.56 cv
72.7116 270.858 li
cp
f
67.0538 258.117 mo
68.8032 262.117 74.4831 258.799 77.41 259.88 cv
74.1059 258.562 70.5292 256.678 66.7559 257.447 cv
67.0538 258.117 li
cp
f
54.1323 246.194 mo
55.8404 249.217 64.5026 251.683 67.3619 249.892 cv
64.5935 246.916 58.1646 245.591 54.1323 246.194 cv
cp
f
231.595 204.717 mo
229.541 201.67 234.404 190.124 235.468 186.118 cv
237.118 179.901 238.643 173.685 240.653 167.489 cv
243.312 159.289 246.621 151.464 250.774 143.908 cv
254.19 137.69 257.408 129.427 262.449 124.446 cv
254.042 141.274 249.944 160.117 244.52 178.005 cv
242.746 183.854 240.778 189.473 238.608 195.181 cv
237.168 198.969 234.622 201.995 233.047 205.276 cv
231.595 204.717 li
cp
f
230.942 269.231 mo
227.068 261.405 227.583 247.703 228.79 239.28 cv
229.872 231.739 234.052 220.467 238.67 214.46 cv
239.463 225.848 235.56 238.27 234.3 249.677 cv
233.809 254.117 233.049 258.551 232.55 262.907 cv
232.341 264.734 231.052 269.415 231.723 270.087 cv
230.942 269.231 li
cp
f
246.523 133.851 mo
247.97 126.549 252.847 114.945 254.598 110.991 cv
257.181 105.162 259.673 99.2733 262.387 93.5023 cv
267.152 83.3652 273.215 73.4216 279.176 63.9731 cv
283.17 57.64 288.637 51.3391 294.042 46.1305 cv
303.915 36.6157 314.8 40.2639 316.438 40.2128 cv
312.346 39.9866 304.197 44.0426 300.791 45.9323 cv
295.873 48.6591 293.695 51.3678 290.682 55.9633 cv
286.977 61.6117 283.244 67.505 279.506 73.0467 cv
277.373 76.2048 274.844 78.6464 272.766 82.0728 cv
263.905 96.6718 257.821 112.498 249.497 126.823 cv
248.974 127.725 246.588 133.347 246.523 133.851 cv
cp
f
355.146 136.445 mo
356.871 138.988 367.221 132.927 370.449 132.207 cv
366.491 130.007 358.876 133.259 355.908 136.107 cv
355.146 136.445 li
cp
f
359.089 123.738 mo
358.7 128.408 365.678 121.85 368.127 121.382 cv
365.936 119.162 361.479 120.211 360.064 122.849 cv
359.089 123.738 li
cp
f
349.728 124.244 mo
347.771 121.694 345.903 119.183 343.228 117.089 cv
340.565 115.004 337.241 114.25 334.692 112.273 cv
334.494 112.189 334.489 112.197 334.675 112.295 cv
337.228 113.088 355.048 120.094 349.897 124.624 cv
349.728 124.244 li
cp
f
320.034 111.388 mo
317.071 108.956 317.093 102.048 317.151 98.5854 cv
314.433 103.119 312.904 108.777 320.034 111.388 cv
cp
f
308.854 111.353 mo
306.747 114.235 310.82 117.861 313.628 118.406 cv
310.236 116.132 311.539 111.718 311.165 108.468 cv
309.378 108.283 309.096 109.062 309.446 110.633 cv
308.854 111.353 li
cp
f
286.77 153.196 mo
292.297 146.271 294.731 140.384 298.082 137.695 cv
304.601 132.466 311.147 134.795 309.504 127.784 cv
304.827 123.66 287.06 149.481 286.77 153.196 cv
cp
f
320.527 170.535 mo
320.305 164.111 324.957 154.676 327.006 147.196 cv
320.188 157.526 320.125 163.482 320.527 170.535 cv
cp
0 .286275 .137255 rgb
f
296.242 207.339 mo
299.949 202.793 302.035 198.564 304.723 193.623 cv
300.264 194.506 298.375 200.79 294.171 201.47 cv
294.436 203.498 295.277 205.841 296.242 207.339 cv
cp
f
219.894 251.286 mo
221.41 247.357 220.095 240.191 219.856 235.877 cv
212.195 239.691 218.184 245.966 220.488 250.567 cv
219.894 251.286 li
cp
f
121.014 146.837 mo
119.25 145.204 118.305 141.285 118.482 138.821 cv
118.681 136.047 121.875 133.647 119.844 130.99 cv
116.364 131.741 119.135 125.653 119.158 123.354 cv
119.186 120.545 119.115 114.838 115.188 115.234 cv
115.352 117.925 117.426 120.411 117.706 123.198 cv
118.04 126.521 116.911 130.077 116.497 133.322 cv
115.931 137.749 116.355 146.659 121.903 147.811 cv
121.014 146.837 li
cp
f
313.764 60.2642 mo
307.3 54.6279 319.206 40.9032 327.854 46.3223 cv
335.851 51.334 344.435 62.6983 350.248 69.6079 cv
356.398 76.9183 359.057 81.7396 366.426 87.8227 cv
373.11 93.3377 380.825 98.7757 388.099 103.341 cv
401.877 111.986 390.71 113.372 390.304 121.087 cv
390.12 124.576 391.055 126.959 390.243 130.2 cv
389.209 134.323 386.439 135.866 383.763 138.615 cv
379.14 143.365 380.7 147.623 376.954 153.051 cv
373.285 158.364 362.814 178.197 359.032 192.897 cv
358.983 174.71 370.328 154.549 374.33 147.082 cv
376.437 143.15 377.58 139.847 381.033 136.682 cv
383.577 134.353 389.122 132.837 388.064 128.653 cv
379.615 129.29 386.997 120.286 387.251 115.664 cv
387.51 110.943 387.945 109.628 384.421 107.49 cv
383.829 107.131 381.772 108.135 380.588 107.35 cv
378.791 106.16 379.198 103.622 378.305 102.535 cv
374.554 97.9676 366.149 93.4635 359.678 92.8476 cv
352.019 92.1195 342.945 95.3345 336.783 87.8733 cv
340.541 85.7229 345.007 87.8496 348.776 85.5019 cv
347.645 80.5795 341.654 75.0459 339.034 70.426 cv
336.395 65.7719 333.88 60.653 330.28 56.7029 cv
324.6 50.4677 314.754 48.8295 314.288 60.031 cv
313.764 60.2642 li
cp
.988235 .768627 .129412 rgb
f
268.308 221.333 mo
263.997 213.093 266.856 206.281 267.196 197.942 cv
267.339 194.417 264.623 189.63 267.556 187.03 cv
269.077 185.683 276.228 185.437 278.765 184.094 cv
276.828 191.028 269.695 190.825 271.513 199.122 cv
272.613 204.143 279.758 212.758 276.015 217.199 cv
274.826 214.489 273.471 211.528 270.565 210.835 cv
267.613 216.255 278.097 223.99 282.11 227.057 cv
278.928 227.027 269.398 224.977 268.774 222.383 cv
268.308 221.333 li
cp
f
266.687 178.027 mo
265.99 174.427 269.194 167.163 269.791 162.671 cv
270.574 156.78 271.659 152.069 273.485 146.566 cv
276.042 138.861 279.533 133.345 282.404 125.608 cv
289.662 106.046 305.277 87.8346 309.386 67.8158 cv
313.268 88.6022 299.64 98.5508 295.604 109.699 cv
293.353 115.917 282.357 127.894 285.714 134.261 cv
287.866 133.798 290.58 132.881 292.345 132.53 cv
282.974 137.615 281.66 139.81 278.052 150.124 cv
275.171 158.359 272.221 166.204 266.687 178.027 cv
265.961 177.55 266.942 179.315 266.486 178.805 cv
266.902 178.72 266.364 178.287 266.687 178.027 cv
cp
f
107.603 319.742 mo
116.722 312.068 115.387 295.687 111.464 285.951 cv
105.786 271.857 93.4812 270.612 81.9782 263.31 cv
86.4515 261.445 89.8401 266.408 93.7886 264.773 cv
92.7599 263.659 92.3219 261.537 91.4009 260.352 cv
99.6806 260.52 108.054 273.458 112.773 279.385 cv
116.439 283.99 116.722 289.344 116.316 295.734 cv
115.971 301.19 115.958 306.139 114.667 311.574 cv
107.603 319.742 li
cp
f
72.3722 251.739 mo
72.7265 253.215 74.815 254.36 76.919 254.042 cv
75.0821 251.822 77.686 250.153 79.1788 248.874 cv
76.7299 248.776 74.1436 250.023 72.3722 251.739 cv
cp
f
69.8076 240.299 mo
66.9851 243.802 59.2612 239.808 58.0242 236.178 cv
63.7342 235.818 68.5646 237.749 74.1583 234.702 cv
74.1355 237.406 70.5467 238.539 68.7569 240.765 cv
69.8076 240.299 li
cp
f
76.3734 231.312 mo
77.852 225.696 75.0465 219.588 75.0189 213.506 cv
77.2417 213.969 79.5678 214.807 81.0878 216.312 cv
78.7487 217.918 79.6912 217.282 79.5492 219.527 cv
83.4392 217.501 90.4528 215.856 97.4785 218.04 cv
92.5188 220.017 91.5704 220.644 86.5635 222.794 cv
83.3172 224.189 76.542 229.36 76.3734 231.312 cv
cp
f
105.298 223.909 mo
105.768 223.532 108.493 222.851 110.245 222.908 cv
109.193 219.589 106.037 218.658 106.115 222.917 cv
105.298 223.909 li
cp
f
127.355 236.757 mo
125.445 239.512 131.94 245.407 135.102 245.844 cv
133.361 244.386 126.534 235.82 128.439 233.246 cv
130.347 230.666 138.178 236.16 140.759 236.243 cv
136.567 234.8 132.704 231.463 129.716 228.225 cv
128.84 229.264 129.129 230.197 129.399 231.446 cv
127.355 236.757 li
cp
f
86.7277 67.3735 mo
90.0011 65.3496 95.5285 63.088 98.4581 68.2632 cv
97.5893 66.5287 96.4281 64.8801 95.1809 63.6071 cv
106.717 50.0309 125.196 85.133 132.257 89.0714 cv
125.364 80.1926 119.604 68.1364 110.556 61.197 cv
106.958 58.4376 102.173 55.7565 97.5152 56.263 cv
93.381 56.7132 87.2949 61.8794 86.553 65.5645 cv
86.7277 67.3735 li
cp
1 0 0 rgb
f
48.061 164.419 mo
45.9172 157.815 53.5481 162.73 55.6953 163.481 cv
54.816 159.491 50.6546 159.088 49.2022 155.723 cv
48.1821 153.36 49.2892 148.627 49.1227 145.882 cv
48.8078 140.673 48.4524 129.017 53.6326 126.193 cv
55.3827 129.865 54.5262 134.375 56.5458 137.958 cv
58.8364 133.364 57.2263 126.419 59.5723 120.91 cv
61.4382 116.53 65.8219 113.259 67.4954 109.088 cv
68.9673 105.42 68.8042 99.8347 70.7928 95.219 cv
73.0133 90.0668 76.046 85.99 78.9632 81.3582 cv
81.6138 77.1504 84.3476 73.3334 87.7079 69.9282 cv
89.483 68.1292 95.8172 62.2437 89.013 62.5727 cv
81.2934 62.9454 72.1185 84.8587 69.2709 90.3744 cv
67.3658 94.0642 64.9467 98.1815 63.5863 102.039 cv
62.2963 105.697 63.38 109.472 62.4669 112.909 cv
60.3082 121.031 50.7128 121.957 48.2698 130.504 cv
46.3164 137.339 46.6369 146.899 46.663 153.874 cv
46.691 161.325 46.195 169.209 53.5168 173.725 cv
50.1348 171.546 46.9658 166.751 49.9296 162.961 cv
48.061 164.419 li
cp
f
54.243 181.172 mo
55.0023 184.641 58.5422 186.554 61.655 185.331 cv
60.6195 182.902 55.7507 177.851 55.1781 177.612 cv
54.243 181.172 li
cp
f
145.365 124.354 mo
145.703 140.71 166.59 156.72 179.001 164.553 cv
171.2 155.928 154.423 143.319 153.817 130.747 cv
159.043 129.537 165.431 141.198 167.888 145.088 cv
173.147 139.831 151.68 120.764 145.716 122.312 cv
145.365 124.354 li
cp
f
180.591 209.342 mo
177.263 210.075 168.297 207.51 166.268 204.382 cv
161.951 197.725 170.94 200.422 174.01 200.189 cv
184.992 199.356 174.535 184.693 183.596 184.11 cv
178.916 192.453 184.243 197.513 190.291 203.032 cv
184.839 202.923 184.179 200.436 179.615 205.482 cv
180.274 207.295 181.18 208.938 182.341 210.451 cv
180.591 209.342 li
cp
f
325.169 170.925 mo
327.727 177.158 332.388 185.782 338.269 189.098 cv
338.311 183.703 334.366 179.253 343.388 181.007 cv
340.895 174.718 329.52 176.582 327.037 169.466 cv
325.169 170.925 li
cp
f
366.95 197.025 mo
367.851 205.842 384.487 207.296 391.057 210.204 cv
395.665 212.244 393.688 214.902 395.887 216.897 cv
398.056 218.865 401.648 218.043 403.603 220.263 cv
399.631 221.898 395.261 221.066 391.335 223.399 cv
392.19 225.108 391.405 225.631 391.505 226.83 cv
391.641 228.464 392.35 228.688 392.662 229.79 cv
393.299 232.043 396.841 233.386 393.718 236.02 cv
390.455 233.989 386.288 231.891 382.63 233.571 cv
384.746 236.266 388.867 236.364 392.17 235.622 cv
395.178 239.261 384.243 248.008 387.038 254.722 cv
388.125 247.369 393.714 239.057 400.329 235.553 cv
398.156 233.547 391.81 228.61 394.029 224.436 cv
395.981 220.765 404.019 222.473 407.664 220.974 cv
408.169 216.584 403.805 218.24 401.114 216.916 cv
400.201 216.467 397.98 215.983 397.515 214.934 cv
396.761 213.229 398.705 211.791 398.733 211.874 cv
397.527 208.271 400.038 209.803 395.31 208.173 cv
393.202 207.446 390.469 207.764 388.366 207.011 cv
382.409 204.874 378.102 197.869 372 196.041 cv
364.223 193.712 362.13 203.925 367.49 202.629 cv
366.142 202.459 367.054 201.299 366.539 200.352 cv
366.95 197.025 li
cp
f
301.051 214.34 mo
300.751 213.619 307.28 202.511 309.583 200.629 cv
314.087 196.945 317.558 198.487 321.256 202.125 cv
321.111 199.379 320.755 196.569 322.214 193.874 cv
320.342 202.6 326.649 210.194 325.953 217.697 cv
324.173 214.411 323.01 209.684 320.429 206.995 cv
318.483 204.966 315.408 204.467 313.664 201.915 cv
310.751 202.65 309.126 205.413 310.22 208.286 cv
307.128 209.74 299.891 212.536 301.226 216.149 cv
301.051 214.34 li
cp
f
147.843 227.657 mo
142.848 228.532 132.923 224.933 130.81 220.208 cv
133.729 220.347 136.144 223.905 139.489 221.839 cv
139.569 215.052 128.78 200.536 124.436 195.949 cv
128.896 202.72 134.307 209.882 140.427 215.243 cv
142.911 217.419 143.789 217.006 145.218 220.019 cv
146.372 222.452 146.388 225.349 147.318 227.891 cv
147.843 227.657 li
cp
0 .223529 .368627 rgb
f
143.003 215.342 mo
135.521 211.536 131.606 194.565 121.653 195.343 cv
122.569 199.036 126.037 200.925 128.496 203.53 cv
132.982 208.283 135.955 214.06 139.733 219.309 cv
143.003 215.342 li
cp
f
138.51 212.305 mo
140.686 214.759 143.164 214.667 144.627 217.274 cv
145.846 219.444 145.681 223.714 146.618 226.315 cv
138.51 212.305 li
cp
f
143.739 98.0316 mo
149.556 104.282 160.637 112.38 165.37 117.355 cv
168.488 120.633 171.313 123.759 173.904 127.404 cv
175.908 130.222 177.435 135.295 179.95 137.468 cv
181.321 138.653 183.387 137.721 185.003 138.829 cv
186.649 139.959 187.6 142.516 188.682 144.08 cv
191.925 148.769 194.7 153.681 197.775 158.503 cv
201.005 163.567 204.425 168.905 207.168 174.267 cv
209.138 178.116 209.584 182.53 211.862 185.97 cv
210.314 175.849 203.527 161.949 198.144 152.487 cv
195.919 148.579 193.467 143.687 190.721 140.062 cv
187.977 136.441 182.762 136.303 180.498 133.782 cv
178.849 131.946 180.114 129.86 179.174 128.223 cv
177.958 126.105 176.143 125.686 174.736 123.923 cv
171.881 120.341 170.482 116.07 167.269 112.74 cv
163.95 109.299 159.412 107.472 155.215 105.389 cv
150.963 103.278 147.784 100.453 143.739 98.0316 cv
cp
.223529 .709804 .290196 rgb
f
297.915 164.788 mo
298.217 164.486 300.626 166.51 301.638 168.712 cv
305.717 165.049 306.638 156.586 310.208 151.892 cv
305.328 155.516 301.519 160.611 297.389 165.021 cv
297.915 164.788 li
cp
f
377.404 170.999 mo
377.193 176.433 393.557 182.135 396.062 188.937 cv
393.064 182.777 385.865 173.235 376.871 166.765 cv
377.08 168.084 376.871 166.765 377.288 167.906 cv
377.404 170.999 li
cp
f
101.522 165.837 mo
106.603 172.907 114.783 180.728 115.443 190.251 cv
117.901 177.299 109.992 173.02 101.522 165.837 cv
cp
0 .333333 .552941 rgb
f
253.807 231.879 mo
271.484 231.268 292.342 243.471 305.872 253.688 cv
265.866 233.19 259.432 233.047 245.381 256.651 cv
247.402 249.488 251.472 235.903 253.807 231.879 cv
cp
.941176 .913725 .811765 rgb
f
140.216 255.333 mo
146.047 250.555 150.803 248.434 157.073 245.659 cv
164.426 242.404 171.836 239.842 179.278 236.527 cv
185.159 233.907 195.701 233.181 198.635 233.3 cv
205.188 243.915 217.589 261.018 221.081 277.159 cv
217.656 270.783 199.089 222.573 181.403 244.261 cv
181.153 243.175 179.925 241.952 179.632 240.856 cv
173.084 243.374 171.461 244.057 164.807 246.281 cv
158.233 248.478 146.732 252.165 140.216 255.333 cv
cp
f
176.348 300.56 mo
205.558 294.908 240.299 291.847 269.051 302.925 cv
256.781 298.016 237.088 293.439 223.784 292.807 cv
216.071 292.441 208.528 294.751 200.846 294.949 cv
194.055 295.125 181.463 295.285 176.958 300.291 cv
176.348 300.56 li
cp
f
160.037 291.756 mo
163.032 297.029 178.629 288.336 183.609 287.305 cv
191.945 285.58 200.47 287.229 207.429 286.993 cv
197.932 286.437 190.238 284.388 180.414 286.356 cv
173.687 287.704 167.431 290.611 160.647 291.486 cv
160.037 291.756 li
cp
f
290.526 299.383 mo
280.014 293.922 270.873 288.755 262.658 287.584 cv
255.979 286.632 246.792 284.31 240.161 286.065 cv
255.059 278.538 278.415 286.905 290.526 299.383 cv
cp
f
191.585 280.664 mo
200.707 283.19 211.126 281.678 220.235 285.884 cv
213.9 281.801 198.604 275.333 191.314 280.055 cv
191.585 280.664 li
cp
f
89.8148 180.031 mo
89.5511 180.582 89.0757 181.124 88.4852 181.65 cv
88.4634 181.654 li
88.4501 181.683 li
88.1997 181.904 87.9288 182.122 87.6438 182.336 cv
88.4906 181.514 89.2428 180.73 89.8148 180.031 cv
cp
398.909 112.08 mo
399.024 115.11 398.547 118.159 397.783 121.099 cv
396.224 126.993 393.641 132.482 390.912 137.628 cv
388.161 142.787 385.164 147.562 382.214 152.19 cv
381.692 153.024 381.186 153.849 380.677 154.675 cv
379.978 155.811 379.295 156.938 378.623 158.058 cv
377.063 160.665 375.568 163.237 374.164 165.76 cv
372.357 169.005 370.686 172.177 369.159 175.269 cv
369.164 175.257 li
369.138 175.311 li
367.556 178.515 366.128 181.633 364.871 184.652 cv
364.952 184.367 365.04 184.088 365.113 183.8 cv
364.726 185.012 li
364.676 185.133 364.632 185.25 364.583 185.37 cv
361.522 192.627 358.041 201.988 355.867 211.248 cv
355.583 214.375 355.595 214.605 355.522 217.992 cv
355.46 220.885 355.551 223.796 355.91 226.597 cv
354.206 219.967 352.47 213.478 352.217 210.297 cv
352.217 210.297 349.801 190.411 350.585 183.83 cv
352.096 171.158 356.742 161.827 356.742 161.827 cv
357.861 159.184 359.071 156.652 360.292 154.244 cv
362.527 149.867 364.719 145.829 366.614 142.165 cv
367.245 140.945 367.843 139.769 368.397 138.635 cv
368.478 138.471 li
368.4 138.521 li
369.109 137.077 369.59 135.743 369.608 134.702 cv
364.375 136.71 359.188 142.18 353.711 142.215 cv
346.724 133.123 366.932 132.778 369.451 125.176 cv
370.105 123.202 364.064 130.256 357.736 128.112 cv
356.342 127.051 362.241 113.863 352.886 128.118 cv
352.945 128.749 li
351.98 128.855 351.064 128.929 350.254 128.94 cv
350.264 128.917 li
350.019 128.586 349.773 128.256 349.517 127.928 cv
348.572 126.718 347.544 125.537 346.431 124.393 cv
345.717 123.662 344.977 122.941 344.197 122.242 cv
340.549 119 336.111 116.117 330.88 114.497 cv
328.426 113.744 325.796 113.311 323.106 113.304 cv
319.713 114.755 316.924 113.378 314.68 110.739 cv
314.662 110.739 li
314.563 110.732 314.463 110.74 314.365 110.744 cv
314.331 110.756 li
313.714 109.989 313.186 109.193 312.814 108.424 cv
312.905 109.434 313.233 110.484 313.704 111.494 cv
313.435 111.292 li
313.694 112.378 314.63 113.611 315.62 114.871 cv
315.665 115.024 315.724 115.182 315.752 115.325 cv
315.779 115.473 li
316.91 116.555 li
317.446 117.294 317.909 118.026 318.168 118.725 cv
318.168 119.367 318.16 120.03 318.072 120.61 cv
317.781 120.743 317.482 120.862 317.177 120.956 cv
316.22 121.246 315.248 121.365 314.341 121.37 cv
313.712 121.374 313.127 121.306 312.565 121.21 cv
312.453 121.123 312.349 121.015 312.239 120.92 cv
309.625 120.831 307.592 117.97 306.606 115.38 cv
306.587 115.402 li
306.434 114.94 306.179 114.76 305.747 115.423 cv
304.431 117.436 305.985 119.843 306.348 120.435 cv
306.706 121.028 307.943 121.687 308.668 122.17 cv
309.391 122.659 310.246 123.099 311.122 123.612 cv
311.463 123.815 311.823 124.038 312.155 124.287 cv
312.394 124.507 312.601 124.723 312.754 124.937 cv
313.002 125.283 313.227 125.735 313.424 126.259 cv
313.43 126.305 li
313.43 126.426 313.419 126.55 313.4 126.676 cv
313.36 126.821 313.363 127.122 313.362 127.23 cv
313.345 127.836 313.276 128.462 313.159 129.102 cv
312.926 130.382 312.502 131.714 311.942 133.071 cv
311.704 133.641 311.429 134.217 311.147 134.795 cv
308.864 135.775 306.711 137.099 304.665 138.648 cv
296.326 142.639 282.882 155.567 283.685 162.908 cv
287.86 161.175 289.394 155.803 292.251 151.645 cv
296.048 149.262 301.235 147.046 304.946 144.449 cv
303.466 146.366 301.859 148.304 300.137 150.255 cv
297.493 153.227 294.627 156.189 291.422 159.134 cv
290.212 160.302 li
289.606 160.91 li
289.416 161.104 289.206 161.32 288.786 161.786 cv
288.059 162.596 287.388 163.501 287.254 164.301 cv
287.178 164.703 287.186 165.067 287.32 165.488 cv
287.475 165.929 287.711 166.228 287.989 166.472 cv
288.025 166.494 li
288.309 166.728 288.674 166.93 289.16 167.053 cv
289.632 167.178 290.179 167.231 290.711 167.293 cv
290.804 167.303 li
291.508 167.391 291.586 167.414 291.846 167.463 cv
292.078 167.508 292.297 167.563 292.505 167.625 cv
293.34 167.879 293.958 168.273 294.436 168.875 cv
295.41 170.083 295.723 172.184 295.691 174.228 cv
295.661 176.303 295.345 178.425 294.933 180.495 cv
294.514 182.569 293.989 184.606 293.417 186.592 cv
293.132 187.585 292.834 188.565 292.526 189.533 cv
292.055 191.008 li
291.888 191.545 291.752 192.086 291.645 192.629 cv
291.206 194.809 291.254 196.985 291.57 198.982 cv
291.885 200.989 292.44 202.836 293.039 204.56 cv
294.249 208.001 295.606 211.008 296.391 213.851 cv
297.205 216.676 297.384 219.34 296.83 221.585 cv
296.298 223.835 293.068 233.562 292.045 234.878 cv
292.178 234.945 li
292.045 234.878 li
285.692 231.592 279.087 228.307 272.369 226.377 cv
268.045 225.134 263.849 224.289 259.679 222.826 cv
254.609 221.051 248.153 217.543 248.153 217.543 cv
243.099 228.348 237.371 250.203 236.213 255.887 cv
234.311 263.462 232.415 274.997 231.226 281.135 cv
229.285 274.814 224.997 262.586 221.659 254.874 cv
219.915 250.816 217.837 246.612 215.541 242.282 cv
210.286 232.499 li
210.105 232.638 209.638 230.773 209.455 230.909 cv
207.691 227.128 206.708 226.762 204.438 221.153 cv
200.573 221.958 172.712 230.211 161.769 234.517 cv
160.847 234.879 159.956 235.257 159.085 235.644 cv
156.501 234.668 153.959 231.896 152.95 230.348 cv
152.708 229.977 152.465 229.616 152.224 229.262 cv
150.543 226.793 148.954 224.677 148.545 222.165 cv
148.288 220.68 148.408 220.582 148.323 218.914 cv
152.283 219.601 170.819 222.836 174.477 220.788 cv
152.757 216.228 151.512 208.973 147.357 204.608 cv
147.222 203.915 147.071 203.22 146.883 202.517 cv
146.607 201.505 146.269 200.49 145.861 199.487 cv
144.666 196.635 li
143.873 194.729 143.08 192.779 142.298 190.788 cv
140.749 186.807 139.202 182.652 138.038 178.372 cv
137.82 177.549 137.624 176.726 137.452 175.91 cv
137.192 174.677 137.001 173.467 136.945 172.318 cv
136.93 172.138 li
136.896 171.175 136.995 170.254 137.255 169.67 cv
137.539 169.081 137.744 168.888 138.772 168.377 cv
138.863 168.33 139.157 168.182 139.365 168.05 cv
144.649 179.723 158.107 184.938 170.451 186.994 cv
159.539 183.46 144.837 168.869 137.838 158.954 cv
137.597 158.601 137.356 158.251 137.114 157.906 cv
136.218 156.659 li
135.911 156.23 135.539 155.761 135.168 155.357 cv
133.651 153.706 131.866 152.546 130.137 151.623 cv
128.4 150.699 126.688 149.987 125.086 149.283 cv
123.949 148.792 122.857 148.292 121.85 147.752 cv
114.509 141.142 116.842 130.9 118.706 121.552 cv
118.385 120.519 118.026 119.456 117.507 118.515 cv
117.101 118.773 116.714 119.057 116.318 119.329 cv
115.553 121.043 114.825 122.863 113.998 124.53 cv
113.88 124.654 li
113.846 124.74 113.806 124.857 113.766 124.988 cv
112.395 127.638 110.729 129.823 108.183 130.43 cv
107.288 128.875 107.07 127.219 107.047 125.563 cv
106.541 125.367 li
106.415 125.319 106.286 125.235 106.157 125.157 cv
106.053 125.278 105.947 125.402 105.843 125.523 cv
105.743 126.329 105.699 127.117 105.717 127.894 cv
105.654 127.422 105.639 126.951 105.693 126.496 cv
105.725 126.229 105.736 125.964 105.761 125.697 cv
105.169 126.749 104.581 127.828 104.036 128.987 cv
103.64 129.875 li
103.425 130.404 li
103.376 130.545 103.302 130.684 103.274 130.828 cv
103.239 131.271 li
103.194 131.85 103.119 132.323 103.003 132.806 cv
102.835 133.496 102.581 134.083 102.244 134.511 cv
101.91 134.941 101.491 135.248 100.916 135.484 cv
99.76 135.958 98.1255 136.043 96.4758 136.07 cv
94.8102 136.096 93.064 136.072 91.2802 136.247 cv
89.5034 136.42 87.6555 136.805 85.9559 137.635 cv
84.254 138.452 82.7818 139.723 81.7283 141.161 cv
80.6585 142.6 79.9494 144.162 79.4296 145.697 cv
79.3558 145.92 79.2927 146.142 79.2248 146.364 cv
79.6327 147.237 80.013 148.12 80.3763 149.007 cv
80.8186 150.09 81.2321 151.18 81.5979 152.283 cv
81.6744 152.292 li
81.7175 152.518 81.7593 152.745 81.8019 152.971 cv
82.5737 157.066 83.3123 161.179 83.6409 164.891 cv
84.256 171.837 82.3902 173.66 76.4495 176.572 cv
71.6021 178.948 65.9027 183.87 75.1244 181.327 cv
76.8689 180.845 78.6583 180.115 80.4494 179.284 cv
82.0722 178.532 83.696 177.699 85.2909 176.888 cv
86.8287 177.51 88.5717 178.216 89.8486 179.031 cv
86.1049 183.4 li
84.6149 184.361 83.0694 185.229 82.1923 185.948 cv
80.8066 187.084 80.3135 189.189 78.4114 190.298 cv
76.9512 191.149 75.2804 190.894 73.6266 191.234 cv
72.9491 191.374 72.2736 191.611 71.6171 192.069 cv
72.1433 192.166 72.7092 192.188 73.2931 192.17 cv
75.5507 192.098 78.1766 191.227 80.7522 189.866 cv
83.4732 188.693 85.9343 187.152 88.3053 185.474 cv
90.8458 189.179 102.718 188.258 105.652 189.472 cv
107.896 190.401 110.459 192.083 112.922 194.073 cv
114.247 195.145 115.543 196.303 116.743 197.489 cv
118.863 199.585 120.687 201.752 121.845 203.619 cv
122.878 205.282 123.646 206.946 124.226 208.61 cv
126.518 218.615 li
127.117 220.85 126.007 225.248 125.835 227.483 cv
125.136 236.608 121.341 246.826 120.315 252.922 cv
118.241 245.344 120.537 233.446 117.746 225.756 cv
114.463 218.888 111.663 216.057 108.973 214.525 cv
108.225 214.1 107.435 213.707 106.578 213.365 cv
106.198 213.214 105.807 213.121 105.411 213.047 cv
103.376 212.67 101.155 213.107 99.2358 212.477 cv
94.1809 210.816 92.4256 209.629 95.1424 208.739 cv
103.373 206.043 100.836 202.793 90.5129 205.033 cv
89.7412 205.201 88.9403 205.376 88.1574 205.824 cv
85.0537 205.556 80.2644 205.218 78.0708 204.815 cv
76.186 204.468 73.5171 203.366 70.8467 202.38 cv
68.8147 201.63 66.7809 200.946 65.0912 200.714 cv
60.7627 198.134 57.1983 195.338 56.2399 193.185 cv
54.5089 189.294 55.3539 184.075 54.0372 179.484 cv
53.9311 179.113 53.8151 178.746 53.6783 178.384 cv
53.2175 177.169 52.685 176.001 52.129 174.857 cv
51.2761 173.104 50.3666 171.406 49.545 169.689 cv
49.1668 169.585 48.8047 169.404 48.4848 169.18 cv
47.2211 168.292 46.3445 166.774 45.9635 165.309 cv
45.492 163.494 45.955 161.959 46.874 160.447 cv
46.2009 152.521 47.5151 143.387 46.6112 135.086 cv
46.773 131.668 46.9438 128.071 47.0522 127.766 cv
47.223 127.27 47.4397 126.738 47.6548 126.195 cv
47.5717 124.832 47.8665 123.496 48.7809 122.386 cv
49.4275 121.601 50.2757 121.029 51.1921 120.576 cv
53.361 119.02 56.2559 117.744 57.2368 115.659 cv
60.1514 109.475 59.0993 101.499 62.6578 95.3424 cv
66.223 89.1931 70.0842 83.0638 74.3908 77.1598 cv
76.5405 74.2067 78.8267 71.3403 81.2562 68.5529 cv
83.6837 65.7763 86.2395 63.0881 89.0171 60.6884 cv
92.4759 57.7163 96.3236 55.1272 100.408 54.3389 cv
102.438 53.9495 104.485 54.0632 106.448 54.6648 cv
108.414 55.2596 110.29 56.3052 112.059 57.5577 cv
115.602 60.0895 118.76 63.3246 121.91 66.5076 cv
126.599 71.2892 li
128.151 72.9036 129.717 74.4918 131.298 76.0469 cv
137.601 82.3131 139.203 87.8641 145.545 93.217 cv
151.899 98.5809 163.04 103.874 168.75 109.17 cv
171.605 111.816 168.893 109.227 171.605 111.816 cv
174.321 114.418 177.85 121.144 180.261 123.756 cv
185.118 128.962 193.84 135.406 197.384 140.819 cv
200.931 146.235 199.081 146.06 201.882 151.09 cv
203.446 153.909 207.284 163.942 208.745 166.545 cv
212.813 174.264 217.738 179.311 218.18 186.14 cv
218.677 193.835 213.834 197.639 206.425 200.659 cv
213.03 200.718 217.912 192.494 223.233 189.537 cv
221.784 198.655 215.577 211.451 208.817 217.544 cv
218.586 209.306 227.071 196.841 231.135 183.709 cv
232.914 177.965 239.356 161.55 240.066 159.052 cv
248.858 137.678 271.437 102.542 274.685 98.2871 cv
268.168 102.766 242.768 137.343 240.184 145.938 cv
240.18 145.916 li
240.933 143.085 241.679 140.166 242.418 137.139 cv
243.596 132.244 244.746 127.175 246.352 121.973 cv
247.919 116.769 249.79 111.429 251.995 106.007 cv
256.391 95.1621 262.13 83.9987 269.23 72.9222 cv
272.775 67.383 276.658 61.8651 280.863 56.4079 cv
282.96 53.6834 285.15 50.9615 287.398 48.2823 cv
289.614 45.6829 292.101 43.2172 294.839 41.1579 cv
297.58 39.1008 300.631 37.465 303.915 36.6157 cv
307.195 35.7495 310.679 35.7063 314.11 36.3649 cv
317.548 37.0164 320.925 38.3218 324.168 39.98 cv
327.416 41.6445 330.544 43.6588 333.569 45.8707 cv
345.696 54.7826 355.545 66.0362 365.805 76.2323 cv
370.929 81.3484 376.184 86.2187 381.684 90.5771 cv
384.422 92.7477 387.262 94.8269 390.048 96.7256 cv
392.679 98.5749 394.958 100.809 396.485 103.445 cv
398.038 106.065 398.801 109.054 398.909 112.08 cv
cp
397.685 184.774 mo
401.867 190.545 406.294 196.066 411.041 201.15 cv
418.329 207.79 420.974 226.883 410.72 240.803 cv
405.496 247.894 396.661 255.568 393.001 264.344 cv
389.323 270.546 391.639 281.544 396.017 288.824 cv
383.532 273.877 375.675 253.522 391.216 240.125 cv
389.426 237.717 381.065 236.43 378.946 233.752 cv
379.103 232.814 379.191 231.829 379.203 230.797 cv
382.015 228.103 390.922 233.705 393.454 232.221 cv
391.758 227.532 386.799 225.224 385.464 220.007 cv
389.278 218.284 393.301 221.189 397.194 218.757 cv
394.958 213.678 378.816 210.388 373.611 209.194 cv
369.793 208.317 364.798 206.511 359.77 205.292 cv
360.577 201.553 361.531 197.659 362.664 193.671 cv
363.006 192.708 363.364 191.737 363.752 190.748 cv
366.626 183.366 370.706 175.282 375.76 166.674 cv
377.083 164.421 378.476 162.13 379.928 159.807 cv
381.522 161.94 383.121 164.071 384.668 166.238 cv
389.098 172.41 393.276 178.712 397.685 184.774 cv
cp
323.831 116.944 mo
325.887 116.996 327.923 117.316 329.878 117.873 cv
334.521 119.208 338.675 121.706 342.173 124.596 cv
342.349 124.743 342.517 124.895 342.69 125.044 cv
340.963 125.516 339.32 126.175 337.784 126.89 cv
336.155 127.661 334.58 128.504 333.07 129.441 cv
331.584 130.36 330.14 131.301 328.718 132.264 cv
325.878 134.188 323.144 136.179 320.488 138.194 cv
312.981 143.927 306.069 149.817 299.617 155.648 cv
300.615 154.518 301.587 153.389 302.502 152.266 cv
305.907 148.053 308.828 143.868 311.001 139.774 cv
311.215 139.552 311.421 139.32 311.624 139.079 cv
312.354 138.434 312.913 137.585 313.322 136.606 cv
314.275 134.902 314.941 132.996 315.161 131.095 cv
315.836 129.668 316.561 128.274 317.494 126.997 cv
319.604 124.103 324.848 120.659 323.831 116.944 cv
cp
348.5 202.824 mo
348.549 203.336 348.601 203.806 348.657 204.216 cv
348.393 204.251 348.133 204.293 347.876 204.34 cv
347.112 204.055 346.34 203.782 345.546 203.554 cv
344.905 203.372 344.258 203.209 343.602 203.069 cv
342.612 202.872 li
342.468 202.845 li
342.463 202.844 li
341.27 201.745 li
339.911 200.445 li
335.589 196.242 331.883 191.653 329.09 186.869 cv
328.91 186.558 328.73 186.251 328.557 185.939 cv
326.953 183.053 325.683 180.101 324.823 177.124 cv
323.609 173.015 323.163 168.916 323.356 165.097 cv
323.696 158.222 324.724 156.748 325.492 154.661 cv
327.779 148.468 331.239 144.138 333.926 141.577 cv
334.366 141.16 334.776 140.802 335.17 140.469 cv
335.348 140.335 li
337.386 138.841 338.575 138.086 338.568 138.079 cv
338.495 138.114 li
338.47 138.126 li
338.289 138.203 337.851 138.386 337.203 138.728 cv
336.639 139.006 335.914 139.376 335.041 139.849 cv
332.82 141.085 329.593 142.958 326.176 146.12 cv
324.479 147.704 322.752 149.634 321.273 152.014 cv
319.802 154.386 318.61 157.229 318.057 160.381 cv
317.49 163.528 317.576 166.932 318.214 170.295 cv
318.85 173.665 320.01 177 321.478 180.233 cv
323.179 183.937 325.147 187.32 327.172 190.461 cv
327.315 190.696 327.452 190.932 327.598 191.166 cv
328.392 192.432 329.251 193.673 330.158 194.893 cv
330.681 195.642 331.203 196.38 331.717 197.101 cv
333.476 199.54 335.186 201.816 336.783 203.941 cv
337.749 205.226 li
337.609 205.407 337.435 205.588 337.216 205.768 cv
335.122 207.482 334.768 204.875 333.277 204.036 cv
331.212 202.869 325.726 195.427 324.108 193.649 cv
323.197 196.726 324.738 201.149 325.621 204.115 cv
325.654 204.496 325.707 204.813 325.735 204.981 cv
325.837 205.629 326.102 206.068 326.435 206.429 cv
327.808 209.907 329.745 213.531 329.725 215.487 cv
329.669 220.678 325.232 225.874 322.035 229.676 cv
321.52 230.022 320.987 230.352 320.422 230.651 cv
317.49 233.115 307.344 238.02 301.17 240.744 cv
300.538 240.196 299.913 239.674 299.298 239.188 cv
300.506 236.947 302.109 233.798 303.199 230.665 cv
311.386 223.612 317.225 217.08 316.002 205.045 cv
313.915 213.438 309.929 216.588 303.15 220.872 cv
301.475 218.964 298.812 216.427 298.181 213.425 cv
297.571 210.343 296.391 207.167 295.437 203.804 cv
294.489 200.459 293.801 196.81 294.678 193.295 cv
294.784 192.857 294.913 192.422 295.064 191.994 cv
295.585 190.567 li
295.938 189.587 296.28 188.588 296.611 187.57 cv
297.27 185.536 297.881 183.429 298.377 181.23 cv
298.865 179.027 299.262 176.736 299.33 174.294 cv
299.357 173.074 299.297 171.809 299.036 170.5 cv
298.769 169.201 298.286 167.811 297.317 166.586 cv
296.465 165.482 295.222 164.703 293.998 164.272 cv
302.571 156.482 311.953 148.406 322.35 140.679 cv
324.997 138.724 327.713 136.798 330.511 134.949 cv
331.911 134.024 333.337 133.117 334.779 132.248 cv
336.192 131.39 337.676 130.619 339.189 129.92 cv
341.305 128.954 343.516 128.183 345.719 127.892 cv
345.859 128.039 345.991 128.189 346.129 128.337 cv
346.719 130.406 347.075 132.657 348.357 134.887 cv
348.551 134.762 348.761 134.653 348.979 134.552 cv
348.384 135.514 347.892 136.527 347.486 137.582 cv
347.709 138.559 348.086 139.515 348.547 140.427 cv
347.952 141.949 348.133 143.574 350.102 145.343 cv
352.189 147.22 355.323 146.2 358.36 144.763 cv
359.07 146.93 357.758 150.749 356.649 154.195 cv
355.507 155.509 354.817 157.217 354.253 159.007 cv
352.135 163.367 350.258 168.159 349.107 173.377 cv
348.539 175.939 348.154 178.506 347.946 181.046 cv
347.876 181.893 347.871 188.882 348.08 195.266 cv
347.914 196.026 347.797 196.852 347.763 197.771 cv
347.914 198.812 348.179 200.639 348.5 202.824 cv
cp
350.123 210.369 mo
349.498 208.293 348.98 206.554 348.949 206.337 cv
348.873 205.782 348.795 205.226 348.718 204.674 cv
348.777 204.699 li
348.979 206.063 349.476 208.068 350.123 210.369 cv
cp
310.597 252.621 mo
308.686 253.564 306.781 256.352 305.088 258.894 cv
304.513 258.999 304.044 258.915 303.668 258.677 cv
303.678 258.565 li
303.421 258.336 303.177 258.102 302.93 257.867 cv
302.141 256.516 301.994 254.16 301.78 252.297 cv
301.414 253.93 301.131 256.568 301.383 258.608 cv
301.173 261.73 301.153 264.728 301.197 267.556 cv
301.278 271.861 300.561 282.527 299.799 287.241 cv
299.546 288.811 298.582 291.076 297.495 293.3 cv
295.286 294.613 292.461 294.322 289.71 293.401 cv
287.572 292.245 285.333 291.19 283.295 289.804 cv
284.001 290.326 284.839 290.962 285.727 291.675 cv
285.445 291.528 285.167 291.38 284.898 291.232 cv
285.256 291.441 285.624 291.659 286.003 291.896 cv
288.937 294.276 292.368 297.484 293.719 300.486 cv
293.059 302.008 292.418 303.979 292.089 305.541 cv
285.625 299.272 276.885 294.653 267.804 293.736 cv
275.331 298.769 287.082 303.655 291.987 312.312 cv
292.331 316.586 293.453 322.009 291.807 326.282 cv
286.829 319.363 283.27 314.971 275.111 310.023 cv
266.489 304.794 244.553 298.849 229.546 298.263 cv
214.13 297.662 194.071 300.357 174.991 307.383 cv
170.293 309.114 156.004 315.9 148.432 323.118 cv
148.895 319.522 150.905 312.89 151.285 307.04 cv
152.998 305.27 155.256 303.921 157.154 302.439 cv
158.335 301.515 159.66 300.496 161.076 299.514 cv
158.678 301.659 156.803 304.267 155.965 307.084 cv
159.062 305.252 161.38 302.726 165.037 300.889 cv
166.428 300.19 167.796 299.447 169.17 298.753 cv
169.737 298.65 170.18 298.562 170.366 298.522 cv
175.034 297.484 197.622 290.235 210.803 289.269 cv
206.324 288.755 193.228 289.645 185.385 290.444 cv
184.638 290.275 183.85 290.149 182.921 290.201 cv
180.556 290.332 167.506 294.277 164.099 296.825 cv
161.573 296.965 158.769 298.652 156.331 298.245 cv
153.437 297.759 153.202 295.69 153.856 293.666 cv
154.668 292.474 155.654 291.359 156.764 290.387 cv
159.485 289.404 162.434 288.991 165.038 287.834 cv
165.464 287.644 165.872 287.437 166.27 287.223 cv
166.5 287.136 li
166.45 287.128 li
167.085 286.779 167.692 286.408 168.288 286.037 cv
171.866 286.098 177.563 283.242 180.846 283.169 cv
172.631 283.51 172.631 283.51 168.688 284.649 cv
166.277 284.893 163.871 285.15 161.615 285.771 cv
159.954 286.229 156.382 287.243 153.893 288.659 cv
153.182 288.667 152.458 288.869 151.707 289.478 cv
150.608 289.036 149.704 288.216 148.724 287.602 cv
146.077 280.516 li
145.302 276.561 144.226 271.716 144.436 274.072 cv
144.622 276.127 144.325 272.869 142.519 259.644 cv
142.441 259.078 140.216 255.333 140.216 255.333 cv
139.874 256.145 139.902 261.607 139.683 264.995 cv
138.216 262.888 136.126 261.003 133.045 259.566 cv
134.53 258.057 135.837 256.593 137.088 255.182 cv
137.095 255.196 li
137.095 255.196 137.824 254.488 138.954 253.421 cv
139.564 253.039 140.128 252.632 140.583 252.236 cv
140.836 252.012 li
140.621 251.861 li
143.887 248.833 148.553 244.683 150.696 243.601 cv
151.271 243.311 151.862 243.048 152.446 242.774 cv
160.403 239.037 169.127 236.689 177.313 233.17 cv
181.421 231.405 185.288 230.404 189.443 229.209 cv
196.186 228.014 198.389 227.834 203.36 227.853 cv
206.172 234.148 211.557 241.925 216.482 251.132 cv
221.598 264.155 230.618 288.995 232.243 292.883 cv
232.273 293.009 232.303 293.086 232.332 293.094 cv
232.523 293.532 232.546 293.193 232.465 292.398 cv
233.701 285.601 236.124 263.964 238.333 256.465 cv
239.085 253.913 239.906 251.264 240.782 248.546 cv
244.559 241.962 248.855 233.525 249.857 229.946 cv
251.249 224.974 269.493 229.622 274.477 231.515 cv
279.94 233.592 289.225 237.363 297.299 242.017 cv
297.497 242.225 297.627 242.313 297.663 242.225 cv
298.349 243.03 297.666 242.226 303.589 246.052 cv
307.336 248.761 308.735 249.981 310.597 252.621 cv
cp
288.947 334.091 mo
288.602 338.644 266.995 346.874 262.232 348.088 cv
243.195 352.942 226.994 354.526 210.192 353.282 cv
192.301 351.956 158.514 351.627 151.963 331.069 cv
152.094 329.97 152.602 328.805 153.332 327.66 cv
153.409 333.374 157.626 336.841 159.662 339.214 cv
163.09 343.21 168.366 344.189 173.449 345.568 cv
167.128 342.797 161.979 338.143 158.611 332.234 cv
155.914 327.503 157.904 323.491 161.31 320.641 cv
161.455 320.577 161.601 320.508 161.738 320.455 cv
167.421 318.263 195.036 306.645 210.104 305.744 cv
253.224 303.166 272.833 314.388 278.17 318.188 cv
282.094 320.982 289.565 325.913 288.947 334.091 cv
cp
141.936 269.586 mo
141.831 269.268 141.714 268.952 141.593 268.637 cv
141.74 268.786 141.86 269.073 141.936 269.586 cv
cp
154.107 301.266 mo
153.999 301.319 153.89 301.376 153.781 301.427 cv
153.71 301.327 li
153.841 301.308 153.968 301.292 154.107 301.266 cv
cp
146.432 282.378 mo
146.681 283.277 146.849 284.076 146.789 284.517 cv
146.733 284.076 146.604 283.309 146.432 282.378 cv
cp
156.229 236.993 mo
156.133 236.907 156.406 236.802 156.86 236.693 cv
156.652 236.794 156.433 236.889 156.229 236.993 cv
cp
82.7923 145.482 mo
83.8047 143.378 85.2921 141.573 87.3848 140.673 cv
89.8795 139.534 93.0378 139.631 96.5068 139.662 cv
98.2518 139.635 100.157 139.678 102.28 138.878 cv
103.326 138.474 104.396 137.741 105.14 136.771 cv
105.897 135.807 106.323 134.715 106.577 133.682 cv
106.62 133.508 106.646 133.332 106.68 133.156 cv
107.233 134.822 108.001 136.54 108.96 138.405 cv
109.601 138.637 110.033 138.804 110.679 139.066 cv
112.862 136.999 113.872 133.607 114.404 131.182 cv
114.128 135.84 113.777 144.33 117.232 146.889 cv
117.889 147.629 118.641 148.303 119.455 148.89 cv
120.867 149.912 122.425 150.743 124.007 151.555 cv
127.138 153.173 130.576 154.728 132.837 157.408 cv
133.121 157.748 133.356 158.074 133.619 158.469 cv
134.441 159.717 li
134.983 160.555 135.523 161.406 136.025 162.266 cv
136.52 163.114 137.015 164.015 137.292 164.788 cv
137.326 164.879 137.358 164.983 137.373 165.041 cv
137.382 165.092 li
137.371 165.136 li
137.34 165.164 li
137.321 165.17 li
137.3 165.179 137.352 165.151 137.203 165.224 cv
136.755 165.439 136.074 165.75 135.453 166.267 cv
134.825 166.777 134.301 167.483 133.985 168.192 cv
133.655 168.937 133.482 169.658 133.389 170.355 cv
130.951 169.022 128.476 167.692 125.955 166.369 cv
120.32 163.418 114.479 160.504 108.408 157.728 cv
105.372 156.339 102.276 154.99 99.1115 153.703 cv
97.5282 153.06 95.9254 152.436 94.3031 151.836 cv
92.678 151.22 90.9768 150.669 89.2807 150.187 cv
87.8708 149.794 86.4239 149.444 84.9468 149.165 cv
84.3661 148.48 83.6064 148.211 82.7161 148.278 cv
82.5999 147.677 82.4738 147.092 82.3349 146.524 cv
82.4437 146.249 82.5552 145.976 82.6786 145.708 cv
82.9973 145.887 li
82.9222 145.749 82.855 145.614 82.7923 145.482 cv
cp
108.034 172.251 mo
106.735 170.755 105.408 169.467 104.095 168.329 cv
105.411 169.282 106.741 170.355 108.016 171.595 cv
109.104 172.653 110.132 173.85 111.057 175.158 cv
111.684 176.044 112.271 176.974 112.766 177.978 cv
113.61 179.682 114.199 181.558 114.514 183.542 cv
114.344 183.027 114.164 182.522 113.97 182.027 cv
113.081 179.74 111.967 177.678 110.74 175.827 cv
109.882 174.532 108.97 173.336 108.034 172.251 cv
cp
130.826 246.921 mo
128.432 244.612 127.243 241.112 125.831 237.916 cv
126.58 235.597 127.22 233.359 127.534 231.309 cv
127.476 230.565 127.979 228.259 128.411 225.223 cv
129.111 220.297 129.623 213.438 127.246 208.127 cv
127.109 207.747 126.964 207.367 126.799 206.991 cv
125.353 203.702 121.803 199.025 117.466 194.821 cv
118.122 191.955 118.458 189.034 118.291 186.163 cv
118.104 182.674 117.105 179.313 115.507 176.522 cv
114.808 175.289 114.009 174.172 113.155 173.152 cv
112.067 171.85 110.889 170.708 109.694 169.721 cv
107.555 167.955 105.367 166.625 103.322 165.557 cv
99.2158 163.438 95.6865 162.307 93.2546 161.572 cv
92.1873 161.256 91.3376 161.027 90.7044 160.864 cv
90.1452 160.709 89.7539 160.623 89.5739 160.583 cv
89.512 160.569 li
89.4459 160.551 li
89.4416 160.559 90.7507 161.072 93.0547 162.11 cv
93.346 162.244 93.655 162.386 93.9789 162.536 cv
94.2454 162.679 94.5093 162.818 94.7961 162.98 cv
98.047 164.846 102.587 168.091 106.602 173.405 cv
107.825 175.035 108.983 176.866 109.971 178.881 cv
110.59 180.141 111.143 181.472 111.601 182.876 cv
112.423 185.366 112.917 188.083 113.003 190.909 cv
107.516 186.605 101.543 183.763 97.151 185.316 cv
95.2384 184.787 94.3669 184.377 92.0548 184.818 cv
91.6683 184.334 91.4088 183.836 91.243 183.321 cv
93.136 181.899 93.0543 181.794 95.021 180.455 cv
94.8737 180.357 94.9938 180.298 95.1885 180.213 cv
95.115 180.013 95.0493 179.819 95.0002 179.64 cv
94.5261 177.912 93.8311 176.391 92.6322 175.288 cv
91.7435 174.967 90.7646 174.79 89.7921 174.714 cv
89.8913 174.671 89.9933 174.62 90.0923 174.577 cv
89.6213 174.298 89.2024 173.948 88.8059 173.569 cv
84.6544 169.601 84.3639 160.499 83.3644 152.502 cv
85.0263 152.753 86.69 153.13 88.3323 153.578 cv
89.9586 154.029 91.5301 154.524 93.1081 155.106 cv
94.6967 155.679 96.2721 156.277 97.8316 156.895 cv
100.953 158.131 104.02 159.432 107.035 160.773 cv
113.067 163.454 118.896 166.273 124.534 169.129 cv
127.545 170.658 130.498 172.195 133.4 173.737 cv
133.591 175.67 134.006 177.505 134.484 179.325 cv
135.454 182.884 136.67 186.232 137.952 189.448 cv
138.309 190.345 138.671 191.234 139.035 192.112 cv
139.876 194.118 140.738 196.071 141.606 197.97 cv
142.892 200.756 li
143.284 201.62 143.618 202.5 143.903 203.391 cv
143.915 203.435 li
144.17 204.241 144.381 205.053 144.562 205.867 cv
144.604 206.059 144.645 206.25 144.684 206.442 cv
145.214 209.034 145.449 211.641 145.661 214.151 cv
145.95 217.656 146.242 221.019 147.001 224.025 cv
147.729 227.036 148.944 229.635 150.342 231.647 cv
150.482 231.834 li
150.914 232.433 151.425 233.037 151.968 233.624 cv
153.2 234.955 154.571 236.172 155.447 236.901 cv
155.701 237.108 155.555 236.998 155.439 236.907 cv
153.156 238.078 151.106 239.391 149.184 240.801 cv
142.837 240.865 135.864 236.453 131.645 232.37 cv
133.86 236.863 138.371 243.288 143.186 245.79 cv
143.086 245.884 142.984 245.974 142.883 246.066 cv
141.837 247.798 140.618 249.485 139.286 251.074 cv
136.635 249.77 133.14 249.152 130.826 246.921 cv
cp
109.631 224.865 mo
108.011 225.421 106 225.855 103.955 225.696 cv
103.842 225.686 103.68 225.666 103.612 225.652 cv
103.409 225.603 li
103.279 225.566 103.154 225.52 103.044 225.452 cv
102.807 225.345 102.682 225.022 102.858 224.79 cv
103.085 224.458 li
103.103 224.437 103.2 224.272 103.28 224.139 cv
103.525 223.728 li
104.531 222.051 li
105.547 220.358 106.619 218.577 107.717 216.702 cv
109.224 218.042 110.67 220.065 111.796 221.293 cv
112.293 221.834 112.745 222.394 113.166 222.965 cv
112.273 223.679 111.09 224.354 109.631 224.865 cv
cp
399.176 101.895 mo
397.41 98.7605 394.803 96.1715 391.921 94.0966 cv
389.126 92.1412 386.45 90.1335 383.773 87.9717 cv
378.446 83.6595 373.338 78.8463 368.299 73.7458 cv
363.255 68.6515 358.258 63.276 352.95 57.9924 cv
347.652 52.7075 342.02 47.5059 335.74 42.9002 cv
332.595 40.6024 329.314 38.4875 325.837 36.7119 cv
322.362 34.9462 318.672 33.513 314.781 32.7888 cv
310.906 32.0549 306.815 32.1122 303 33.1461 cv
299.177 34.1565 295.715 36.0629 292.718 38.3465 cv
289.709 40.6477 287.115 43.2698 284.766 46.0699 cv
282.488 48.8321 280.31 51.5934 278.207 54.3835 cv
274 59.9586 270.126 65.6008 266.605 71.2648 cv
259.551 82.5911 253.91 94.0103 249.654 105.082 cv
247.521 110.617 245.734 116.064 244.254 121.365 cv
242.743 126.652 241.68 131.853 240.624 136.723 cv
240.282 138.278 240.605 136.867 240.259 138.371 cv
239.503 140.583 li
237.449 148.747 236.045 153.544 234.752 160.275 cv
233.833 163.485 232.905 166.495 231.968 169.31 cv
230.484 172.816 228.63 176.854 227.717 180.56 cv
227.501 181.05 227.286 181.542 227.07 182.009 cv
226.693 182.83 226.315 183.6 225.937 184.346 cv
225.623 184.558 225.311 184.737 225.001 184.843 cv
221.506 180.182 218.592 174.025 215.063 168.989 cv
212.842 164.907 210.599 160.572 208.138 155.869 cv
205.455 150.762 202.55 145.305 199.076 139.737 cv
195.607 134.172 191.533 128.516 186.67 123.103 cv
184.25 120.376 181.59 117.78 178.931 115.141 cv
176.257 112.497 173.512 109.817 170.685 107.114 cv
165.038 101.706 159.055 96.2128 152.732 90.7416 cv
146.403 85.2633 139.853 79.8111 133.718 73.6057 cv
132.175 72.0633 130.646 70.4843 129.125 68.878 cv
124.443 64.0349 li
121.284 60.8111 118.086 57.4582 114.154 54.6108 cv
112.185 53.2065 109.99 51.9426 107.51 51.1806 cv
105.041 50.4056 102.3 50.2437 99.7314 50.7389 cv
97.1553 51.2227 94.7782 52.2638 92.6165 53.5265 cv
90.4514 54.7989 88.4749 56.2983 86.613 57.9024 cv
83.6429 60.4696 80.9907 63.2737 78.4885 66.1441 cv
75.9963 69.0141 73.6418 71.984 71.4488 75.018 cv
67.0614 81.0833 63.1767 87.3269 59.6037 93.5898 cv
56.0388 99.8596 57.3198 106.431 54.4248 112.741 cv
52.9788 115.898 44.9419 118.503 43.698 121.673 cv
43.316 123.515 li
44.2598 130.465 42.537 133.667 42.085 138.36 cv
40.7399 152.312 45.192 158.936 41.3581 166.861 cv
42.1519 172.666 46.3071 170.835 48.5924 173.159 cv
48.6519 173.305 48.7088 173.438 48.7683 173.586 cv
49.2921 174.888 49.6968 176.271 50.0368 177.701 cv
49.8364 178.02 49.6399 178.34 49.4634 178.662 cv
44.4124 187.852 47.2398 200.936 44.5191 210.89 cv
42.8227 217.097 39.8185 222.584 38.6113 228.946 cv
37.7127 233.682 37.658 239.458 35.49 243.491 cv
37.0156 249.384 40.6719 251.211 46.0545 253.092 cv
48.9197 254.093 55.2691 254.168 57.1558 255.419 cv
62.1201 258.711 59.4089 265.38 62.389 269.622 cv
65.3926 273.898 71.9011 274.192 76.4768 275.155 cv
82.1613 276.351 87.3761 278.059 92.4489 281.291 cv
99.3561 285.689 102.84 290.829 105.136 297.107 cv
109.142 314.849 99.2612 325.823 90.8273 332.038 cv
85.1983 336.185 80.2125 338.215 80.4315 338.711 cv
80.5812 338.654 80.7226 338.595 80.8717 338.536 cv
80.8478 338.52 li
85.4149 336.417 93.5058 331.505 99.9079 325.172 cv
100.798 324.291 101.656 323.385 102.467 322.454 cv
102.553 322.354 102.64 322.255 102.726 322.155 cv
102.978 321.861 103.224 321.563 103.466 321.263 cv
103.662 321.021 103.851 320.776 104.039 320.531 cv
107.259 316.35 109.424 311.77 109.371 307.091 cv
109.413 306.922 109.288 299.073 109.288 299.073 cv
107.885 290.185 107.69 288.143 99.0818 281.801 cv
90.3136 275.343 77.9023 274.822 69.1179 269.447 cv
63.3835 265.937 66.3001 261.733 63.4374 256.655 cv
60.4484 251.357 55.018 250.891 49.3227 249.539 cv
36.1766 246.418 40.161 238.67 43.5199 227.829 cv
46.8078 217.218 49.0856 209.048 50.0547 198.018 cv
50.4087 193.992 49.9912 188.076 51.2437 184.029 cv
52.3963 190.781 53.6848 197.524 59.7947 201.191 cv
61.9017 202.456 64.3085 203.35 66.8542 204.037 cv
67.937 204.72 69.152 205.35 70.4395 205.926 cv
76.7506 208.747 84.9856 210.143 89.9925 208.74 cv
93.3092 210.619 95.216 213.911 99.6497 215.051 cv
101.346 215.487 102.558 215.105 103.896 215.119 cv
102.752 216.608 101.529 218.069 100.24 219.498 cv
98.9537 220.889 li
98.8002 221.051 98.758 221.096 98.7488 221.106 cv
98.7471 221.107 li
98.1554 221.271 li
96.8597 221.644 95.5901 222.079 94.3634 222.589 cv
91.9044 223.601 89.5999 224.876 87.4951 226.345 cv
83.2822 229.286 79.8792 232.983 77.3705 236.941 cv
76.3335 238.586 75.4508 240.281 74.726 242.001 cv
75.1295 242.342 75.5061 242.703 75.8951 243.055 cv
75.8548 243.718 75.7701 244.376 75.5431 245.01 cv
78.1736 246.11 81.3295 243.775 84.2052 242.678 cv
86.0912 247.729 75.509 248.641 81.5838 253.421 cv
85.0991 256.188 92.8402 253.385 97.2046 254.855 cv
106.167 257.872 112.482 265.857 115.759 274.394 cv
118.152 280.629 137.866 316.324 80.8717 338.536 cv
80.9291 338.574 li
146.54 317.599 120.54 274.296 113.408 264.326 cv
110.669 260.498 106.786 257.491 103.098 254.877 cv
97.8306 251.146 95.6276 252.293 90.0951 251.088 cv
79.4841 248.775 90.041 246.787 90.8568 241.702 cv
91.8947 235.239 83.1542 239.382 79.1789 239.848 cv
79.4304 239.446 79.6899 239.045 79.9619 238.65 cv
82.4003 235.11 85.614 231.835 89.4822 229.253 cv
91.4157 227.962 93.5088 226.848 95.7315 225.96 cv
96.8416 225.512 97.9866 225.131 99.1537 224.802 cv
100.42 224.467 li
100.61 224.417 li
100.469 224.867 li
100.347 225.29 98.6815 227.423 102.207 228.645 cv
102.412 228.716 106.766 228.893 106.936 228.892 cv
109.282 228.825 111.163 228.282 115.353 226.681 cv
119.466 235.523 114.854 247.647 120.189 256.799 cv
120.281 256.744 120.552 256.46 120.814 256.185 cv
121.36 255.651 li
121.3 252.289 122.335 248.475 123.585 244.632 cv
123.83 243.882 124.079 243.132 124.332 242.383 cv
126.083 247.964 133.035 248.567 135.465 254.178 cv
135.555 254.384 135.652 254.58 135.728 254.801 cv
134.644 255.801 133.523 256.729 132.378 257.546 cv
132.535 257.522 132.687 257.488 132.833 257.448 cv
131.757 258.346 130.164 259.825 127.918 262.168 cv
137.851 266.333 140.847 274.104 143.37 279.916 cv
143.666 281.924 143.992 283.844 144.367 285.671 cv
143.97 287.519 143.655 289.312 143.939 291.012 cv
144.402 293.794 145.731 294.915 147.337 295.607 cv
147.428 295.825 147.515 296.062 147.609 296.274 cv
148.094 297.382 148.598 298.38 149.104 299.314 cv
149.253 308.93 138.061 315.898 148.058 333.424 cv
148.06 333.415 li
149.726 336.896 152.257 340.222 153.738 341.49 cv
159.425 346.348 167.46 349.089 174.281 351.515 cv
201.475 361.192 242.755 357.861 257.198 353.999 cv
264.624 352.015 272.507 349.865 279.73 347.167 cv
285.22 345.115 292.236 341.498 293.964 336.263 cv
294.323 335.174 295.481 328.493 295.212 332.1 cv
296.155 324.073 294.685 316.438 294.537 310.081 cv
297.46 300.488 li
298.425 298.835 299.324 297.211 299.857 296.028 cv
300.662 294.218 301.413 291.879 301.929 289.074 cv
302.455 286.27 302.745 283.015 302.878 279.406 cv
303.012 275.984 303.01 272.232 303.105 268.223 cv
303.238 268.168 li
304.726 261.826 311.474 254.825 317.166 252.312 cv
313.834 252.095 309.669 248.453 305.511 244.656 cv
308.841 242.093 314.561 237.343 316.393 236.39 cv
317.893 235.607 319.307 234.93 320.847 234.168 cv
322.409 233.369 323.865 232.392 325.127 231.26 cv
327.685 229.002 329.369 226.175 330.431 223.488 cv
331.505 220.784 332.072 218.193 332.509 215.848 cv
332.806 214.129 li
332.936 213.303 li
332.97 213.136 332.949 213.126 332.994 213.008 cv
333.025 212.924 333.095 212.692 333.12 212.532 cv
333.268 211.809 333.042 211.052 332.705 210.554 cv
332.373 210.037 331.975 209.671 331.595 209.348 cv
331.016 208.891 330.468 208.519 329.946 208.17 cv
329.718 207.93 329.473 207.702 329.194 207.497 cv
329.402 207.398 329.652 207.35 329.931 207.334 cv
330.745 207.981 331.75 208.601 332.968 209.092 cv
333.84 209.442 334.81 209.731 335.877 209.91 cv
336.411 209.995 336.969 210.057 337.554 210.068 cv
337.849 210.072 338.148 210.066 338.457 210.04 cv
338.617 210.025 338.76 210.011 338.938 209.982 cv
339.144 209.947 339.351 209.907 339.552 209.847 cv
340.359 209.622 341.158 209.174 341.492 208.371 cv
341.655 207.973 341.672 207.525 341.565 207.105 cv
341.533 206.889 341.384 206.697 341.293 206.49 cv
341.226 206.357 li
341.974 206.48 li
342.845 206.645 li
343.424 206.765 343.996 206.903 344.563 207.059 cv
346.208 207.508 347.786 208.119 349.305 208.832 cv
352.588 218.883 352.794 219.314 352.05 216.778 cv
354.004 222.994 356.134 229.233 356.429 230.641 cv
357.285 234.744 356.429 230.641 357.797 234.216 cv
357.769 229.072 356.549 223.116 357.508 217.295 cv
357.95 214.606 358.457 211.77 359.04 208.83 cv
359.566 208.959 360.091 209.09 360.618 209.217 cv
367.759 210.95 374.726 216.593 382.061 217.437 cv
380.036 221.644 384.245 224.11 386.284 227.108 cv
384.262 227.003 380.985 226.862 378.156 227.424 cv
374.777 228.094 372.035 229.762 372.827 233.692 cv
372.873 233.844 li
374.03 238.686 382.894 240.119 386.695 240.728 cv
379.028 247.416 378.321 256.083 380.638 265.758 cv
382.525 273.628 385.812 284.023 400.518 294.234 cv
400.979 294.599 401.446 294.917 401.917 295.181 cv
392.72 283.771 390.782 271.185 395.514 261.594 cv
395.758 261.226 396.01 260.859 396.268 260.494 cv
401.153 255.229 li
400.38 255.736 402.835 252.844 402.14 253.405 cv
405.64 249.602 409.217 246.113 411.535 243.065 cv
420.008 231.917 426.198 213.404 416.543 201.812 cv
416.543 201.676 416.528 201.723 416.52 201.787 cv
415.787 201.039 415.049 200.301 414.331 199.532 cv
409.465 194.333 404.951 188.644 400.632 182.64 cv
396.305 176.644 392.141 170.341 387.656 164.091 cv
385.802 161.497 383.904 158.987 382.032 156.485 cv
382.695 155.453 383.367 154.414 384.052 153.369 cv
387.075 148.834 390.23 144.022 393.121 138.833 cv
395.993 133.635 398.753 128.065 400.513 121.832 cv
401.371 118.719 401.956 115.418 401.877 111.986 cv
401.809 108.571 400.969 105.01 399.176 101.895 cv
cp
0 0 0 rgb
f
253.178 294.674 mo
256.354 296.37 260.526 297.256 264.009 298.66 cv
266.924 299.835 277.329 302.067 282.106 304.887 cv
275.32 298.981 269.471 298.469 266.078 297.069 cv
262.206 295.473 257.148 294.325 253.178 294.674 cv
cp
f
127.502 231.958 mo
127.514 231.742 127.523 231.526 127.534 231.309 cv
127.478 231.925 li
127.502 231.958 li
cp
f
126.282 254.332 mo
126.318 254.347 li
126.26 254.102 li
126.282 254.332 li
cp
f
284.898 291.232 mo
284.561 291.036 284.232 290.849 283.922 290.68 cv
284.236 290.862 284.562 291.047 284.898 291.232 cv
cp
f
393.047 286.181 mo
402.834 277.447 417.846 278.299 426.582 288.084 cv
435.317 297.871 434.465 312.883 424.678 321.619 cv
414.892 330.353 399.88 329.501 391.145 319.716 cv
382.41 309.928 383.262 294.917 393.047 286.181 cv
cp
.984314 .560784 .0588235 rgb
f
394.372 285.769 mo
394.045 286.031 393.723 286.303 393.407 286.585 cv
383.861 295.107 383.027 309.808 391.549 319.357 cv
400.043 328.872 414.713 329.781 424.319 321.215 cv
428.944 317.086 431.686 311.405 432.037 305.215 cv
432.388 299.025 430.307 293.068 426.178 288.444 cv
417.962 279.241 403.991 278.065 394.372 285.769 cv
cp
424.031 322.873 mo
413.962 330.937 399.34 329.708 390.742 320.076 cv
381.823 310.083 382.698 294.697 392.688 285.778 cv
402.718 276.789 418.094 277.766 426.985 287.724 cv
431.305 292.565 433.482 298.798 433.114 305.275 cv
432.748 311.753 429.878 317.701 425.039 322.021 cv
424.709 322.315 424.373 322.599 424.031 322.873 cv
cp
0 0 0 rgb
f
393.047 286.181 mo
390.737 288.262 388.837 290.794 387.504 293.599 cv
386.172 296.405 385.441 299.479 385.302 302.563 cv
385.039 308.753 387.373 314.921 391.553 319.359 cv
395.678 323.831 401.595 326.479 407.57 326.682 cv
413.548 326.945 419.553 324.807 423.96 320.812 cv
428.428 316.886 431.236 311.163 431.649 305.192 cv
432.127 299.227 430.166 293.055 426.18 288.442 cv
422.25 283.796 416.379 280.771 410.199 280.337 cv
407.119 280.127 403.982 280.506 401.045 281.513 cv
398.108 282.519 395.375 284.121 393.047 286.181 cv
cp
393.047 286.181 mo
397.66 281.995 403.962 279.756 410.217 280.038 cv
416.476 280.255 422.666 283.034 426.983 287.726 cv
431.342 292.363 433.785 298.83 433.501 305.298 cv
433.355 308.523 432.586 311.736 431.195 314.67 cv
429.8 317.602 427.812 320.251 425.397 322.423 cv
422.969 324.58 420.108 326.253 417.038 327.308 cv
413.966 328.364 410.687 328.762 407.464 328.542 cv
401.003 328.096 394.858 324.94 390.735 320.072 cv
386.572 315.26 384.503 308.787 385 302.545 cv
385.427 296.298 388.368 290.292 393.047 286.181 cv
cp
f
393.407 286.585 mo
391.151 288.615 389.281 291.119 387.993 293.831 cv
386.723 296.504 385.979 299.532 385.843 302.588 cv
385.585 308.618 387.81 314.597 391.947 318.989 cv
395.956 323.334 401.655 325.942 407.588 326.142 cv
412.962 326.379 418.434 324.597 422.608 321.255 cv
422.609 321.255 li
422.945 320.984 423.276 320.703 423.598 320.411 cv
427.969 316.572 430.705 311.013 431.11 305.156 cv
431.584 299.233 429.639 293.271 425.771 288.796 cv
421.87 284.184 416.182 281.298 410.162 280.876 cv
407.109 280.667 404.016 281.064 401.219 282.023 cv
398.354 283.004 395.708 284.549 393.407 286.585 cv
cp
391.068 319.631 mo
391.145 319.717 li
395.235 324.55 401.197 327.567 407.502 328.002 cv
410.699 328.221 413.937 327.804 416.863 326.797 cv
419.868 325.764 422.641 324.143 425.039 322.02 cv
427.396 319.898 429.357 317.276 430.707 314.437 cv
432.038 311.629 432.817 308.461 432.961 305.274 cv
433.237 298.993 430.942 292.768 426.661 288.174 cv
430.667 292.854 432.682 299.067 432.188 305.236 cv
431.763 311.369 428.894 317.196 424.316 321.218 cv
423.985 321.519 423.637 321.814 423.283 322.098 cv
423.282 322.098 li
418.907 325.601 413.173 327.469 407.547 327.221 cv
401.332 327.012 395.357 324.278 391.156 319.726 cv
391.068 319.631 li
cp
424.783 323.648 mo
422.504 325.473 419.957 326.877 417.214 327.82 cv
414.152 328.872 410.769 329.308 407.429 329.082 cv
400.833 328.625 394.598 325.47 390.323 320.421 cv
386.082 315.52 383.944 308.989 384.462 302.503 cv
384.902 296.082 387.899 289.986 392.687 285.778 cv
397.389 281.514 403.876 279.213 410.243 279.498 cv
416.742 279.724 422.99 282.589 427.381 287.36 cv
431.903 292.168 434.33 298.717 434.041 305.321 cv
433.891 308.652 433.076 311.963 431.684 314.901 cv
430.273 317.867 428.224 320.606 425.759 322.826 cv
425.439 323.109 425.115 323.384 424.783 323.648 cv
cp
f
424.301 289.727 mo
431.579 298.817 430.112 312.087 421.02 319.369 cv
411.93 326.648 398.658 325.181 391.378 316.091 cv
384.097 306.998 385.567 293.726 394.657 286.447 cv
403.748 279.167 417.019 280.635 424.301 289.727 cv
cp
.988235 .74902 .372549 rgb
f
421.197 290.398 mo
427.558 298.341 426.276 309.937 418.333 316.299 cv
410.389 322.659 398.794 321.376 392.433 313.433 cv
386.072 305.488 387.354 293.894 395.297 287.532 cv
403.242 281.171 414.835 282.453 421.197 290.398 cv
cp
.988235 .807843 .509804 rgb
f
418.097 291.07 mo
423.538 297.865 422.44 307.786 415.645 313.228 cv
408.848 318.67 398.928 317.572 393.487 310.777 cv
388.045 303.981 389.141 294.061 395.937 288.619 cv
402.733 283.176 412.654 284.272 418.097 291.07 cv
cp
.992157 .870588 .65098 rgb
f
414.994 291.741 mo
419.516 297.388 418.603 305.635 412.956 310.158 cv
407.308 314.68 399.062 313.767 394.54 308.12 cv
390.016 302.471 390.929 294.227 396.577 289.704 cv
402.224 285.181 410.471 286.092 414.994 291.741 cv
cp
.992157 .929412 .788235 rgb
f
411.893 292.413 mo
415.496 296.914 414.769 303.483 410.268 307.087 cv
405.768 310.691 399.198 309.965 395.594 305.464 cv
391.99 300.963 392.716 294.393 397.217 290.789 cv
401.718 287.185 408.288 287.911 411.893 292.413 cv
cp
.996078 .988235 .929412 rgb
f
419.279 287.411 mo
422.245 289.612 422.589 292.839 420.969 293.352 cv
422.439 292.624 426.098 294.745 426.993 297.662 cv
426.197 294.942 425.801 291.746 427.344 291.224 cv
425.672 291.564 422.07 289.416 419.279 287.411 cv
cp
0 0 0 rgb
f
410.827 288.835 mo
413.966 292.057 414.985 296.372 413.382 297.212 cv
414.883 296.215 419.221 298.865 421.427 302.564 cv
419.315 299.016 418.26 294.715 419.876 293.937 cv
418.161 294.569 413.856 291.904 410.827 288.835 cv
cp
f
400.825 294.356 mo
401.094 294.691 401.334 295.045 401.565 295.409 cv
401.258 295.104 400.964 294.793 400.695 294.46 cv
403.634 298.137 404.234 303.778 402.125 305.92 cv
404.257 303.766 409.647 305.586 412.589 309.27 cv
412.32 308.937 412.079 308.581 411.846 308.219 cv
412.153 308.522 412.445 308.835 412.713 309.169 cv
409.749 305.497 409.139 299.844 411.71 298.235 cv
409.162 299.835 403.782 298.024 400.825 294.356 cv
cp
f
389.823 310.885 mo
391.206 314.075 392.572 318.094 391.878 319.652 cv
392.727 318.264 395.812 319.381 398.327 320.774 cv
395.635 319.236 394.308 315.167 395.344 313.893 cv
394.493 315.367 391.364 314.291 389.823 310.885 cv
cp
f
393.07 302.961 mo
395.436 306.606 397.139 311.417 396.153 312.958 cv
397.267 311.549 401.273 313.542 404.307 316.4 cv
401.139 313.415 399.459 308.572 400.763 307.33 cv
399.596 308.715 395.569 306.753 393.07 302.961 cv
cp
f
98.7497 327.263 mo
105.747 338.358 102.426 353.024 91.333 360.023 cv
80.2376 367.02 65.5718 363.699 58.5727 352.604 cv
51.5764 341.511 54.8957 326.845 65.9894 319.846 cv
77.085 312.848 91.7505 316.169 98.7497 327.263 cv
cp
.984314 .560784 .0588235 rgb
f
98.937 328.637 mo
98.7328 328.272 98.5176 327.909 98.2925 327.551 cv
91.4646 316.729 77.1026 313.477 66.2773 320.304 cv
55.4899 327.109 52.1702 341.428 59.031 352.318 cv
62.3387 357.56 67.4894 361.204 73.536 362.572 cv
79.5826 363.941 85.8014 362.873 91.0448 359.566 cv
101.478 352.983 104.946 339.397 98.937 328.637 cv
cp
57.443 351.759 mo
51.1532 340.497 54.7814 326.278 65.7016 319.39 cv
77.0314 312.245 92.0605 315.648 99.2059 326.976 cv
106.415 338.353 102.91 353.356 91.6206 360.48 cv
86.1323 363.941 79.6256 365.058 73.2979 363.624 cv
66.9697 362.193 61.5783 358.381 58.1173 352.894 cv
57.8806 352.52 57.656 352.142 57.443 351.759 cv
cp
0 0 0 rgb
f
98.7497 327.263 mo
97.0799 324.642 94.896 322.348 92.3501 320.57 cv
89.8018 318.793 86.8909 317.566 83.8723 316.918 cv
77.8103 315.635 71.3435 316.919 66.2742 320.309 cv
61.1822 323.638 57.5937 329.036 56.4066 334.895 cv
55.159 340.747 56.2752 347.023 59.4868 352.03 cv
62.6203 357.085 67.8024 360.8 73.6225 362.194 cv
79.4262 363.65 85.8374 362.736 91.0457 359.567 cv
96.2769 356.459 100.23 351.168 101.679 345.146 cv
102.396 342.142 102.541 338.985 102.033 335.922 cv
101.525 332.86 100.398 329.901 98.7497 327.263 cv
cp
98.7497 327.263 mo
102.116 332.504 103.283 339.089 101.971 345.212 cv
100.724 351.349 96.9597 356.994 91.6198 360.478 cv
86.326 364.011 79.544 365.352 73.2117 364.003 cv
70.0551 363.326 67.0142 362.036 64.3498 360.18 cv
61.6889 358.321 59.4046 355.921 57.661 353.182 cv
55.9348 350.429 54.7573 347.332 54.2236 344.131 cv
53.6905 340.926 53.8399 337.625 54.5889 334.483 cv
56.0962 328.184 60.2243 322.646 65.7064 319.384 cv
71.1405 316.073 77.8665 315.102 83.9396 316.623 cv
90.0311 318.077 95.4694 321.969 98.7497 327.263 cv
cp
f
98.2925 327.551 mo
96.6621 324.991 94.5009 322.732 92.0392 321.014 cv
89.6127 319.32 86.7492 318.086 83.7593 317.446 cv
77.8533 316.196 71.5895 317.402 66.5742 320.758 cv
61.627 323.994 58.1135 329.184 56.9362 335.002 cv
55.815 340.264 56.6673 345.954 59.2743 350.622 cv
59.274 350.623 li
59.4849 351 59.7078 351.373 59.9429 351.739 cv
63.007 356.683 68.0376 360.3 73.7475 361.669 cv
79.5108 363.115 85.7113 362.18 90.7644 359.106 cv
95.9578 356.02 99.7435 350.887 101.154 345.02 cv
101.864 342.043 101.985 338.928 101.5 336.01 cv
101.006 333.022 99.9199 330.157 98.2925 327.551 cv
cp
66.0872 319.786 mo
65.9887 319.845 li
60.5475 323.082 56.586 328.463 55.1147 334.61 cv
54.3713 337.727 54.247 340.99 54.7571 344.041 cv
55.2802 347.177 56.4197 350.178 58.1181 352.895 cv
59.8213 355.57 62.0839 357.937 64.6609 359.737 cv
67.2092 361.514 70.2049 362.805 73.3246 363.473 cv
79.4742 364.784 85.9931 363.549 91.2309 360.086 cv
85.9529 363.264 79.4925 364.225 73.4902 362.719 cv
67.5119 361.286 62.2388 357.492 59.0287 352.313 cv
58.7862 351.937 58.5532 351.546 58.3316 351.149 cv
58.3318 351.148 li
55.5988 346.256 54.7049 340.291 55.8783 334.783 cv
57.1122 328.688 60.7947 323.248 65.9782 319.857 cv
66.0872 319.786 li
cp
56.5537 352.372 mo
55.1306 349.825 54.1671 347.08 53.6911 344.22 cv
53.159 341.024 53.2877 337.616 54.0636 334.36 cv
55.6031 327.93 59.7446 322.302 65.4301 318.918 cv
70.965 315.547 77.7587 314.516 84.0705 316.099 cv
90.3305 317.593 95.8477 321.557 99.2061 326.975 cv
102.635 332.317 103.834 339.095 102.5 345.326 cv
101.204 351.698 97.3453 357.389 91.9136 360.93 cv
86.4265 364.595 79.5659 365.907 73.0993 364.53 cv
69.8394 363.833 66.708 362.482 64.0417 360.623 cv
61.3487 358.742 58.9863 356.269 57.2035 353.471 cv
56.9776 353.11 56.7607 352.744 56.5537 352.372 cv
cp
f
90.0893 357.5 mo
79.9208 363.179 67.0764 359.54 61.3963 349.368 cv
55.7197 339.201 59.3583 326.352 69.5274 320.676 cv
79.6967 314.997 92.5441 318.639 98.221 328.807 cv
103.9 338.977 100.258 351.822 90.0893 357.5 cv
cp
.988235 .74902 .372549 rgb
f
89.9395 354.331 mo
81.055 359.291 69.831 356.111 64.8688 347.225 cv
59.9081 338.339 63.0891 327.116 71.9741 322.156 cv
80.8602 317.193 92.0834 320.375 97.0448 329.259 cv
102.007 338.146 98.8261 349.368 89.9395 354.331 cv
cp
.988235 .807843 .509804 rgb
f
89.7896 351.161 mo
82.1891 355.404 72.5861 352.683 68.3413 345.082 cv
64.0965 337.478 66.8186 327.877 74.4185 323.634 cv
82.0209 319.389 91.6238 322.109 95.8686 329.711 cv
100.112 337.312 97.3922 346.915 89.7896 351.161 cv
cp
.992157 .870588 .65098 rgb
f
89.6403 347.99 mo
83.3235 351.517 75.3421 349.255 71.8133 342.937 cv
68.2864 336.619 70.5489 328.639 76.8648 325.111 cv
83.1844 321.583 91.1639 323.846 94.6919 330.163 cv
98.2202 336.48 95.9593 344.462 89.6403 347.99 cv
cp
.992157 .929412 .788235 rgb
f
89.4902 344.819 mo
84.456 347.631 78.0968 345.829 75.2858 340.794 cv
72.4744 335.76 74.2769 329.4 79.3106 326.588 cv
84.345 323.778 90.7051 325.581 93.5162 330.614 cv
96.3274 335.65 94.5261 342.008 89.4902 344.819 cv
cp
.996078 .988235 .929412 rgb
f
93.2023 352.931 mo
90.5428 355.493 87.3024 355.3 87.0636 353.617 cv
87.5394 355.186 84.8435 358.445 81.819 358.846 cv
84.6327 358.509 87.8493 358.648 88.1104 360.256 cv
88.0506 358.55 90.7646 355.352 93.2023 352.931 cv
cp
0 0 0 rgb
f
93.1952 344.36 mo
89.4975 346.924 85.0742 347.215 84.5105 345.496 cv
85.246 347.14 81.915 350.981 77.9032 352.547 cv
81.752 351.048 86.1669 350.718 86.6679 352.443 cv
86.3285 350.646 89.6663 346.841 93.1952 344.36 cv
cp
f
89.4014 333.584 mo
89.0273 333.792 88.6386 333.972 88.2414 334.138 cv
88.5919 333.886 88.9483 333.648 89.3216 333.438 cv
85.2084 335.728 79.5458 335.389 77.782 332.955 cv
79.5535 335.413 76.8681 340.428 72.7495 342.722 cv
73.1215 342.512 73.5124 342.333 73.9083 342.162 cv
73.5591 342.416 73.2019 342.652 72.8288 342.861 cv
76.9392 340.544 82.6156 340.878 83.7783 343.677 cv
82.6207 340.901 85.2958 335.894 89.4014 333.584 cv
cp
f
74.9175 320.002 mo
71.5428 320.838 67.3549 321.521 65.9314 320.58 cv
67.1606 321.646 65.5492 324.505 63.7596 326.755 cv
65.7217 324.353 69.9529 323.718 71.0388 324.95 cv
69.725 323.868 71.3041 320.959 74.9175 320.002 cv
cp
f
82.196 324.513 mo
78.2109 326.246 73.1846 327.131 71.8282 325.902 cv
73.0326 327.233 70.4053 330.854 67.0859 333.375 cv
70.5525 330.744 75.6071 329.887 76.6158 331.379 cv
75.4429 329.999 78.0436 326.352 82.196 324.513 cv
cp
f
351.226 228.892 mo
361.627 219.609 377.586 220.515 386.87 230.915 cv
396.153 241.317 395.248 257.273 384.846 266.557 cv
374.445 275.841 358.489 274.936 349.205 264.536 cv
339.921 254.133 340.827 238.177 351.226 228.892 cv
cp
.984314 .560784 .0588235 rgb
f
352.635 228.455 mo
352.287 228.733 351.944 229.021 351.609 229.321 cv
341.462 238.379 340.577 254.005 349.633 264.154 cv
358.663 274.267 374.255 275.233 384.465 266.129 cv
389.38 261.741 392.294 255.702 392.667 249.122 cv
393.041 242.543 390.829 236.212 386.442 231.297 cv
377.708 221.516 362.858 220.266 352.635 228.455 cv
cp
384.158 267.892 mo
373.456 276.461 357.914 275.156 348.777 264.918 cv
339.297 254.296 340.226 237.943 350.846 228.464 cv
361.505 218.911 377.848 219.949 387.298 230.532 cv
391.891 235.678 394.204 242.302 393.813 249.187 cv
393.423 256.072 390.373 262.392 385.229 266.985 cv
384.879 267.299 384.522 267.601 384.158 267.892 cv
cp
0 0 0 rgb
f
351.226 228.892 mo
348.772 231.103 346.752 233.795 345.335 236.776 cv
343.919 239.759 343.143 243.025 342.996 246.305 cv
342.713 252.884 345.196 259.438 349.64 264.156 cv
354.023 268.909 360.312 271.723 366.663 271.939 cv
373.017 272.22 379.398 269.947 384.082 265.701 cv
388.832 261.528 391.817 255.444 392.256 249.099 cv
392.763 242.759 390.679 236.199 386.443 231.295 cv
382.266 226.357 376.026 223.142 369.457 222.682 cv
366.183 222.457 362.849 222.859 359.727 223.931 cv
356.605 225 353.701 226.702 351.226 228.892 cv
cp
351.226 228.892 mo
356.129 224.444 362.827 222.064 369.476 222.363 cv
376.129 222.593 382.707 225.548 387.296 230.534 cv
391.93 235.463 394.526 242.337 394.224 249.211 cv
394.069 252.638 393.251 256.054 391.773 259.171 cv
390.29 262.287 388.177 265.104 385.611 267.413 cv
383.03 269.706 379.989 271.483 376.727 272.604 cv
373.461 273.728 369.975 274.15 366.55 273.917 cv
359.682 273.441 353.151 270.087 348.769 264.914 cv
344.344 259.799 342.145 252.919 342.672 246.286 cv
343.128 239.645 346.254 233.261 351.226 228.892 cv
cp
f
351.609 229.321 mo
349.212 231.479 347.224 234.142 345.855 237.023 cv
344.505 239.865 343.714 243.082 343.569 246.33 cv
343.295 252.74 345.66 259.095 350.058 263.763 cv
354.318 268.38 360.376 271.153 366.682 271.366 cv
372.394 271.617 378.209 269.724 382.645 266.172 cv
382.646 266.171 li
383.004 265.883 383.356 265.584 383.698 265.275 cv
388.343 261.194 391.251 255.285 391.682 249.06 cv
392.186 242.764 390.119 236.428 386.008 231.671 cv
381.862 226.768 375.815 223.702 369.418 223.253 cv
366.173 223.031 362.886 223.453 359.912 224.472 cv
356.867 225.516 354.056 227.157 351.609 229.321 cv
cp
349.123 264.445 mo
349.204 264.537 li
353.552 269.672 359.889 272.88 366.59 273.343 cv
369.989 273.574 373.43 273.132 376.54 272.061 cv
379.734 270.963 382.68 269.241 385.229 266.984 cv
387.736 264.728 389.819 261.943 391.254 258.924 cv
392.669 255.941 393.497 252.574 393.65 249.186 cv
393.943 242.509 391.504 235.892 386.953 231.01 cv
391.213 235.984 393.353 242.588 392.828 249.145 cv
392.375 255.664 389.326 261.858 384.461 266.131 cv
384.109 266.452 383.74 266.765 383.363 267.067 cv
383.362 267.067 li
378.713 270.792 372.617 272.776 366.637 272.513 cv
360.032 272.289 353.681 269.384 349.218 264.546 cv
349.123 264.445 li
cp
384.958 268.715 mo
382.536 270.655 379.828 272.147 376.913 273.148 cv
373.659 274.267 370.062 274.73 366.512 274.489 cv
359.502 274.004 352.875 270.652 348.331 265.285 cv
343.824 260.076 341.551 253.134 342.101 246.24 cv
342.569 239.416 345.754 232.936 350.845 228.464 cv
355.841 223.932 362.737 221.485 369.503 221.789 cv
376.41 222.029 383.052 225.075 387.719 230.146 cv
392.525 235.255 395.106 242.216 394.797 249.237 cv
394.639 252.776 393.771 256.295 392.292 259.418 cv
390.793 262.569 388.615 265.482 385.995 267.841 cv
385.655 268.143 385.31 268.433 384.958 268.715 cv
cp
f
384.445 232.661 mo
392.181 242.323 390.621 256.427 380.957 264.167 cv
371.296 271.903 357.191 270.345 349.453 260.682 cv
341.714 251.019 343.276 236.912 352.937 229.175 cv
362.6 221.436 376.707 222.998 384.445 232.661 cv
cp
.988235 .74902 .372549 rgb
f
381.147 233.374 mo
387.906 241.817 386.545 254.14 378.101 260.904 cv
369.659 267.663 357.334 266.299 350.574 257.858 cv
343.813 249.413 345.176 237.09 353.618 230.329 cv
362.061 223.567 374.384 224.93 381.147 233.374 cv
cp
.988235 .807843 .509804 rgb
f
377.852 234.089 mo
383.634 241.31 382.467 251.856 375.245 257.639 cv
368.02 263.423 357.477 262.257 351.695 255.035 cv
345.909 247.81 347.075 237.267 354.298 231.482 cv
361.522 225.699 372.066 226.864 377.852 234.089 cv
cp
.992157 .870588 .65098 rgb
f
374.554 234.802 mo
379.359 240.803 378.389 249.569 372.387 254.376 cv
366.384 259.182 357.62 258.213 352.814 252.21 cv
348.006 246.206 348.976 237.445 354.979 232.636 cv
360.981 227.828 369.745 228.799 374.554 234.802 cv
cp
.992157 .929412 .788235 rgb
f
371.256 235.516 mo
375.087 240.3 374.314 247.282 369.532 251.113 cv
364.747 254.943 357.764 254.171 353.934 249.388 cv
350.103 244.604 350.875 237.621 355.658 233.79 cv
360.442 229.959 367.424 230.731 371.256 235.516 cv
cp
.996078 .988235 .929412 rgb
f
379.107 230.2 mo
382.26 232.538 382.626 235.969 380.904 236.515 cv
382.467 235.74 386.356 237.995 387.307 241.094 cv
386.46 238.204 386.04 234.808 387.68 234.251 cv
385.902 234.614 382.075 232.33 379.107 230.2 cv
cp
0 0 0 rgb
f
370.124 231.713 mo
373.462 235.138 374.544 239.724 372.841 240.616 cv
374.434 239.556 379.046 242.375 381.391 246.305 cv
379.145 242.534 378.024 237.962 379.743 237.136 cv
377.919 237.807 373.344 234.976 370.124 231.713 cv
cp
f
359.494 237.582 mo
359.779 237.937 360.034 238.315 360.28 238.7 cv
359.953 238.377 359.641 238.046 359.355 237.691 cv
362.478 241.6 363.118 247.595 360.875 249.872 cv
363.142 247.583 368.87 249.518 371.997 253.434 cv
371.711 253.079 371.455 252.701 371.208 252.316 cv
371.533 252.637 371.844 252.971 372.129 253.326 cv
368.978 249.423 368.331 243.415 371.063 241.703 cv
368.354 243.405 362.636 241.48 359.494 237.582 cv
cp
f
347.799 255.149 mo
349.269 258.541 350.722 262.811 349.983 264.468 cv
350.885 262.992 354.165 264.179 356.838 265.66 cv
353.976 264.025 352.567 259.701 353.668 258.346 cv
352.764 259.914 349.438 258.769 347.799 255.149 cv
cp
f
351.25 246.727 mo
353.766 250.602 355.577 255.715 354.528 257.351 cv
355.712 255.855 359.969 257.973 363.194 261.012 cv
359.827 257.839 358.041 252.69 359.427 251.371 cv
358.187 252.843 353.907 250.758 351.25 246.727 cv
cp
f
119.238 247.917 mo
132.956 245.428 146.095 254.531 148.586 268.247 cv
151.074 281.965 141.973 295.103 128.255 297.593 cv
114.538 300.083 101.4 290.982 98.9085 277.265 cv
96.4205 263.546 105.521 250.409 119.238 247.917 cv
cp
.984314 .560784 .0588235 rgb
f
120.667 248.279 mo
120.225 248.335 119.783 248.402 119.34 248.482 cv
105.958 250.912 97.0464 263.779 99.4738 277.164 cv
101.897 290.5 114.692 299.464 128.153 297.028 cv
134.636 295.851 140.275 292.22 144.026 286.803 cv
147.779 281.387 149.197 274.832 148.021 268.349 cv
145.676 255.448 133.661 246.63 120.667 248.279 cv
cp
126.973 298.371 mo
113.37 300.096 100.795 290.87 98.3448 277.367 cv
95.8036 263.359 105.13 249.896 119.136 247.352 cv
133.216 244.768 146.613 254.185 149.149 268.145 cv
150.382 274.931 148.897 281.789 144.969 287.456 cv
141.043 293.126 135.143 296.925 128.358 298.157 cv
127.896 298.242 127.434 298.313 126.973 298.371 cv
cp
0 0 0 rgb
f
119.238 247.917 mo
115.99 248.522 112.862 249.763 110.098 251.567 cv
107.334 253.372 104.966 255.754 103.129 258.473 cv
99.4542 263.938 98.1503 270.823 99.4783 277.168 cv
100.736 283.509 104.631 289.193 109.936 292.692 cv
115.209 296.247 121.839 297.64 128.05 296.463 cv
134.28 295.384 140.001 291.752 143.688 286.569 cv
147.43 281.425 149.077 274.742 148.022 268.348 cv
147.037 261.956 143.393 255.957 138.029 252.135 cv
135.355 250.235 132.301 248.838 129.078 248.123 cv
125.858 247.404 122.492 247.341 119.238 247.917 cv
cp
119.238 247.917 mo
125.742 246.682 132.698 248.147 138.212 251.874 cv
143.767 255.543 147.835 261.496 149.148 268.144 cv
150.528 274.768 149.154 281.986 145.308 287.691 cv
143.387 290.534 140.906 293.02 138.019 294.908 cv
135.127 296.793 131.855 298.091 128.461 298.721 cv
125.062 299.329 121.541 299.259 118.173 298.513 cv
114.801 297.765 111.608 296.307 108.808 294.32 cv
103.197 290.331 99.3772 284.061 98.3403 277.36 cv
97.2354 270.687 98.9512 263.671 102.864 258.289 cv
106.718 252.862 112.716 249.048 119.238 247.917 cv
cp
f
119.34 248.482 mo
116.169 249.072 113.084 250.306 110.412 252.049 cv
107.777 253.768 105.424 256.101 103.604 258.795 cv
100.026 264.12 98.7255 270.773 100.041 277.051 cv
101.264 283.213 104.984 288.739 110.252 292.213 cv
114.992 295.408 120.94 296.829 126.578 296.115 cv
126.579 296.115 li
127.036 296.056 127.491 295.984 127.946 295.9 cv
134.038 294.843 139.602 291.321 143.22 286.236 cv
146.935 281.13 148.479 274.646 147.456 268.442 cv
146.477 262.096 142.921 256.325 137.698 252.603 cv
135.046 250.719 132.022 249.364 128.953 248.681 cv
125.812 247.982 122.556 247.914 119.34 248.482 cv
cp
98.8875 277.145 mo
98.9078 277.266 li
99.9359 283.915 103.668 289.959 109.141 293.851 cv
111.92 295.823 115.085 297.242 118.298 297.951 cv
121.594 298.682 125.007 298.751 128.359 298.157 cv
131.674 297.54 134.906 296.252 137.705 294.426 cv
140.469 292.62 142.932 290.181 144.831 287.371 cv
148.566 281.829 149.94 274.911 148.606 268.373 cv
149.643 274.838 148.023 281.589 144.152 286.906 cv
140.364 292.231 134.53 295.922 128.149 297.029 cv
127.681 297.117 127.202 297.192 126.724 297.254 cv
126.723 297.253 li
120.813 298.003 114.579 296.513 109.615 293.168 cv
104.097 289.529 100.198 283.737 98.9146 277.28 cv
98.8875 277.145 li
cp
127.225 299.491 mo
124.146 299.882 121.057 299.742 118.048 299.074 cv
114.689 298.329 111.378 296.847 108.476 294.788 cv
102.75 290.716 98.8481 284.397 97.7725 277.448 cv
96.647 270.652 98.332 263.546 102.4 257.951 cv
106.361 252.375 112.46 248.511 119.136 247.354 cv
125.763 246.095 132.922 247.607 138.535 251.398 cv
144.302 255.207 148.377 261.273 149.71 268.035 cv
151.143 274.901 149.71 282.185 145.784 288.013 cv
143.801 290.949 141.225 293.498 138.332 295.388 cv
135.408 297.295 132.031 298.642 128.565 299.286 cv
128.117 299.367 127.671 299.434 127.225 299.491 cv
cp
f
145.606 268.47 mo
147.161 280.751 138.469 291.966 126.186 293.524 cv
113.907 295.08 102.689 286.388 101.133 274.107 cv
99.5753 261.825 108.271 250.609 120.55 249.051 cv
132.831 247.494 144.048 256.189 145.606 268.47 cv
cp
.988235 .74902 .372549 rgb
f
142.42 267.358 mo
143.779 278.087 136.184 287.888 125.453 289.25 cv
114.723 290.608 104.924 283.013 103.563 272.283 cv
102.203 261.55 109.798 251.752 120.529 250.391 cv
131.26 249.031 141.059 256.625 142.42 267.358 cv
cp
.988235 .807843 .509804 rgb
f
139.237 266.247 mo
140.399 275.426 133.899 283.81 124.72 284.974 cv
115.538 286.137 107.155 279.639 105.992 270.46 cv
104.828 261.278 111.326 252.894 120.507 251.73 cv
129.687 250.567 138.073 257.065 139.237 266.247 cv
cp
.992157 .870588 .65098 rgb
f
136.051 265.135 mo
137.017 272.762 131.615 279.732 123.986 280.699 cv
116.356 281.665 109.388 276.264 108.42 268.635 cv
107.454 261.005 112.854 254.037 120.484 253.07 cv
128.114 252.101 135.083 257.503 136.051 265.135 cv
cp
.992157 .929412 .788235 rgb
f
132.865 264.022 mo
133.636 270.102 129.333 275.654 123.253 276.426 cv
117.174 277.195 111.62 272.892 110.85 266.813 cv
110.079 260.733 114.382 255.179 120.462 254.409 cv
126.542 253.638 132.095 257.94 132.865 264.022 cv
cp
.996078 .988235 .929412 rgb
f
142.337 263.585 mo
143.806 267.225 142.327 270.343 140.573 269.909 cv
142.311 270.065 144.451 274.018 143.644 277.158 cv
144.431 274.25 145.845 271.134 147.535 271.516 cv
145.829 270.897 143.757 266.951 142.337 263.585 cv
cp
0 0 0 rgb
f
133.885 260.187 mo
134.944 264.852 133.473 269.326 131.555 269.2 cv
133.467 269.127 135.93 273.939 135.879 278.515 cv
135.932 274.125 137.361 269.64 139.259 269.834 cv
137.354 269.454 134.928 264.652 133.885 260.187 cv
cp
f
121.755 259.645 mo
121.812 260.096 121.833 260.552 121.841 261.008 cv
121.731 260.562 121.637 260.117 121.579 259.665 cv
122.203 264.63 119.618 270.077 116.517 270.85 cv
119.646 270.079 123.522 274.719 124.146 279.692 cv
124.086 279.24 124.065 278.784 124.056 278.326 cv
124.165 278.771 124.256 279.216 124.314 279.668 cv
123.663 274.695 126.247 269.232 129.471 269.198 cv
126.273 269.236 122.401 264.61 121.755 259.645 cv
cp
f
102.609 268.526 mo
102.093 272.184 101.103 276.584 99.6087 277.613 cv
101.149 276.826 103.327 279.55 104.834 282.209 cv
103.246 279.32 104.3 274.896 105.947 274.315 cv
104.357 275.181 102.118 272.467 102.609 268.526 cv
cp
f
109.949 263.142 mo
110.073 267.76 108.948 273.067 107.2 273.916 cv
108.99 273.257 111.517 277.286 112.681 281.561 cv
111.466 277.097 112.629 271.773 114.5 271.371 cv
112.674 271.98 110.112 267.967 109.949 263.142 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.0
%%For: ( ) ()
%%Title: (1410.m00.i121.n045.P.c25.168146156 Colored vector jester hat.eps)
%%CreationDate: 10/28/2014 9:36 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2Osde<Puf9Q@YmpJDPl.H*lBXP+]@).,*/>N;WKHt>)iq).)m;Lf\4^-2<L;Z9=3/UIO7'!5tX1S)*Y.8a0gZ[3=ebVkG
%nb6e@8?LO)Oi"lQn%[\jpUn'R[P.$1Dj7ls@D0#%C6ZVZ44gDg>4'j>mRO7Jg+JrC0;[0RYZ>Q;Q-.ZMjYM30ZfrGFX0o1aBUtJN
%.5u*_UNOWg^M2.q1]Y8Up<@ooeuaV;oR'co4K%)kr/5d?J*_r]%P<`R26imhBA(,?@*/0pI+es(WpNQ^e>Y@kT,5m4Zg#W.qdHfV
%5L<dp%Xf,Va&G5b/p1qM=\YpRMnX?M;]&sm[F7N:S"F_8,*P6GrlAHDheS$3.jk8Iml("Ohc7fkfeUnADB<jIl/:P0k\$_60LmHT
%b5s=0H[$*n2f#6baG6^YPBKhSnpc:A7%NRa\DrIEd]T'CEG['D\1'r<T4WVgFPf7`KR[%?^K+:Z_bqdsl#Y.W3r@J-d!9B%dER$o
%>1e."YBFU6'Xn6d&DN1:=HeBeNu)RX*:;\Hn:,SAK2V"\lk#I@C0d@IC<AK0hd1HO[n8m%<]_3R38A5&on17g?Kd8`q'fnH)-N8r
%$;;g..*(pW-D..ISYdGA"5r]_?k8%!93A^QWh*2UX"1&;S*;=kA*C7"[F.QA:SiI7&!*.P#Q>1,J+Z\Gn4k@47r('6@;`\AP$t/q
%pG$lc?HG(ME<78?HW`]+3oPRjEM@sMs1uIt&Da2fL)UV02<]U+*<Z?@gFN*E5MWA`l,RG=7^op25ApDugHqdc3!rT&_fD[&U,/pI
%G)j;a+,d*%-H">!X&PrNkjMiMFK*u!]OF-XZPB@u=*g24N;c&`o0f@l8GWEZCSC`?=DK_u#*s^07O1H%0==^U6Z9cBlC[]AM>!o5
%,W^[NpPHm8Ch_>+n0m)T_YBI>)#,Q%<*RoLa:R--C3BMj[*EVuQ*AbN_+=je579R7du2-/epfLFDQ.\LU*6U>g:b1]5Pt>:]pH/Q
%,N_V+>4n[kC7\JLWGJWi5#!%S)R\Gc0u*Hp)Z5SE_NP;Bk_-)7:0lcqSQ0mD3$E9$H"MqHlTGtA'E'm`ZU>a2W)SUBN?Q86qs=>_
%,+RPj*[O.mr?(2mNEW`<hA^mIAX=gC>-<SV5MDY^&T?AVoA\d'B_\L^53_3FmF&20"ikdkXco?<g@&'(@@oFsk=qnEWVt:D1ZTR6
%HLCN_F:LmF%Ebf<Q/@'I;q_#?>^P$O<N7;[=&TKFlLiRc$*4frPR;)o\5q1jZBa<sqt0c(lbEI347p?R(4?mF9\Zc\X%8k7Q+(f+
%a]]SY"I<tOoPlI<\gmQDQD'29T^q`sWN=7@5l&1pVEF]71mFi$1<lOr0QUjWbg7^kIFBtmdl&eAIPMA-B]P/COYm3X2dF8:e-7ct
%^Nm]^Zga%"-6LHg=UR?5N^)31G5?I+jk9>)b.rd6OiKLr'=5??5d/2pXTpA>2&1@9=BC5@=I[oHS[u$hQZiRZ@e\HR#$)Z0:k!)K
%?>lD*!*3iDS[?+_?>E<>1Kn@>hZd/MmB&'cIC*mn>X!?"A*K$mq3WD!TmpaoTCPdb5!D6)R8"cY5&SZ@O&)AjQcWh'PKW(P;of^F
%"E<4nXgIXWI@Rs>p[WbsTMHo,V,$i6iV27#`I+pucmGcE<Nlj+_(Bm8^C\a>;of_pKm]Rj-l.f:8V^djm@mO$MdFda#/s7j>Kl'r
%@WB,rT<LL@Fmh$=@TI!7Pt-'+mGA<RcR.ZpX\?SjfEI!bI0V?qCO!Q6o0oJqQOL18,Fa;)KNW9h'8Of?_-G)1,$W.PcS3_!*nbq5
%2+ObB8i+@AjN%5.cU_j<^heDJqjpuf^YWmI]crr-^ZVY/R!>IYO"5Z_9.g'i?E;P9.jUB`eY@"0,jfW?3bDQtd`"E3dqZ#5$L?J7
%V&jK:/Em%gs)`]T(=A0N"RWnAe>%F1[!jdcl-E80X*aeFX`R=YFG%fr?F0^gDgA@63=W#:Vk!t;6ldWY:(gt6:&r>ldga0T"<dW0
%*!d!s$4Q\<YD28.adq6R$"+_;4Xhd8RtmD8o<`UQ?4C5KOoQtR>#)NcC#b&@DX45oep09gH8"?Y.sIaIpd>+^2tf=5ZLP(%Vp51u
%/kpr.6bOiNS@TW=HM;fbgaW2i#cPSb'4[MG_mp\eUJa0)[_hK=6Id>ToKrRL!=/2,)Rri#madOll)8)YAi">Lk%/>BRcB/.=##\c
%2.+)h'0-d%4K\akd0s6U:8=*4;#4HFKk:.@DQ=a@'@1:mR5PQS+dlB'G,hOma0ENj37Pn2KcOZ?G*O?rQX@*,f"A.l^nZ:%S6DDO
%E`34egm"9\&E]kF1mrCXglsm<Pt77F]kUO$F(9(lN4B'>4+kOX!h[WjQCHWLF'EO"bKXn7\Le'Xa1b-R>U!Qf`g0h+2o(kT#/lb\
%F(FNG_`u&mrb8@[phLq^8u+\\4-b3gB9gsF':B#Vh']6(YZZ;TjSr)Z4&/\uYh&`Re8;[qV0[;IFOR?N-Qo!Q'"2,7+C@nG6P?P.
%R35^07NPK(jc/<\G1a?Y)J5AfG8RcVV",G28#07Rq)7&9VrR01+fY:4QGb_\qb7F\&nDHY]<1*k3SZ9SOo[DhIEiK)'c=IR[*p$c
%2uf$_9ZFM6J8bX5[oR8*)YJ9O<)3SGkT^ancU\ORiU:BR*aT5irZa46E3)$RO^O*Eh&>F&%l8,7P>RqXN;k.'j$+4/0m4MdH=nar
%;eZ!Y/Rr.OlB^!?Al@m(E?TnOP'#u3JnqqUXqMJ9mZX%rS*,)pNbRMRV,k!FH6.6m"OLb<'-rZ`BB-WKK92bT'Pl*/8I5?4JomUf
%"tKugetdT]bm?466V:+e>Y.9Fj)ArC^Wag9:oecLilYLcri=;92VEBs:[`FN`Zu(:4)CI@fZBQ2G*3Nmbrh%o\r(d!cd,LWb^#N#
%3+sY1jl7V:B%l(0M2l,hSXTR7QSrlD7P3@%_uCtf8)El#VFhT24`?^c_Fu>eX,]e.h'?YQFe#P8HrEqK'#61W1"di8nWWdh0@Mj!
%Xl_(T]d=:g;eUp0g"=f\Z(&PAIaJn3Bn^-D]`(RT_bJ2u]a<bj+LEmcoK@b0)S_0FB/g9BIPH;[0#f7_RqZMG$*ob-n909_D0SNg
%pE(\YoOgY_,QMFW"OE#C-lA9T1<?2R?;HsX]nDljQ4m-8oI#G7,s\NaiDp88\IQ*;#S;=h,&"O9;S=.&p;7f`@jsu7D<-gN_3[_)
%>e<1IUQ8)Ng>o=%-=0]-GB.PeRPQC5c:^!!K$`IM=??D)ih],YRR:Gc#+3.P;7<6[;p>oP?IU=kWQgH^RQuG??cD'dAW<$2M<X/@
%8a^$4@c<A93&^G/T>9tO4&hgPR%'\=Eh"gXkI=]r--JQR9i.;r-iF8j=Q)gq.b">C"\Pn#%nd4lYfikH)/nY3!)^MsUk#I(l3U:h
%<%`C@]9f<4$j&<=GuA%8C4DLt,X=NPGF_V^+_R%2P6*06BC%I<=;Qt=_2poT(rX"!nlNL%WtB9[s.k0=TIh1n)Ws[o2g:`._BkkI
%8s3podVD`gZpOI>,XAh2V2D`O-c*/rf83ZHV0_es&Pla4<@bQ[L"TN)Gp^[5(c(3BP_kP+Qs"E9bVN+naZk-I1JndIc*T:4,\=Z$
%0GW[R^GW6CPB'N`!&H."B?#!i&u_*PP)F?*(ipnDR/U?TnkI7q8HR*u(M01ro&#Neo3@M/ZZWEA5e3;n.#BqCe;N%MP`(\-Qs%h8
%kIDucRe9Y@U*RU\WMfT^P`(\-Qs$-ZT,FJn`LNAbB6asORcIVsG4E45).)ouR(_JnZZ?\mF;:!E_2YI%R+XUGF+p+$TBm_i7JV'N
%C],MuA'R]CT3k^UH_QJlH<"S>I-itBc(4I6)p-\ESEl]Kc2$)<j(j>a[ER1/h\JOp`!taAF)>d>ec(?7g0@dmO^)b+X3J3/s!1Yb
%N!LG!+ML!U>EWA%rbYncV?29h1:fXeH#k`5YQ])'RZl,1cMZ#$KP.djG?EV%Q$s_PjP,6L\K>^bS-4,(ZMAj(;D/:Oc7&^.L$+H#
%=3,$VG`.tFf9DCQ*Vut%U4:eY48o0trK+TV)7MQ'856^Q1,W-c1G;W^02hBL5e;j+hgjuE8XRK0/BWX=Wn&]ZEOA"0<RF0EeI5*A
%I%mASkW;WLj>n#_VG/rE0:7J-FM$CoG82/FHI;N3,k35akC54GImX)/L;f2din(P9rO#!_dsjs'ESbN=8J0V>NoO(<P+PI3&`b/"
%As*Od>1Lp_H.Y]?C,<g<'"Gj)`W_e8+[N#_))qq184*8f'.!Q&0T=1f)M5eo'a?Q@&gjlL4SA7k$)rtQ_]]^MVZXne;=VUE+XC\T
%&95t$SXF#]q+\VLr-.kp^H]7sh`Um"/\$2'ikKlXL]Ar8/`CEiA%qtk;!'DXRE'^<1#I9#2h>q:a*d&)hg*Fi*qLD,AfgQW_S2JZ
%I/f0@Oam[Y>K8"Vp64&o+6l&OBK#7r?`>(gGE]Z[AS1-j0gnt/@S,pN:J*W7]r)\sI>#.#SW'%a&u6Il@T(SO#]$if?WVk^X.Gi)
%W5D4F'mUHXGk$?<EbX7G_2\#Ia^MBD[)0&]7KO`<,AX*$dTHCQg8K^r[8pC4CU?_,Z-e06lYPuMS%HuF=']HqAAAZDT?U^h485Al
%rFc.`Er6%p\'fc+kM=Fn(IATT>L[^l\E5+<-`k^&$,(llI4+BYa]I0`fE+R8BPpFK%&#7)>%SH8k<>Z?p)19-@@=L=eh>4KT9+:>
%k7@F2B)@75QjIFuTBeB4/u+J$:<Q<@@,^Q$)+iE]YlDf"nM5C1MfuF_j$e<'f`*^N]Z_BLF2uJZnM5=$bT/?Xa339.no#A`9o'q<
%*Ct5Vde+B]Y77(kp)r2$65.sk\P0[=l)*8@roFWp8TL\RZ&,I@#WJI06kU?6^">^c(oG"!`%QL\`0@0M:;:U:;Tr\*.o"NnS_[1d
%XM909*9Y1Y/faltiD7()]EsjjOu';@Q]'J&,,\a*hLm@P&UM\P0\rf;9\28UH1e"Zoqb6Rl2OHMV>\k@V=E0`IeCu;Ei&uiVrkJZ
%-a'NK\m+uo'Ho8^SNXfI+tM\ukYOUbhigF0,VUKggF@E9DXs0@.W6:K\&/]STbUT@ZE@?*q&P4[J'eJq-`;;INIbe*R@F&Ym(%gn
%j"*%92XXk1Tmp&mM,Lj*^IcO/dn0\cBp^F\Wn25gi2i;@!cX=dK+h2hP6$e6+e52hpqPt3prOhXB2Q9]kC/@-Y]/`RN2]d,r>X\8
%8-6]aO"n&.m]=h6glF2a@nbY!bl&B"5K8ZW1&cAJZq`&I7cd@Rc]25+Ei2l`eYjfd`Ko\iglL=]'>!2<hl1eAiuDo'Q7)ML<,7=_
%9+:Kb'QE0+S>nERF`-L#o,Y]l58,'^@-:)^AY]tR[lGqG_dY.oh@8f4,Z`6FrY*2\"J2]_W?IN0R%)CpDcEF(H(g[PTpc;Y'-j(+
%'fqmT'"t8!3@L%]VV//]P=S4d[i4F$Ql^I@'I<:U6/us%?8cJSap.eoa3R&\Fk!N*\!g$hi/OddP";^HG0BLo(-S(]X7gk+]]P7&
%,VG%FPjjqDR$gP@8cm5$VgB]j@@lgC*MJ/#,'#[2Rf*2IB;os;=uHm=/5K&$+[L:s$p*C-S*Pn9H/6-7S[g=2?+*un/=TjbPG+;Q
%2)i#,k18>CR[[N&^XeiHTLI^ZCMo^b2I#l[JuTD=B[7uTC2V>Ac+1AF2`Kp^k1na^>;2V;ABlJ&AnK8t(%VVHFNK'#Rrm+fd_0EQ
%.OV>r'!Zo7mC<@goF.'r\2c4_piQ`XVAPhq9mj]J@@R)('(bseo=>Pj=BAs`^tg!molCIN9Z@rU,=P@6#JGF_/!\H3;UX'.QHIb'
%O4?Xi_KP*4/W#ftpR;lR-%,%Obg93RG\2YgMEnhBUnSgkh+W]/2c5OZ_#&V![!'gY6BA[H`S5#%I<c-np?cb`\5Wt4bGAa<^ejd9
%Z1+s48Gq2fRGe1g?Y"HlqO^H[+mGsOV4=79;[epT_H`kmmZb`*7<$=bE:JcV62/uFU0GVp7")#Ob%9;T+Fk7M819\!9c>]&5Io^q
%KSm&_&8\3C<6r15JssBEPCghL:]i2Kd9d4?&-I>.X?PaHbS%@I"_<sLj[,>)D.uV6CNFQ6m\ef(f6LNdb\2+u7@?3=)GtU\f2.;n
%+.3sn$"Q]9g;;al7QnC"JGhuM=Xfg*7!"p_InqHGf/,V=9$rW>iEu2IpJ\4/rPC\Yks(_A];mX?cL+T2g,V;,'9t>F.?9KT&tY'j
%p('KA:=BV='&l-F+RLP-@9h?P+W.:PoAc=(*1B"J0`A:'JLPn'Y0RZ.R?N8s<pf7>WaecE\T"&Ha160e-\O_O_D)?*dk2W(1U!dE
%Mq><[Vd;8.+nN6\S9`dIM]UsTb6FkEl1m47I!3fqQ`adE0k+J,B=;RMgoOS8hoL#Th;epL<u17m@@_8T$PT(tBXe1V)J4SVRjg^S
%ikG(hY(i7W-K,qAa'#(:WTWTnkiqde.<dSl-29OIp1:Thh/)(_(\tQiMUAWB&N<9"Re[j>.lX.m`_$:iFm?#<r&QL[7)7LO0AVDS
%,k]K&Obk$D>B^NFm7,OL$j:kf8cVZm2mO@kCaTg^8_t:HPNqf5Y\r`O_]UoF/ptq_(!XBXI?W_'E:*UDfIBp+'D-cJgBi'r7nHI"
%-G5NlPost\!5D7nIN7W9@;]!0f#rCra[U.\P,5jVOh0djp2#b$P=@A"jtj@17$C!j`5._sK3"u.5#1YqKdjt9)s@(-SshS1>3E<^
%Z-7m]6_KmL-9ZR$`17C9]Obic\V9WNnTCF4q.ikZJ'eV+q%BKMR8)-i/CZ2`QQ^@<K;QOfNVY8e_W>*)FF,o.WR_<(q>Id(:&`D(
%hf`d@qX4p/R"Z<?WAKXP<4:=oT;K%ip!QFa9'ru8[)T.q9ZaKK;QWt_&V6Xf*]+eC8+b\Vq)%6s7uO@R?4[,l]UW=/g6hO6JoN;G
%e>YgX:76jQs5Ke!?g-Z+5EObXXj0*;K"$RV?e-0GebLlFjME92LD"U7c\+<^#YUOqpT*K%>1i.OUiu7".*DphpEd35d=9SqWGKmU
%)/7Fk>ij<Kf*m%bXM]/<frh6FH_8+f;3'0'+8G.*IJZKNJ'h#e[Sre^)l_!Ko]%!KJL7AC=u[TD#WmjQ!VTt&WiNUA[o<_sSP\7s
%4hAYM(I%66!:<O>4l3PAJE$NWY]muLr;PGgRJtJ)Qd_GrHH3B]K+8pH.*U-$+(>E$4o`%lj8>iQ_bgAOO<7_@*B/UWFM:W?Ss/]+
%06IOJmN"KK)LsjCF%El>_gps/q0BUqU!>euo%tAJ-d=E,j52r2<+=`H>e"-Z+9#DX[F_Pqf@1[&>\X32<mr,hF69ssW*76B^oktn
%UqX44qdJY&mn&,u)XP1#'u8DB?r$i;X\h7iYH3Dr.uCk:9VhIX)f_iTFRLp:=]aSN8OOFf:3Y]QIsn2uqIaiWJA0K`jFFSlD0Ho]
%;o&B].>k::9@10k6]'29a41+nh<\L>$h`C`ccmZqp@2KgJDW/uakO4<q<"o$gG)Tep;0_p&r747jd4TGJ'[S"5aLc%^V#ARQi9`$
%[]:R`19F_lT+ZBLOrW&<8_1P)+&`4R0q)pRE>^l/N=IBP>N'R7Vc>mjg<[m!)1?15oESueinEKQ,#<sq6#pfleo;aS8eodUI_oQG
%J%_42(%!&6KQ@7/,OWJ@B/WI?eT8*Z7au:P[S$4VDWrE?m5CEhk!aHYXbC0eaSU-g23+u-h]"=AQ!0`R7]BBZEJa.K8fdU%)A,uC
%A$aYn>H)f=]Na^bJbIE)FK>k7M[gaqS"$5i/e"XQ>1Et>pRc+Wf5W?Sr5q]Z+RGZAQ(;,B]CnjQqd$BFp#m;53Oi>C[=#%,3BG,a
%WW$P0^#.]KZbPI@fXn8i*ObqU;[;:=SQ):\m?EX2[;)V[F@XiMM[^%`=t+$o?Jt[O1RM+gLRJ"kJSPB(FeF3gq@!Ej]e!_E5;6@(
%%.tOk'#Iu@eZ2ahn!3H!]3`L(\+e&"F*9A<hfj/=MQ\Pu<m,,a.i)\,)U1R,*WC$hMSTij7mB5=23(;:]s-1l[JT`5$uK]H>H)AL
%6"h7dJVNMX)RlQ/&^as^=\VE/Nc(STNZbR]BGo&mV/gSDo2>JP@U#g4D-oF!G-fT\mo<sUQ0EH1WP)3A'=Ra>1'XP\HD>l=k]R7%
%)Eh]Z5GpL?;5?A=KQX#)`jJQV^u*\sFs-O&fKS])K?6?c(Xa(B4$u*cIpf2/C!on^G[qM@LSa0_=F4B>d%Y6d_q&G6bs06Ag0W[=
%7_)J#+@EgIHQ9hu`72%/Q=ZaSLgp&XRHlHBQG2dQ5`MbFnB\<SF#HMQ\@94p0"#FW9XQsa``Z)?=>9]\R3&0$Zcm$d>H:3UoJULd
%Qg*+hn_Jcd9D)%;7E[-f'/$(J4=-^E^UF6U1g`&71\ihS7dTp^d\H;UV_=#^l-#;OeCbhJL1\BV)LmLD-:/+CX,_khhubQ#UQn&X
%2I`dVjX%X)IOUrO>.$r7(d=8#M8c+62YQNJ!hnC_<Ph?:*i:!lC352[^U=Q2K\dIr4JN(tAj-^j@qP%:_kXqlq<2&C-lpDH&u-hL
%$HU3C9nZURH:C_9m+3HZD7.7ca'sh#qT+aXXAZ0D7CVtn[<Y/qFEYXI`'D.m'2BH3h]?<j/12#^I*jq-X<0B!"*C*l=9XrpB5F00
%T;@Ua#TCb(Bs@X^ojDV9o2=nU4jlP)T]+kAm?#\OfhRSU%#/ETNY\*"10aq:3c:s@Vj=L,=M0@$du>Fch0$I5NV&CJc,r%\YI/]I
%<AZ4-N[i?3Ia:"'Bf92,hdma$Sb0Q,mg:%4@UdZFq@7gMI+q="@s\\G-fT-%H<&:Jr6dH3TZMM')U1\9PhrNn-!\/fks'if$\Vq6
%""L:F+/sXGpigK^Wo<c"N(PdWNYaWmI'9S0:'QV_@=QgH(]03M!-_qJisJ8oGi(K`efmr@AK?i=_0u!<V=mcoF']d8`\-u!EgL!q
%FJEuA5.qBY=t:&>]V8'0;5Y)r5hEXW#'B7SB7>4+AY"*l<K`693/oU%OsoCEKU=LMq"@\uj>\@`]@d:A'rsunf^CkoqO#QqY%7E7
%crKt/^kJqnOfk8hhfDn>0k2Z@SV@JM&)3GA%J:p`^X1AchamB&/Wj]WY8FNV6<bpF7ShNlp9;GckfZ&Y6cU-(_r<`._ik]IaNO@'
%4+1(^#`lb@Zhe)VI&+r*]p!>XO4oqOLH^u,ZZY'eCSYrCP(!M/Q9[/AACq4"pSC0-c;t@@+e>BNV=Y\khHrj+cGM/h=+8ddE`?dZ
%MN6oQ)G%9IW\8JM.]Io!:>Qllk7[/5lBG>p=KkB1J1WW,r5QfToHlKRWHN$C.orrHenkVedFb;(OVi7AVm$YX[rU.N1/fOV==Z7U
%N;:VVQc^N;f;[?tSs;8r&ftD_?V6R2WEC`A%,aa/n`M2s64/f_Gj-*-IFV)ZlLi/nb;rEhAo+5`)IE&Z?C8(TD)+K>(H(n?0NJ8E
%m#`1?^5NL1/>7Ijj"g-u.qgaih+N(8XPJ3u&iaPg=9m@gfC[-`mE9I3V]*RsKbpRtWLh7hkL;1bl;dU\Rm#'WN$,pm\:R+n/`k"&
%LHT0A/:?.]/(O(`J@fQd.7OtU@K"P6Y>E>S$oi1XGLIq+EEZp"CfaEt=0Y0?!jSWbBqt?naJ]s)NN[\64rWPu20MC:))f;ed5.b1
%k??1rj7Jli]@F[6g2>P(%XU@BfQ_^KV)"NA3@tKk@tib;<!JAfbjab$E/LCEAV6G(@?>f1n$Pbflg/'.2eIee^Y[>s"+BfBS6+C%
%3acm>%,?kdcg;8=$&:[X(c:N%0VHTq*%M7)=AF4Yp4b\;K<+(I="JBjn'4A*SN1k=j1uRaFo[EY'8-`Ujo@n!]ED:,idm&k^E3uI
%<q`UpWkb,rQ0K+OrJi`@L7d0$0U\4h`DN+eVhXAt"^QI1Gq?dJ=*_Rs5&Jkc>un8pfRK4IM,n<Yk)5"WC[2ViJt59\K3"u)]W.ld
%Sh).mIJ%U(!k<1;U_EBcBPI-;T4QN]8C[2_4F13@s,)'Q_'uXK<2gV08/k*6a&@jT$.A"kWP;3GHE(9I':VUW%_KHrcUE0k;3i]>
%nY9>HTm:shSTO-kRg5hj[cP&nJU]MfW@!aDW_lP($cOd3$lS]57!u"<Qfh6K#JQ_&M0f?S$3!o%JUtsPWlj,!PcC#0\K?VYd2CK7
%AI7M+ESZ<a]NNRe9^3-81[FiBA%T,5`c6JoeTRrs5Js%VoGC8[Y_#=s\#R]R>REhg\2RgP>^"saD5.^E,rfmR.GHPc&hbIkk]"/F
%qn]+@8^qmLXIRPYXdl?U6*#;q\Df5I_:uW[+V%Cb?"tMkP=aZUMg((I]sesR7esFA3"PV&glh1gaq?@1R`#dMri:6d7H"@?fkh9A
%rjXB#/e!guJohlr6o"H;W[S4)j[`tEE.#&@hj!/-`OJaEIt&l2He$8K!d8Q9O?p6#!ZalI\-tW%3U36]bA'2W!qXimh<uBsD_!a2
%SNX306lUZUP/5I7:FqRWb(Du9nkuVAHZh*)A<LI*Yfik<G];A"5H:'M[HKHN![ZHBEXcj>V;s/S'p.NC>R"'\0'N1E5@.V1Or<2G
%KV##N@f#'t6ZdJH4@5IH7_LQf5E,-!>\$Lr_Sg8ZW$WQO0*+YNMTpI8aS$f_@ii9D>T`9hlff<-N$o=B,DktmUNMm9.MOiHR<2WK
%j^-d(3>V-;mP3IcPW+Y7mKq3pVp2J.IcPaV\'"lJaM&?dXL>mh9glrU7ub7KfbqEJ8WmG`iAA'[Y3:'a3<uMU8hgt)HS.PJ@8<He
%U_BV)>`2["<_/Z\O/kFIg%C@f\V<&U;o=9be/5S:B!Xt2`D/f:@nnJ(\reGN)FpXL<p<-,qIeT]Y>AO8kQM/E!bmgM*Dt/ZhBD/0
%fU_=GO-+.FX[Zo:Aj<c8krX/G9e1T1rLWt0kPhBUollH=XHhWq^Td.pXCO7ncd#<f:[5Dq'Q5QV4NLMql1SEWc1?O6B6E7ZZR=N$
%e((Qb*c,c%\n/'I:ttt4e$e]^7Q^W%J$NnGh,sQ;I^lYsgh^o9?`HUQc,SJgX]Es;743HQr:SX\\fL5%WfNd:oBGn"PEEDa.N`=j
%042B$l@"'2aaa2X[6LfFB?hH#mEF^AkB,sFH`()lgNVOd^XXC<UM9;>`f$VEdI)=sZ1mtbV`upA\b+YHZOZ\5rOfCa<rBV8g.n7n
%jd5FYM[Ri\a#"7o=7Id]9)eVW4"jgmW4cP$cCT3"VqspbBLfenc^2nYmi1Rg+2!egB[Q5&Q]j'3qKDmcI^?>*/%aej]:7J\\Pnh`
%]J!9r1emIV@B!K[40KH@VtT*'HKLfAIjt80q<QHum_PB%0'kcLo(L%ne$X5,FG=_aV8DcRWD%.IO%N`ZHM?`?oui7c[W_-(K9b$9
%+5P/lrr)9c?u]]D`Ml;T\8-"IDe/.p#Nna@\(;[HkC5UsHJYFjZ'B$g2pJ2*<O4Vp3WGiPQ?LQ#&:3drUU"(J4Y"i&S(iu?<gLX>
%c.bAt(d;clgW467hg&:*%NJF[aDZNJml^,\NA!rjD_%G\e^9r64RSF04Tal)qsY)UjcfSeI9jlo4is9I\gn[bhc@/ooCJO?r1h^:
%rSjrUO"F&cieK0L$?r1XN2,-s2ZL&SUq!SBXhQC!PlA5T_H.ULI8HDd_=*A[-Vk)m.f]/%Yo`,bj7Th&[oZr31j^aMnTM351_'-#
%^?@0-F+4MY_W*fO$>j[%DIrEp]\TC]4gj+,m^I6!+TH:-J,JNlpHkkOi,7+/HLj2M^%_M#Ag`r$bocCU^MeN"]QuonAF0m4LU*Tq
%h9*dTTt0eRCVS3^'_C5=*TjBZgdc/#kP%`/\`8GlmGX84T!qd8oI';*^Rr9blteh4=j/O"?HV\(HS$KC'^.C&YEtip/U\FsT"'5`
%A*oq14*0ncdiAV[_WD?p7!':7>IU?#p5+BEEi>p5pfP(NU;!cpbo=Vd2Cuk#orm]#4Q4B!jeZc<pi>o;L,X>GE21;^oQbc:md`OB
%R_c+PZ1TYhpqgRS=^PpHI4[&k^J&:!on/<?na;`d=ip/n\D=h@/2#^r0'5pb]sGT(<k?r(=/(<X%;%NqKaJB6K;e,64ook?0m@YA
%BR=OV2gZG2UO%.S*-Rt+h@:!DqcR?=q'_%\QJa<ARA4IO#MYLi@Q%#6I!4hn=kn>6lTi3t+1u)-Sq8`I1OFH_I6,!Z`SK6O1%0Kh
%92D.-7EpZQBEVE4\6-g6?IiE8H-<iJD*EH]bd6FRI;M0lId9tYZaKYa7crY$rEU?%j\g#IAmr7?8epfuGb6a<a/9I3Z-W0NmaB[c
%At=kUis3n9>&WG#=CU7Vqr\P]V\rfi5-Tn`-]d/;hg`lmfr+9oDsinF_u9"9p's::r,9!.FlmRi\U\Dj*?$Sip$C?uZW^U`AhFLr
%qN#t697ttcZ=SQ/S&S=7YjhGb]>!@:n1,&rU#V]j!lOu!%fY(V[E\D"naH#h-Ymm@T/-:N?f^j_60@LQqX[s\\pSp!r*\i>f)4/`
%bj9Nam/F3D)*Em^c8SqgebaAtK7s*b_tqiQ>i#!XQL5SC3hJ<hQODs[qG/DQ]JM,Vq=`gcj++kWImS"KNPROE,g/tkR_c-QrT).U
%P?db@2u9s"m)h]lnRr+E84IA1WSc/fqXuKo?$,8,Su/t^oGS^*V`E(1*+NCP]dI-V<UtGrZ6lZ58"iB@1]f*:M.J8NpSCTF`c1H)
%Gl6PRobMsqeua).4#ENooBGMTj"EGTldY7F;u4h<bi!C0r!QjiU5`E-4g56uV&pelMFRE)l#/2O)*Y1to=aR#>W@T>2!WYuBYS5[
%])SZUd8g_DM"L$5.7hA?K;h?W0b0Wta20OO[qJ>2ld29>%6g79k]$oHI(ZjE#Zi*T7e_gji+_3E9>KZ6Lj!;/C35Kl=%88PW:_5*
%2shgIoT5ZK2ob?-#,kN%rq'`7<fAE4^4.>Kdm(.sUQt5aOOBaZ,E?:kA`>Gk_'#cK>i52,TYko]qb![C?%4NC%:EB.o_T.*4eCa6
%&Mip^BRj[CR&2V8U:V(e@up\H_"uuM@@cmrk2>XMH?%t2GX-GfYo8iK6)IE*o44osFo0'kn^bT7`0q8ZXnn.aY]?*&RJbaX]/sq+
%En)gu)hmk9p\Q/h#':9OZTI%!):V*@hQaTnCMh_`iMG[4<Yh<b::RpHpd\]T%G>72SW1)h(4t=UGOK&@jid,G6'/C-@:l^7hq?Z^
%dQ2u#>MD+rLSn9adpi!8;*/#iq-%T>r:SJ)`D:$C^24Y.b6O*6m]p"60J1Q9d7HNL=Er\(\QFE/d1,r!UU@Emr1*lSDG[Y^q\9<S
%:b+Ga7;Wt]i4VjGXY_)9n,8Bb_Os/V0(42c2o\JlbCp\0IqcP@YZrApY_T/-!)<sg+Ue+h=l4i$C['DkI1C2`SS>LrrJN4B\G`Pp
%%s?n@&%8qlMsL0\q3P7Y!R7inP^U78l!a;Y^!@^"Q&QU+9J:"Y##,iPr[7-WFFNhN=6f5o$kI0G5(ZK,\bEP@Fcb:%o9.IlaAd,c
%^QNRpLMZ2gf6u;HK4il+Hh*#1".H***fM^/grVcB],)*N]j?KkUJ0R243sA)O+LbRc$hN4ma`3oB)R9m2U=/U[>cJYr8bImhKui/
%2W!3rZoNL&0VnY.Z`e<XW/kS8Ei4EB>,;rU*_%RI3DBLO_$.,WgIl(UllOnE6<T#un0NFY*oH8_d)1-=[;oS0E)\KF/87%I>VH#;
%mZ$3@^O1KTVc]mA6([@JE:+*_/`2!KanNq^0=%d*2g3a2L\"SnWSJ*Z19Y'P^P,6#rUB6EV74!Thseq&8%ZcA1L5@Yh?dC&VN/ah
%_X'L6C7;#TRDk.dlh$1M])D%Gc`h"D?2Fs20P;@1\]o]AGFI4J=hC.\biLeN>=7TCkt<@*Hb%T%iP>GaY%GUU.kGVGDSLF&I(6\&
%'C0s7#1.Ce:?$#l=?Kj$FUD6QNV0&"oo41!QgV&K0'u_3)@#(9h$82tLo]S39)_9FiE)"QUNgj\n3jk].!]L5A7Vdsb^C7`m'F6[
%P-)Hjno?K,=:*'9XMr2!Y1g%im!`(46qTo,Hg\b4$+p9@j1`5r_E9#PbC#V&=lV-8VLRnH\A7*Zh+m+o#I>Ueq=s'P9"o<e/4V+u
%E1>)IVa`lEr/M&\Q,]pRBlOuG\*`!]B/TU55L`p1I.pLHQJOE3d/?#k+uG;'q<Et>\T%?*hBuM+afUQkfe3^r&U)mG52sEHh0ZLH
%_'W^>8`Am\a6Km@_u0BFS+p0?Dk0.Eo%n4BpP7k@FS44e6<O#gF*'qkb8PWOnRA3)AGhRp(P:8W$K(ZR+6`O&3udK]hqZOrSl\-f
%S[\(:RF_sn:GR8%91@4P]k<tNm$V!j%4X%U?lhPTDgpDd#Rt=*]+D/PhiD!UIrPGUIdupQr=A^6g9PP>^Up"cZ*:aR.SlZEY^1;0
%mu/qF\@m'5GQ0L3<h%%m?G!H6coiG7G;ueg@J7magUj"ODsAo8k*'"eB<)<50^B^S=,)0NE6Ho3oP@fod1a(WfA6FLI(WX2n9URG
%^#_pBs5Edk38fPf3D23Rg?6JR5;)9pp7_5\]XDmTb?F[PnVmEaX05:LWeKQS8!DT$@qPG*ioat;SVIa&motk+N8W-T2T_9P;c.J)
%]'l9Q?KL$-]mq4dp<gJEM,`d/HZ[[ThZqY#4d;)+*I`c9YT,la3JTF'l:]`W>l=SK4^Zraq?jMla=haTjcB/N2KI@&G9+P=HRDaA
%ZIt%$,X*1*hG0j$%(;3=R@0Vr_TRqHCi`E)f5"StfP%Ai?#]"eN;'mR.XrFcI8otYG4&_idbn?q_#`d%?Tr!=V`PEoBu;@Je"ZW`
%5PiR$ANeih5a<^X>q6CXK!S/0+QEWPXA9o"O'f@>UkNUJofg,hb[iu1'QY3@HdD.E2E*G.UU*XAQd!?c)fH6F9?$ROB4*a<Qg`_d
%=FD!WD"u9++hKL>VCAI_LO<E]9=q)n@28`ZGa.l6[I*R^-f22mO>l&]Y'oN)Q:5&bd"[JY2;uWcq\sI7&%Vjq5B1%PoBEs2b/W_I
%DeB0@48n?X]j7`&FQfSl\)/tKTnr%qahsesGYia/)LhK#D0KY(m`>!jDZ9HuG!!Hd<%P+(hS&Z<0_3-Um.np?B,#&dh^3>dp5p)g
%204>9SpcZA\:[<Ij+A-#K?!HW!%Dfo5C\*)YB]Bp7dJ?d:B%cN9#ok,5]ZL-&](18`SBu^X%u3II05JFKDS\KYN"C4hl;EOc;*uW
%T%j]Fmg*1ggm6iHD"kqT.kYX=hSB3j"5Mma5$\*h6__3B[h3sq,4"4)U@5J?hN>,9ls")BbZ\P:5<[b'J'ttc8<f6[7,KJT"uanC
%07S)9]Whh^BBA5jYRE=")XbR;rDHT"YsR`!EN<Co4*@!<-+t/%?OnpKrcXFLiPTQ1OZ?_b1C`aN97P_6$`$`>-`bup(<P-[qmR3#
%lk&mVZPc754hn\X+`]cFB+4I?pmP%FX&19pBK>mJkKWHmkN)m^4]elPfnYP*LE@b+A*NNAO"U\qLr@['CsC_EbEdkmLq8C9GRqDo
%*IFh;a6TiKXFn6EmH9Bs[T70m]jU"6@+p,Z5:RWjlOO3mHTe/T5@eN*&2B/+#kf+']uF)#^V'0O&h-Xih;5Gmj:+n+^JMZ3IO7_N
%<i]?lpRYaA5e]J?gL>5MmJ-VYIBr:U\U>2A7P!+<r`r(dJRb-A'TKMEKr(=F9=0I]<\E_4A=MfQj^"=dR#[Z)VWlA)DI^@\>T?_i
%093J*ScD("hfGt._,hC+92F7`K0H%5lNC1J(LAbDJ-GQ0;>&6"]%2#!?H'h9,F97E>MJZ(T+j'[ZZZS)oTeFQMj:b3o?DQ-/R5u=
%:/LC2%Slu`q`1^Dbb:Yp_dV-Lc1jfRP5u!+m.]Q+dW8:f)ogTO2f)c1`/TQJ7fuQZ@a'ckn8`n8K7-Y;pP["M'12EkmQorL1j7P-
%k+.$fYY@+L:6C^F^7EqahOq28Guu/WL2jRsmbU.OpabU`:_hdo84N0L*bOfG9#Z5Uk4;g7H^];Q48i-h%28+%`qjK:9E+%rp"R0i
%o>SbCV\Ml!$QElRhiL=m]j<JDo(OmorJtS:L6%gl]peP1LaADEDmU><hp/ua@1i4jaYr1hCQnt+qp@Jbm+1.(gV8r!S3M#Kg[!&=
%5H=.8mgfe:-9_95>VDC#;YG?8O%i(08b9<t[Q/O"00S1]DWa"tJQD>%kNu=hlVQ-$GJC6O4ef!B9)2jpPof@*CFeP`ZhGR!fBI*4
%ftRJ^]"Il[e1H.Jgc\(1`re5k<pIj52BTrsJK%k*?V]\WdE4O3rAP+PqU%mHa6/23r1_J>.LtNV%#t.Mo\(s(g;=HqLrI'qp4(V[
%p+CFU`]NC&?Z<IDD2Wp/IlHHN`(kf17l%,ZZno_uX6+pWQ1lg+@/V5JYkk<2^AQr$2WHH/@_DS<5f6RUe!%f=IWRhYodc,aPq?Wl
%?9Um7p#H3u64L']okfj,iMX*3]>cds\;q!SmM-*qUK[H`rq$ZiSs9g@rP,p^G!:?'b\!pNa4S4dMk.7FU$OBmg$QbtW`S)*]u1-P
%75spUdKR(;%g]6)IOqRJn5$@`4)8C-"fbpq:GN1Np-\TObL4k[A3hl1osJZI:Y6WJiFC6ZdH]EFr9*@#3s4]t)i2agP!S9k`ire4
%:,aXQq9<+2h$#[O:p9o/;d=R8ol2n%+.!oK>;5,(GC)HH$6.ME*$#``5+<O\qBM5]k8!]48'[?[!P;^kP.$=lY^^8m;#:$*3E(ER
%CUa(]iNiS_r/lJKle(DS0H0lYbM)+(o0%<jrL5$`-7iofOUt:ZN>Dd=`6eN"BnehVrVZ*KS^3.uQCQlPWNa&M&G7V,'.k63$frb^
%BrEubRs0KDKhloFPBX7,Bl22TdnbJ8*1W<V=QTQGq7V"@;PE;OC5;8uZr;7QG<(%8mUD0YrHbX_M<>=T!ZW1p+@CXPIiCrlq/DD.
%+oO$"c5[g5nBD7GX(r.k(fos8[<<p'DKL5l\"^L3S+X*%?<&cCP3IG[cZ$L#lVs@]0QWpse6oQ($Y?u>V0Z7U\:%jVbLC;(+gMsj
%hOQ>-f"c':0"`n"*aZC/=aqN<D%#NQb"H\IrQZD\f*bKRnl*\NkRRp#>=ZI.[_TRTk$i)+c<EtXM^ruLAi!4e0"hdp\*Tf.8DW1q
%lB,MKLNlH%^TQbu?W]^nH-&-u'#2g!);/83p`(=MgQi8Y,sV+;7)'aPE[0r]b[B+I>1j&YMJ[TP,;<C32pc;#l+jTVPR>Vk+Z5^Q
%Pr?b,:+8V-3/0TC<2LO<Q*tX5V;H#+6/$Om.2m)s.@M(!p0+T6V\T!6/\U*o>(PWCbc2WG\c1T1>9ACP5V\AKPM)`1.:c5Z57;Dp
%\9;1MSO=8aK>l\%WH@'s5lOI3L./-s*KsOb(lAmGZI0f1ONJ1T1JKN>#(aFEC;k;DL=op^Ihc!6Hd4!+o4Q*QgD*,JE*8^j]Nl^F
%n2Fu%0B=mXdIl,o1>L4;[fMcpp2gR$Mr'Y>fO)`h"IJjU?//8!q1eTWdGS;o?#W^MMlHI>IfHOns"f=;d_>0#gB*1;i4CU<fes8"
%?SplU(2Yr&2XjYDbj*jkOBi`q:X>!JQ82I/cA40-%Z3`^Jb[BldZ3elB_Bi?BA+djE72J@pnj"WB)m4*5OCEoH4c#>%e[ulJJ7=r
%IOhf%1peLRg9`ap"_lQq/8>O?Jb!ps/^9GkM,]^leQ>(JK8@Mpr30l!eBpno-K0pJ'0MRpl";Toj(E'`VB'&%QD-O:;0^?g%J7,\
%&@<is:_OuUH;T0Q7KL=/0$WNg7#TV2\;KIW/^KT?Y%Q.pSe&nYBi5e8f1]jjn?\-Hh^gFWB[_@`Q55+E9dpJY`2=p`d5+HYWba?U
%=]gSLeEt\AM$;?E':\13/dH&6b#]A)CAUEK7)L-if1l-sMiP68<k^r&aeuh[\V4Xl_bd]qh_obnK_j2\-`)6s4bjQ2TFPXrl#G]A
%*qi1QUB*XL9lML,(ncJ2pITXJg'Km3RVA\e+J;kCK%2WdM=Ae5(53K-"udFl@mEP=B,q')j23R$(Gm-eUbjY4/Hh&-kGW(YY3c;l
%kb*`=1Kl3'd]VP=0np,_V[]IMLoKrY!=`KN:GHP)Z2q<lcP1'W!QQl7_=,0^J-&$jn/-S@%:caW,02JpMJ#;TAo)dEkmci'fkdNZ
%noq8l<1GLK$A92'DrXi:N_P2B'^L,D8iVm![_j@`8.a^eEMdLRn`^E"6lsA+&'/hqcTlll'tAi[Q3GAOO0p_+4\>k;W+CX`ieVL]
%Q&_#K%+1-p%P_d1PhD#S8gE[QL<7Eo5odVW@9"<@R251l:]_*)0Is8(RB@u0mjcp,L\)A0MrR2rDn1P[7)lAS*GqNL++c<lS5Q4@
%.7,M]2'QP^j3tuR[N@2!+tW5[aTK:#H8Vr>4KW7#X9jE]/3?\653h2!7N$Y_9+qaBB^&[r7f]k=<I(JJdqqlPX6Vi4%,*i'9L>X@
%fE7Ri_C+:Z-D;G%&@!!LnH%%7dE&1PkNF^G+D:g#2c>6(KMm*4\k(lg8eJ]*gqXUD+PcRfUI1[lSm[FG*&[Bi*N_.q$=bl303Xkb
%Uktr,(bIEa(XtdU)B.Q@3V3^s<u<B;@s]t`Ee?W%.k,6tYKhfu_8F`.#P+s[G-$LQ!ZTeZ&_55LK77VZ"1<[)\02E#8<XDN%9pc'
%!UUjt7WbDp>QqdX*X9goM),^tQ;]Vs5YOWIC(5u%0r>(#e!+?0,o\(n/n95rP,,ftMsV+iJDCg/ZQA*eG$ojVq#m]"'u`ub.rBB9
%KF6pQ&D&.U%_alJ*9Yu&d:4+Yg(=b7a`+]1C^TN\`"?oNXiQihN^]l8(*/6^*6XV-L-aS6BVqCJQ.Eo?\fe/+jX,Cs4>XiEa6(iM
%pdW=8enRJ\ZKrf-*(PCFeYk_lg+)Si0dIK0Hf0RQjLJG:ih0$'-EM6USWR"[!eHZ5W>=E6R+bRa:?3qMpLr/PhGDO?/7FRA7uRNQ
%8NO4-/<mYS^s<WKnZFUR`+<WNTr0;N+c9#<^i9olPN'D@Su_dI&0`BCTP^nUE<Al(]T1*tfIZ"[0uPe=6SX6PQ6JgiGEfo'(r=Oo
%%6?H]U4hsAH(G13+F+.,M:4>$WbeEpImFJSMM;r2D=r]Q5R`;T^*0C`6g]J&$05[;5n_P=K:mW<aiTo8LL`K404lR-\[n:!nB6GU
%,P:Y:Um\12kbR=4X;[45a/Y8;CZC*o\>QPe#2.*!S*<`_Tdc-+eQ7W!koi-EJ-)GY_I5O!#l-H"[#k[^OPNFJi1n,>YVFP`>9s6Y
%`?Y)/PJpW.d%(Gt3!nsi[5cM5<`io6`^7?tALJ`k.*hCV94TI^g:lQa[)9>2:F<]A)Hl9"eLjFKMA.Z+K0F!gN#+n[2P2VD!o%>e
%"0k=N7>2$OO8TTr+A57jp6HPQ+9jm4M1CW)3Og:g+)bi&Oa2F3C3U69KAt@(Ckj`sUmT%*U&)9L2_C52jTnbgW(a<A6<@&.=\gC/
%B%nB\#cXL)PEk76VG""PTVcW;1MDIXdKR&@k8I030c4;QIdN5!AMKs9O-<>9pd)ls%1eB9cd@,(1Djer[!"[q5^#E3"e0[d7,sAC
%'^%+.AM!Zr>!mp_jl!qIrk"&#,XNWj7>p-WSugEAUSd&Q9D*i^XQ>'(fe=tN'e>FNoWOai_3+g/]J_t<R/A(D^M@7r85HWU;ShVt
%iC.!K2C9]lZO(lL#L#=,4U3V[1hf'_!t+<fMfLqI"(^DcXN/EPrFAeL3U$&0OaV"4j:Q^RJ-Whp;'],6'6kcfIFjVd'*?j@JIK_S
%oGCK(I)ZYh$m`0"Bqn5J8^[R%+N$Gi:Fr_&dT";Zi"f,uND3X?6*F3L4:r<bj&?"-!,Y)cXL%EAT)e%`qQ`rTd"W?Q%&Q\Z>>XIt
%YmK#E?3R$Tj"O2[/hMMf8#!D%d'OVada;"s*hKc%_jB?GW)Y<ZK;OCZdq7"F=;j"NW4_<+QQFn2MI\kY;NUIkKQ@5k>0*;3()UhG
%iuh^`A)5%XC>a+WrTqtFV"0p)8C<E5<0'i$F1DH<(njfAF9)D"ia)#+c(ld"&RZPD^U0&8+[j,G=RXZ4!c?/G2Hmg*AjY2_'8WB8
%!,[(%>;A'd6TKO7Sq7ml_aChSl":h-a[^'N1$PSA:MG)VPQ?,10o0MM(dr+<!I[<CX&?1m>Zd]$7PTfW5]Dae6%i$cgFTXOJ_7'$
%_<rU#Ja^^cQ2GL71)9:L\`JsHM\G`eedR`aK@3'43.RMZ1#\N<LpS>5dZu+'m=Q7hO)7^0X2>H5[YYmJAOgub%)7g4lS71E6pS\p
%To6!ePaTKE4OOP/D55(f]&E1cH'\dELe6#K"<uU-BHd4`(-tSMR/4YdU%/h0[dDh$@hoWB'P5]A\:r3@>_/IkmUR!K!qO6Y'[VL%
%*Un^RJ-#t5j(4u*DhKRZZ\DR''#SGC=V@Enbp*i',VBG\"ieXa^ak(L+rEXB@EZG#4lsknFM_YN3t+ArBVM=+@M]o5+dO*lA-7^J
%+PLh@D<PWY(RHF"d'`3p\dTHZOn+E!^^"D5fq^_oR_XQMDY'==)WHa]5pp,Q&C/bU!VJR`!pp[nE6mN<-3A6"',b@q5M,?0#"f0=
%[R?e$JG("#JT$bJLEBfT"ZTh=R"?__,<Y1[C$bu&)W>;54E$HANj?u5/j%477i?J4?QW_VUEUn*gIG$ejp9"t2'I\6Zhu/Gn4b=O
%VC;q>SQpj%elZ2s2CQ0Ai0]1%"&5r![-*@s5fHI+lhJo(+?9&#`3Qc-hLYD5CCWJYPpSHkW5/QFZKXm1\g(!#"H@N(Jt!?H%biRK
%ZIg'8D`&#/QQmhjXOTiU9n<*"kB.2BoKLnB)t=[u9"6?u"+^GZb\i2\0cuAU1Yn'0M1j:9W^+$qr3s_,>Q3@hpOWPr/l-.IIUINl
%1,ObtOq4`1>U%)g4SBRY*ODDU0^07h5'LOdaiEBRC'hqWJYDW=XS?M"Ua>TgEn#fJ`aQ4-!LQ=fR)5jt6uWF"$"85G"8=Cs66\@#
%\0NS0W0)aq##+M$NY=_Ip*$#01(tP:KIg;jYnTho;UgP%PPP=;(8E,O:nZRifJ\p,Um<I$5&0^P-3M]K/WYQ04=q,[1)(F(Zp\CC
%E8fpN6CA$k'qR_$k^h&Q2aSN()A!Sd<uMLb<;JW0@8UIN>sd>aF.qj'&HQMtnJVqXKY]7C3-!(lSUBoHQFm6$+=YAMT2fP.Aj_JB
%4<oCN#=@5j=c!B3VW9uF]C-=H"K(ml.RIGX%RMq3/;Sfk7%";kfW.GaRhP;B:a>L$2\eU@@D2g#3rF+$:l1HWOJF6X;Bq`_.?,Td
%*$cMs&TJ*48EV,OJuFA7T3E-?V8\HaF**lPk9r4_L?LGC!ptbH!f(nS39=NMk/8^E/C>##qunq+Q;F`ZI'#=G0(U>L6&1jQOU.rK
%VH=O`_cda:-JAXKg]<uiDD`D2#V8GoC9`3&!&cC73jLg"9#]M=$'U'dJ_0sZ;k=U6CKcc0DZm+Fn;]7,i3$OU_GLX\MK$OU$odJ4
%NR;$A<SSEKGXPbr;6!,#mo]PdB3IgWG7)@ZpN(&^+9l:C`?d:YME4q'9_%L`0OpVPR1;=+#E>s?KX;6p=FSPcJ/*EK$s4GnA6%"O
%9Fn:$;N1a2*gCP^4H50`.FX8/r;R%00jEcU7/)(0JP9eJ9UiR<NCGJLeVsSh%p9F'r#NR4+[JDUnN[R@-H7C,%c9$e/D)TE^sZ\V
%b:SO;&p#@^17/HrSg"[0C-"_h72gT9D#j-<cQiMqV$%7AY?R5?N^t([!;(CYSA,)LV78$aOLYBfaRE&Z/]'Aq4L!Md8q=`=KYhWs
%3oR@MHj5unaWu%(g5Scr[Y*Q9dKlBm?jE\Xc;=tC@G2O8&_@ka9YE)edr(hj5tqDj@ESj,`1d?i@h)PW1I`Qq$0*eKkei&p)^?F%
%;qe/31+P0>lkaRXU/lgJE_P+N/oLkJ00fk@$^@L[*%o_BBR0mC"6lCfW47uS5]"W-h6;I?7)7fNj)$V]pqSiq&9qMIPhq0de@#f8
%R;R,2Cj\MOMI5+gT^[1c_mK(F%d);"'a\7oLi,9u\J4fW@Tk[[OeW%7GqK;FW67XO@b_6RT1c5e=K#0!JTM'ZXTmMo?,3mV]2=bm
%eLY5q=<b!-!4@5$XT=YR1b%!JnLR1nct'X;&n0:Z:@D?6HhAY?G@MqbGQ_\+-A4q6P(.Z'a?O9f-DFTX'LcO[RG\/!:<rJc!qAU@
%:nt_!-5+=Y+?m1E>bj4^r2@po90k)^6e>Cj:lu@Ba;?cHHaO#M8J;G5PpQO40afuGASiEl(e(4!*2YV9WWojrZ66f1Qp2r[E$n/r
%#O,*<f1RZYXU)</S-^H''9^Un3pKkb1!.GbZP"oFR#/Vf_3V]o(*QUSj)&[2E'c9(?p=WUl%<jnf`6Z22"@Mrd>s7p*:+;tDnD&'
%YPUqn<o+Kj&E(+YO?EUQ(R>]KQj8,.aa$rk71%nM^pMT.\;]&_@8>rNS67ZpGV!YR*Ao9M.m`f`pd1&OUKB*&i=pm7Wo/,6?^(Un
%a.rhR7ucKV;A(lAThh0Ec*3#+0S,?<TKUVS#]-;q+VG_k<Zqe=GsW##7Sp"I$qCZ%_bI49YQrHC65tH7lSpr\=Q5:5iYYj[B*tHG
%#L_nRHcOJ/D"F=An81=YWLJ_=`9u^jZ;nls7ukR(H*AGP11F?R$tqE7E6o20IaeNhOkS*cH*Y>DMHI^f3!tQZf4EEdOPGN&^lLNq
%r,JbdAg*VA$dR=2hh^8ZF+*T"\qnXgq[0IlC-a0W4L3`djps<e%PItA'K2eLlkMt^@1i?jeu]BOn3T3;OD"b/6Ydh2EO<p@L<G,;
%Jm0g@FY(&ld%lnD@T8U>6U0l[nY`I\NTh99gmEB?J2TC1,ERoub<hDDX>Ffm]#iAQBXG>tHV*2f#Y83p8boYlVC6m=cUk<;9VMef
%\p@](IgBgf56A?s@;=I<-Y@?DIQ;``4IJo?jqoEMDarFPcdeciM>qLY;*]4G=jLRo#4gC(=@Nrq#>N)G<*`8,#/augYp)%4Xhp[f
%pJDJ9BJM/6SK>jYd^16N,sL9Vce:\70sEfdf(Rdg6^*3kje_`u#49`p=j32=$K".2Jp7[uY2^I`9uidP5t7n&*0:k"3uX-D=l9B&
%\B/b"42hOh*%7rre>059Q"u<DKb5<g"eEJ=Nc/uPKq>\Wn.=t>p#+*u2CPhUOi7=>.4:KNW2Vq^A@MWA_9lKt)0h=J_5QTkoTepj
%NDL;V&p?'^h*@kC=rY2V4[HfC]ME8t`VE;(g7ntf^uIRc3kuH"/Ahkr=]]DV14/)tM$:Am\<T_qI)OGs*#miU?CpXl`(H+EM2WRO
%!E1op3_e(So7QdfG(\!\0PFJrGS2+4(i"%5jn).H&g-Zmih,Ru5q?mp9cg@t3(Xe:;>dLTB_Y`TA`6OI)GMJq@TK4D>E&T4*MfqI
%?`[j!W]nEqcr!XZ,EUpgpS>,H7Q%l#Xo2MO#\3MHGl<fH!CX`'(i9m6"R\T,cup.A0:;7Hpj.<\M2r1,#((E!+$2$SkTlZ`N+`GG
%YJX'm$YE^!r'<FsD3rmE$AiMd1YFYgL299hA8Z0PK#C#Yc!!d4OWqJjj>hpY4uOV<?&g0g)a4j9@tqte)_RZXb)atd$r3`D-(ZfY
%@oijm"n4ULfYKr=_%4<j0"YM"iaX=D_]=,7h^*+XAon##WJWCH7C@<sVA%:+M.d"#5o$l]@1bd"EsiVDHmI^Xl\"\uK;3"<M!t_'
%!%gRnf^/2qhO]L!!UP-a[\\\g\%(iW=1/LK98i@X*AP>6\qVrZ"<B3r@uT)\<puu4*,e6c=kc--Up_@m<lI%$gX5e+=Q94%3?lWs
%!Ku[q$7uUeXtRM8Ut5&#&0F9>IfSXBHUV1Vl]g(ji>Cp^Tgj!OJ1kKedbkb3i?/4jYIMQVSB*^DO>44I^<=RA/m'rl&5%d\`fgV\
%.sC0n'BQHdj$KoI'GDPJQ4*8\KlDq`6nN$3qP$Fo2(HTbg\&4X"bDV_"F8M9p"d^TY#4'GG\l/]L`1An(L[U>4^1/43DlQ0*7Y$q
%Orj-YJ--EO&.)ga[PW;oHLGV<Ld9l`14?S:WC8gdq\(o4Cu*/%7*u?tApcPk:4k6RN&G.j^8>;](FQ2YA?R+_Zn5[io>_U2GJT-g
%X5ktp5dgeH5=.;14DTWD*l<0G3;<QA.h"o6%9)6ZL(_`)EN*lH4WIrkO':-i7ek;o(I[%*_uo#7J]YWr+@)5KY+#S9l]jU:P8-aa
%"Bh</fn$4)+shZ0_D6O_:*?.nb,#a+ZG:XVan5C<Lrla78g2<l2>JS\alulIUBtR@l;U8;B3]Ha(^2mdM,5?J8,<E;![uikOou5i
%)<dS]7!]:$*4Rn<=f.e.!L_p"J9):#SX-@LA^$H^D-u196pssBG;a9Q!'^r`.`mY=i'bWmYfr7idG'7O&4$"KLG6QATM`XDe.n_X
%H9'&o>r8d[+?l#o*(41j^!%(7\TWLB(bu+p1\EliN4_`TDJjK/qdh]0C.r=M%.jY"G?I@fC1lKP$;s,oSabWcDJq0k1Z7eZH9ok>
%"aeI5/'`h5M:8am<c^i+\kXC":3]#^&ZMNljHGUj1]Xu@3"Zc^g6e-U>:\.+[/!kk)V^qsF,JS)Huk<HilW0[%^6X-$02Yb[Wp*&
%;jNFU'A%sp(uXtE95;<i$U\nI;)a4sG)g-[&\OFQg+!^_HsGc!-r9C88[S$T(-*OuSfs@'g3QL"aHBYqcSt(gS0pVK'gQX\!04]4
%_Z`EeVEj$0ia#qB)'LondNe0G9483a(1lLR+*PVbK7nFVl3BN]k8THfs.LY4WL1"P]#fYI&pZsLcIYp&FQ6LLh$7aZ+L;=p%:!<M
%,_6>k!UrAtDpesaZm<t.=sR#rG(EJj5sg2#)))Zud6K<)H<?]#-4_!"3OuBXMg#E;&nDi&O)N<_5*7%bPN2?/[0t#5KLW4mln,X9
%'cN"XO0f\:`kfkcEKf=_A\d?ep^nO.2Saj)$02;Jl'iNe/K8*5g?+>CNaF!+"M(ClfePO/:Al/;K&[(;`YI&3%#ZR_ZD@jDq=M#c
%h(UiObi+]bUl2#shpmqC9NQdg5Pd'J-++GfGM%nkUk:`u?s(Q]WqSL>kAV*(31TS4dSS&l;60jjcUpA[\O%tm'&"dm"#5u76[L#d
%^9EZU'Dk%1$F(F)"gT^NZbUB:!)bm8ffQ@4+e[BUfX47bZid]K9m4<n5kcOV;481\Md43$bs7jH;AAQ\_k\tbbefW!+:Ah99-JAs
%#peI3\#i%(lPht#n<!]S,kB22MbR13q71etNmFX4K3Se'*0A>e=6)du^ALK#chCO$_nlJmi(fRQF`LIM;<@&t%hbegOnR2eFgS]9
%7eELu0\md"#E$XV$=ndVEs+OP>9Ub=;i8QKCdG\\=8JT\GoTW#D)&O*R3gM!9Q.H/(s<n2H]Eb0A6KcjU-Nt<bli]UWMHo:IYp,?
%O:8]e?+KAd)_t-\,/\,2!/GNj%b+)V2ji<HQO.gS!k(:5k&I^K)GKT,RKH8OdL'9jH4'o#2ZfOdBE\TX%"YSW&eWpl6s1u&Eu&-2
%#'L0)pc+@:?mtt%cbo%<_;TK@l13g,(nLAu$@fd=AiatiN[-(>BYM;An]4H0VhECC7/.Q:X0Qun4K*8R#JeKoUO>liOd<rP^g27m
%/2lP0aJ=I=3Id&ucO<2DZOH\-3MK@/=jHADd^S.B's66?XtqT^/C.j>$:_kn3'?Nd)MJj$^;?uY(R*ku>!<T9FS&I5\T(IX6a@EZ
%`&>+?@j<-"p7#d&?3&Hs77@1ejoqe'oV8Oj7p*-]s,*mkjHID%THrQ`'FD==`Y%n-@XqnQ)m;f\EMUu@q5,)KMip?cZ5]DoMENDY
%AW0gtqB@a(@YPUI5&;P3P9lo#egE#ZrMEgs*]QHrGF-hqBaTG^nhrC*!Y9NTGuA(e&EO&9h7G`daH;U263)<oW@PMXe3l26@Q"7g
%!3KTf:38Hlem4jHlah%j"2>:@YJWhu*8BnqVlr&39'7sTW)pe3KI@k.(FNO.,R2+`=[IGC<a_$J`6TSk2\7:Wob]/Kg_MXXa2q_3
%8009gS.X.%Xp&EB\.aq?"9PTZA]@*Nj*Z+a8YJaHR#jGq#UMQ?[0!>jMgBs8;ur5b6X*`?qht.<79$)@+MA?C#;>T=?k1I1Sh8m3
%OJDU-*[29e%<Hd3(OH3,F"#"TWL`!<VA>^\F(o/nM%g7-5NUYU&9k:ZT>gg!h0W1N35sFs51]eVeQRNVO@O*mVP'`'_rJpA>5^uZ
%jI@Aeb4(epaBY$%XAZU?+7pf=qE&`C0`2)PjT#+S<gq[C@<)\pb<0&.LBur:!G8,N/"N]#oG>K`#BQU^!T01M6lSTj%1Hu"77s!W
%8L_m*m97[k1bDiQ3&hd,-@FSk7\5O[Gr^G_OK?i6KP3M][!T#FE>obj.MbN.6/?oe'c=bF&X&9X#RrLB.g!dVL3o;QChAbM&nU$e
%k+n?"UR;[i4=_),&l)nFVtiBaaCs]pn7hu@%#tk.>TfhD)FCFEXC5lT5e%GsVN*i<Xg&SX$$9?n,kAJUK[>p`=QBPi='-BqJ!^sb
%We!(*4@A]d+*S4N89I9/'U'2<7D\SXD!c7_#=GHD6%hSr6hlVN(^^[:%k]2mD^.69)mV._rj_/f%Pqe3?9T#u=p&:_UWIR'2j_h3
%cjNm[%U:X<2\>mnL+k'8T'aTJ3c+/XUP0=Cii-NXVd:u0LM7c[^W>,O3CJBS?HEk2>032"5%!r*V5]4b5ds#QZ]O"c\qjp4N>-ZT
%i"BoAR.>[Q+M#@@/#jTa8e>u17gEu7pjI]R^659j?aMnS:EHDqE%AF)2p$aqDM#G%s.o&J.&!Ef$TgrdJ/V_-9FBSFoFq=(eKbnA
%jmsD<iTRX.%YiU?AjA*dBC-k@B-Y4pI$<&gNmq/:;+pnRLD5*l:5c?t7s#A$![L>;KE;:obo$flgO)XrCBFhN#<MPnE/k7q#!A_\
%Z#04&fq:FKrAGpGUSC,+Lhjr<,kaTPm-D<%_e-/6U,`*fea?f0]]2+AUY>UDL*(=?N1(/0L;au;K]2[eI//?sXSP1A#a2tGm6'/a
%ntHsWo\)&_#I&C4*Z&I9U;e4:9@t:d[Y.'%%HT;87>VH-PnGPHOo;hXekrZ5Y]`Ns&tqQM/.gt\ECBaG>??aa7'+]*FC:VP,%<9\
%%j5Qi=D1j'^(k%fHH?FXEmc3m/JjX[YW8N_XOP$f!*VK%:`gr^N`LogI'`/K:h0W%@U05/45k7E,r+_9"*/SWXCXd?%62<e;!IYA
%OKuu&Ef0pA*.1E2WBl''W>SH4cj$d\S3U=c87d@m`cT2&d=+@J5rDC#LmHmphIM6`YY=[c_*+pCLk?$NOMN3Mm\*p6BXJDpLI!Kc
%BT]L6G>mL(;Cq-k@;mrk0SX/Y0\1IQ4NaQlG^2EtNtDjV+s^LG`!E2!d5=\=?'L$t!]+/gNX4P[+[&ShO,3`OjWIlf(tCN61m3+.
%,t>k1;1ur(9G^^0(^4`7VDbI&NTtr^lJ\Z[)5D#f/#=uCl\L97Y6i7JbV=ut]E0.LW5kq0(Ua6>gE>'tLpo2n=sP=^9>#*T@g'c=
%9(=giW::U4U5cG>id=$H*htH]V%F5;N1VSKg)+%8e09m]>Xo4X(b9ii\NF>%a4T6YN:]t_IamG>FUX4R%n8\j@pBV@5)U9(`Y]N5
%W37JdUCum;)0+!@pi+54HUb\80tsE&5,Jp!e;2!lhQ[gY!?6$B`I$'']l#R=\TfK.N41I[-TK+k39k(6nO8IX>/keG7t%&83e***
%&7[taYr"pEOuU?*hSQO+&GVuCGmG#a2HN5X\6=bofUTt$)dlm5[8WABBSYX0SFbrcEZa9eT!!E*W.tdMUi>NWYjWM/9ZFltQb`c7
%VfS<.Usq-SJMd1'F<0-Z>r[.rCJ)[QJNk8_dZr(PVLYl0=F;!lGHFnI7`.)k;5nP7P08X_!OAQ#:e$u?K6/qt?cS:'g`kP%l&:q+
%j&QZ.2H%g?:/un#@N\!rr%`ngAN1MAV3_3G/KK2t/*5CcMo.m>#>mBld(ah.,D^$pA7m&&2is&II@?pI*o!>AM`n0E.8tm1qO(f@
%0\1<f\<<X6\PA2i-"q<U+lM(Oj[=sPNlsnt$i9TCBAASj=O,cd<,c'Y>om%@MoaSQNbI9\4.MRN8"$a&@Vji76h38cP;1DTF?#:Z
%g,WdLgrj.)f&k[2Q97h0q=:Ul&b&nBlk+iK*3C2'nr6"X+SMU)K-;e"o0Xfr$&nt"Je""U9?S'u!bD15/t_J:7h<*\RL;frUr@uj
%$su=D((MfO)&gD40TMGD!Nq256Si:Ogh6=,(gm]La:Pe,Hqu3'f1fAJ_:@4n"uGnHT%j=qch]Qce`_h%)jW@Q+3c;*$l:'b>Jh$&
%6Zd1%J@!0NOK?AX2?Ur?/u/hT%<c?@Y/LO@;ftCmXqn1+_u:>aoEb()HT(=I$@P"`6"p3&%*4cq!FOJ5R<][5WuM[s0gd]B3>P]"
%,9?pOQ`OVUP0uhae$]s#/[[WY*:W!YTuBl,\/3M&L]J.HQFZBO*ZL_)\"]/3'&gZu3"p8OS("IcA/Mo"6)J5#)I\bUobfLtH,EOX
%h#OG7,[k3YS53\2H_j.@&s38ll[u@^>MpY@7I-,\$ouMMeJ"=9,eO.F[6;aFZ:7[:dG#</XFaTbPT"ChdeVEG$FkuZ!6'&"*>0)o
%Hr7D8ZD(hb(11)"KEG:;q`SPVSof'nnT@K[B;EH\?X75?:OKsBe[[YNcC=J00\g?NH4`4j-)$Imod6UUb0t[CM<ig0AO?e>)k8o9
%@L05d?PH6G[=a%*L=?Ds.2U'Glu:lT`EQ,WWupZVV/[6u[!A!$?QYBqYiYorV:ZE3GR/D=dWN*l,a(:led:9RYs!B`0ccqhdtq+<
%>ET\WeSm6.8LI@^j's4N(9qDd46?2PChq#FiB"!AjIZ265@sSY'^):B.1Bh[>m)V!@3S'6P?AGf*C%V1Cl4./orORV\./3;:<,:R
%BoOe,M^74"1QmeH7;'.jZ;Qk8&od7Z]I^3fTWn/eids=+9&C!6U_96_@qu/Il*)kmJ4ugSglWMZ;IA52hAX1EU95]YKI(22;0iIk
%'uqR#`Ztr3U_LhFeA^S,`FS2OVXgE5!@IngrYFob5Z&hu`"pqcU0u$/`28n)W0fE@pjB*h`2f9tX>,!*UBt:IBjpQ-A#"lm1$NBA
%H##,@DD>jEA+J_N'C0,Un)Es2@M8NHdf.8I#EC,D`hXQnk9\+n0ZKnK`hu20Q)"j%(M1WHbE]J;?CiSt[M;ps.&.bF.Om=PJbt7t
%@Ho:H*7^EJ7rpOX'0=/ZI`>oS`oN9]g16gQW6Ss=7\GgsU+ok4ZK3=o'!mif0pqQnmdS'k,E!aXaORK(-jV;sYf1->M1H%l'->hT
%TjV=);PqSK<e--B-b:UtK-4DYLJZfiMDFZ/"Zi*h(o(;0@:H15a*o7chgqOQn^t@#@rbRpjs4V\ZkZ@\ds%TI+.(7)Ou?BCqnX!]
%W3b]"Y[W:_eSI6U4<6eB5>PK!R+SZd.6g<?;YF"FiJ8h(1@Xs5\]B[GMq*I5'jj(,*G%^e\Xl%kQ]<;`pia#0Qi05^nkr'd:!pXe
%gq)&/HVeJ!iIYNnC$7QnAOsX!f4#NrWYXQ&,p"p@ff7]#MnQt=aAQS@=`XIrmg[@H^a=5NFY#XH(.C!+!;A;k%?rJ1jDuaMdu;d2
%P_29SN2K,;10H?mJQuteb0jC&!:1PE]7L6iHfkBN`E*Lf(W/u;)f8-!ESSuuEmnigDkQaZTE.Zh\<*_an*+&$W=iP("Q!\d])"&4
%m3rE#9B:g5A1%5,`6dI'f!iP5?*quL3-3B/lTuZFK7s[T^6C>1CKuac;!?*Mj[oSUViJVJjqLq-S@P5aj`<jH^1N>0YU&^T'SQ4V
%OsV[C9#5Ro:D2E(\<.5[a>Q"!M.aBQ*20aa:2@:k9NHUe>0_3O3D^.lO^X_#Yb_JoM0rg]Jo.GM<cn9!^p)dt'fWj9+01aF@/OI7
%Y(MH,[c"'KX/pOrK>))=_&<U?g7l<jC)],`%b-s\jHAU[KiprK(**LTUSAL4RYjb2('6a[Et1ODFRHLOZDr.MkWQ)o-hd@Z1:KU5
%,Q^4E#<IC:KZFp.%c>iG'>CciF./3tM3sW*bHs5mTQD2I;VhDP@C#bPA"oQbIa[>`IaDgLeG85U,aa<C"=Vr(TZbGEI:8t&+2t?P
%hBP!-E3m]!J%<)OOSqk+Bq'??N)Wh7`-*<@[$g^NhQi30(EneF*j'@c,(O6oI*YJfYVH<CC2!;8_OIb=3aOZ-Ef2:%POo\4F;[/Z
%2u%:5Je3fTkO;[]!#a(D/36]^^mg./`XptPjp.^9nPrSQCS4!L\fMZT6.KdI.\eu!+PV8qab+D?IK7;FUrnE@Dlbr(<3R4,VK'OF
%d'gL=WN.NNnbk<qi"n'Q8UI&Y$,jA(^',$7fRk&qdl2ShK=7&Mf4C55?/s<.n>HlBe*uJ)TRi#Xi'L\bK^YlDW8L/-'u[g2QUOL.
%q8,^NIJKHfqVcTFQj^/c=,'(:5mnhV-??hsk/e!;/?WJ/\)Ra6'L->HOY:E)"SN\p(W.Oh=_[6ea.Q!T1<!^.%!oo<E=B:^fWmBP
%ZLBUV)hlNOHRSAI)mJR([.q`K$SNH3j92t%$B4XT^(qPY7\\E$M%Xf%\LRn3aJF;%Dauf6,OS!\)T-a=n`PgX4GMP0b(NX>&LUuG
%"Au89M@jWDnh3I/`ei/h\]\#2?`%BN.G5`-b?)e'PC6<6/9oAu#R$=bE7#ZdJug[:(Eu2+Hm,j6Ed9ZAEeDhM"4UrD[NnA#Ve+m[
%UHH<$abm7:186c=8J_ck<FOs-")0h9lgk0R(C>,T+^-LbRH#VLi8L1+iKF+HEe+I".^XdfpjA&9!G`&D%guCo*'"L%.Yh2$L:4%#
%\s/o-[2BFU(36N:E&6U$>2<*_+^2D:-kTDi=2^8LY%jbTBZ516Y[__1>`?Sm)*^P)75C#!8qMg$i`Y8G-d2obhU]4r-58Ts67!GC
%:`:JgCd]ci&skXDaLL.T$.Ij=A1"8bfTEsmU)Yr/oHS6c\5N1DQ.PC'>$H#r/CnM=#U)="!tAk\J)r"4QSF6ZJC->#&%@QclsYjM
%0qs`IW%@JMc%lidW[Pi%<'OCT\t&-ks/4j83(<;jZuO-1pkf@SVtp$Jnhs3f1C6.mfU%V6AZ5M8YFs-#,q_eb^a&'Jlk(n%&<k5d
%POXr=`3aOM$?'eA\/mu+8F;#te!2jF_)j!uXn\bSI!^8$M0a_i1&@UG#kBK"[V9b>A/>CYpr]tnD3jp-d92[#JlgOaGKHK]L$%'R
%.rS"2Be;fG3<$Gu3S+Ps93D`@7(7]7\0_W&*+B"#Lt0mko(H+<?\t?,\ro)ZW_D2^6u=?:dGU5mp)0XD]J"E!fZ2">Uk"B]H-ft%
%p@'4;$lA8q<(ob'(GWfMHC^hS>eu-&"/cUFj!^&'Jp1A5L[&n8"0E8O.<nntSqG>)NCZ86pJtO4T9b11+S^WB?c3OWZ$AM")?pT0
%3Xq/pluk`F0YE^,RUAq=#pVcSEKOj4'FAm3%)eVuW@ie6B^B1p[$"-a;c49CB5OK_&W#ST&E@C`aU4146js6[j5DE?^EOtD*(f9L
%fdY"m\Y/3)$,irnN?>:D1YEBg\**<^I(]I^)$?DZ-!D@a&o\80HsPfUXDjbp:1iMV(9[)gfUPEgA5ch>A+#:Y%5'K_OUXg-?ZCM?
%AN9J8<_*_^=,?);s+ZRn$t:lA+KFX>lZ=IQKQBT^ZK4f;m"=5"-P37@@Q%&[PS@^r>ur=d,i\f2O+[fE.b:LWm7>j!,P+FI]FHGh
%VBJCOEg"eL\F(Db)W6E]%hcX6NcR]6EoGJd-!_"2CHj\gMJSh>lQBR?."$#R+J?hp!_%5Zcdo@2$]2MVSII+2aq1=knTnt)6qJbM
%i=pn@R2;ba\\@Os'dGbQl4dialj:Cq.>aL<Ns&Da*#[Xsj#qDS.k6Zii,UtL.F;m]1kI+m93]QXU&G0$5oK?<+_ht(om'Pp,G9qO
%mXcdM'pi6/]L7['=Vd@_5^=:fl,=\N?#ZoG\B)VgHBIt$A3o_2b>U`,8r/QZA'(3FfGp'K1cS@@,E[\V=SG]eO<hnQ`7>o:!eILC
%McSrD7Rm>=e5<P3i?3H2)'3=s,P?I"/:.],5pJ0Z0"h>b(Mj?L+ZP=""l:mO</AEbSG<UPC'pQj4dAp5$dNZY_BIT;esG?&1I9FH
%oH&A&\A4kJ#>lb"R'//N3058E)S-P/.e5rji(MR/+JP6rC[%nCW+Ei!N(W7UFH2<#76hPDid;f-[;_BflmDUUfqE9IQ[a'j0P6^)
%;%@r'V8-p.b4pN?SFccK4*)H9Re/Z<!q[SWPQ^V$p;JYQm:mp#jf2&?pG8F_hRG_tR7.D2,r)2O?hDUc/Mc<kcB:LkS@28]f$;[G
%[b[lR,GsED+Ajda/M`/4'B"@D-R%df8=6!0#;Z3<R^l<e;T#Vt;")rc&Js6'UMm6@7b4H(]L9$K[V[Y5QFEh%>dlSrMP<_^g)12n
%4>8d")=`PhEQZdVPF%=;<-,0?q4DOk>mj5a:6gsLV?;KdJ<s%Ii>GV\HFd2No^o5#'VG5R3\EsU!CT37<t"nKp>!``.d^Tj\LmTK
%e[!gg[-eW[l>hp[ErT]Q2iUKH4)/sXeT7P+%":V]BAk[&X'sCE[1u(*E2f7jd7fp&bP16&KcpuUWjLeE?i$ajClZk=3Z<b]aW=._
%X8&?3?1uI??6.HF0nds7XAX5t&dkiS9<niKekM^4>.4j(FGA;#&0F2"L"q1Nk<SoJZPm\gjsFATiF;oLb43g\.]85FV"eQ*WSTd"
%qp8X,p/+.;]C#4,H8J!CJgbrOoE>)_%"oV/LNX0hmo!u7`onu)")"`LqHXb6QR[qd3J,,t*Wf8U[bmEfKj*u,ZU=o$=aOgbWWGJh
%,=a#mMg3dJ3?%7ZKXQQl0,cmG,6ei:eG*%VZ7^8dNUf5J.*WUWUf>er`Es:RjNAY)SE9Z$8MGZ'>@G^:.";X3A`TQBa#]_(1f\/L
%Zq'-@nr-@Cqi-=sS')@N4^Zq0Hu'3k'Rhl\IJhY&1(%%.PMKQc3r@DTE!]sh*)pXn")EYlS<uuWmQf'f:8P/hGA[0bnrekQ?3OVh
%g7#34o<M7r[ud-=Ahtoii]'K86U=b=iDr-tf&`5(690hdN-A4m_dk#g$U*>h./Mm-/7j4$<_/-NlLK`_+f?4h4b\WW>e=Ks'q7ml
%(&>>2Sg_j@=^C6C(aZteP)?#&Z]BK&B[.?#;$-\U1+'s(mX28K0&I"bnX/H2eAKZg\\_0`ept)?W"FH4^'I'W;K?QQ:3u;%_O/E/
%G(fifYsMW\U1NZlTNl61lU`"G#AjoD4W/rVJ5K>TTsgLm3O"&\)iF")^=Vam[bd]Y$5ubC5=h3sB9gHEA8D]Q>t`Tk&j,sk(00Ue
%]W>WO$l2j7C5PQ,oQm<um<@i>dpWfVPuest@GHpp?8/G/Z=Mm1]!*'j$^9,%+h;>9Wi-28adQGA$40D('$%_$i+Q,RA2'g^X9'BX
%">r#V`&slnf<KI_#j=&87RMXG"C_p8Wlr-$6Xq#ZX&4Es,iT0Z9LIn]Meu"D6i^8O`I_U,GdK.F4f".1Tked36ZI_+@npT0f,i<d
%qg#T!5k\"tiTBCLmJrKbA'FP3LS1H%aq7C+@_9TU7tsds-Z=AhcrZIC0QA^o<7F7sd^s==q'<>gbsT%_<J"sV[^QgeN$<9bUXpj1
%#:"fMk(%Lah(mB4d(]u0.W(GFRoWcd`FQ6BUg>n=:dppO^@>BZ9!Tl:QYS`g[)\]9luToUHX%:S6QMjI>@?d/a%E4^,1243T2InY
%$6t]pda6"JMP2YoL5nt'oaQ'64rLK@P19Von\Y^jd6lq&boOjM^NbKG1s24bo]&qsk0@M__$_aC1G;nnpX:e)8ul/l"VN:P@0TuB
%o4`Ve2?okR*aVP:Z:(Es[&37_Fa]f<L1YM#Wld'B6g#ERYTTZH;IP:e!sdJp-Y\"/lm9\n?SeCaNhnMu8]B8_D[:'&D<iLYR)i+m
%rcZ]flZ$7LN][O,Q2f\s`<]3L+5dg=AA3?h3uVJ)o[P`Fr1W(&V_onj"4K@J,I2Q-PS-t]$E73mq0,_Hq%58sYaN^#QV5TW'*Y)W
%BS1@Xg"4)'Dq^S+'8e/YLnMb$Op4k9"'XBQl:d^n3pZ63f6oK&dBJe3Qm*/;Xa5`m)(P0)A:`0aVf^<jDe=5CLZG3Ub]iR$b.ZAA
%^+@Z.2+i5E5L_X;8c^Uh9E.,$AF)i0WMJ5q`C2bW1[Q%#<B&9"<gX'Nb3-iNrN+AVf%%0i[e>g.$Ah7V1C^24YpGD)i<8qYTrg?t
%6faK#i$uiaW3pf/D;n<92#15WYTBfA`>p2t1DEhoH1]>4TFW'L]S>DuN9Q1mfO"n(>mDKVS6[pdB!3`p*jBD)_XH\ICpb`R6`024
%83/SmXg.YT<BC4]`5:Q9'YpWu4W*,1=3U\R\]&AfUifCO!(=?RB2K7@/ne#%(u98Q!ksfBX_<#BlX<$9q:$aq>APr-5b="$no=1@
%ed95DA=oh]Me*'RgBu-HSi@El>af5C:8RneLM%NXq9+Z'+\r1R+f'0(9r\^VL3b\I;(.>@l8/F.Z7ZZq1D23\=8O>:6a,*4d<Y.>
%El#i!J?5;jQK;k4%OF5qP@dY,I)j[^e_\N:1t8");p,cDUeZ[W#\b=H*;d?RQc?#?#j6&t:lE#TE1[>@Et(R@Lpd\eA\"qVN*83Q
%H6YNA+(J@pMLe.QW">r;*:Y'N[Xgr.*)bt8*D-!0'hC6RG1\U)=><dDX2mc12lW:_;[0,f&eq#ep0e]5TmAS!er*B\@k,eA;p1dF
%#<NY`]bs2cjO_c&Y=#?mV@%TOC@pTM=nCp%%tLA5pEnm'GAh\]h64F2cL]O6ogD0o^8T/R&qM)>,1&_W1mYT1EQTKUd28^&<I2WJ
%;sb+?_4aGnLKcnJAh/ueX_<>CKp%.\nLBMIhn9V1D2!Z%s7Nk+Cgs`7G`EbHgj7<3r\)?*eQe7P(^J<<h@=%ebu=?;V]i))`&K"(
%J`r"E0MPNg)/7"'9,8YsO2?a7>h6!YqO84bV,]_W6^(8qf5!I0A[9B:=eV;ESZ["!DOB4E0+c!5e\8#C:sC*V@de[0d/P/7/<G[D
%)9=)&L^FmLCcq7*Ni#&hMK+nG`;1(5K'G8/!EE!C+F,ZO@>;i2LtH`>7,e!,J-bXk*eQ%J[NGQVF"+i/;u]*&JQ^3sZ/sA(41PZ%
%5k7K(C.]AYrdJ^cL]^2gn2bKj.nU6bO/`PK'Wq0bVO^K7F+dDcaZ'tm@%K[MP$[2L:-l-H9BI06PN<\bqqS'!ceq\Q?7EqaJ3JL]
%p?TC`qp<E4lM(;*'>?>`+8[!QI?95%a`C[?ifp9:30r3Lm\ep>;7oH;KWr>c(KdR=_5X/1j8)d&0CH?9RKA<J0^QDLo=ZLL<4RH/
%EBi!j+"HF!V=f0Era)OQ0'GN!rh'#h:ORnOG/M!@n^tL!k]/fZ6CsYn\*hC+&*CE*o?c$5B`1%NL`ZC`&)F,G[a\7UlClDofFGO&
%c(95s&'OOmo)5f6J$U)9YXm6!052tOaA+GUB`QHs=uK7';I]3j_SUDiU'.;.G04A)[1.X3%N_lAIX*U7FnYi4Psc`2-<(1:o$(_o
%e)XSp:sMlE!I&E?90,a]1/+=4*_jmSE>Z%_T7Sr`/6VBVZYF/JIm,8R8*'dL=YWG]=>4qMV.9c/]P3i.$FF,4;U$ZY";R9^61mi-
%de.<.1`abN$1_c*gS<95gYl42L1qK@-,Z[5W?,(VWj?mG(6D)V$"9t!>-DsImh.G7a=8SSjT<4jU[F.?%]KtT^#I]h4mkS-D6A>6
%%W)p3KOLFlPsgMOX:<%_&W_nhfe?#bG%>"3JL]3YW@@oG@"HId!oPaQaZHpYhR&IInee2`YgJtE!7mf8,bUPu.TLN3rEsk?dumQq
%(l86d`$^5+&FU3WY^Jk!`k5RZ@2EZ78e%e[$NF;(XHXHNMtj/i&QTDu*jX"[[:J:W7T#eO<#%6BRMg\5r$,2:H8D40b:uJgqB?>*
%_86gAom5R`:o=E`C1:Mrau@]RhQt(1RZ-eoJT?I]N;ub[ENA`l5^0f=[)j'8W=jZ`Vcd-r%+uZDK;u2,LS?L+9#b]e@%NU]35I:H
%LMD:[Ta8*P:-smcEZJ0%@H8fd+8V^.:n:`+`u$R*HrpW4?)5D-rR#:$RRC'!Trb((<&sE[Pcc3%'^7`U_fiL:&\J0%Ho+\WPF6;=
%`!1BJ<[_^MEY<9EkU22qNK:hXF_P%4/Er-ga[qJ,2``LLPD+sur%:70OtQO:mccDloElt'7&#uUUfr[&9p@6*NoCVKT$JX,.TnG#
%P9<j+fR;L+SF.<nIY#1lN%*OSkVWsfe/*nalE2]ZA+Y>mM/E*Lja#\%M;+3J\5["8QANZ*OVC2.H3i5L'S15'Z7UdG/Zq2<`kC"J
%4TT#@/d`C*;tdm2ahOI<n:9<RCT;rTnt*^m/b)JFZ]J1C9`tI"R[S&(afCVA.:)o+U,[XYq.GmOlMpMArFBM(8>bU%;OK@>R49A2
%FJ3L6IQo)ZY(OkdIJ)S%A3tU1:NKl+<ORBkgY4`N(J$.8QL@)SG/s^8TT"2;leOAEPfl^+J3JFJ."e)r_5-)k+k+(Y&i-AP2Ye*"
%;Ot(8r+Yp!(7L0V_CmM7aEeu>W23P,,&3*fbr)8^!YXcnHmE'*2Njl8Z=NrCV_e)5)3PJB2R&sdR'FN%QMXMqY(nk\>?H@)]uVQY
%%>K`FAG//gKTgG5b?VCT0`\oTYWD'GPULUpR4TASC2dQZ"XDA`,So8g%mT)56FZ5M3KC-U,g\0Ni4V`B6ca[V[M?fX;AoG<"^n_f
%9JTf6#LXd^#q?0/[NKGh@I:@b10jJS?J7DFmR^:^OTR$Q25fV([9Al+BUR,-Aq+!O,aW]N$Uk[56uDmE)3[IlT%EQ1U4:o8Sp-9O
%XlaUjHJ5nN\%)<!pq0rtCok,5pNb/u09/gYkjq^LYU2T9gts[Qb^>%:;7p#B[B/A>7T-;MraY0G=^TQB0C,ifk4"#/&0Oe!aN/Zl
%0,DGfYhQOGC(ZPHno6TT!j"D*l<7Cq4$25fk@Q$%(:;da[SbO`;9As>k'@h4^0<U>Nd!ap.B6Op1q=dTagYUe>9c9l?0+!'=4395
%fHi@n>l_ht'G"003(gSQ#U-[\]7F]KY.)bQX$M%Qe0Rp<c,CB&W!`hXI)kP:!.1?r^Ye"'Dh-h/m._0br8*7<BUb8:dB4Zt%@.uk
%!!S>+haFhQ.KXtgn&!e62o8&^nETH1pN[\4B?S2WHCfKX8U@#Nhop>MgO.GKd$IO.A/QL,gku)3J(:@CIK`WE)TBd$;C-aZNC9ke
%s/,(hI:K<OPC:".!BFt2^q0L:=)dM5WSnZL^7T=V6NemBY],<+Sp$JS6bp/gLFDG_mimJT@+CptdM2SC1.#%fLEElmXl)_R*5E/o
%&&fN!T2<eH_2^a1bb(Qlha#cY4MEisK`XGq.nBt9c6e8Ek+dA"\0%#eVmYM+,'k!P?lUb7WSE1VCo\<t7$F%p\>V7DOcne$/<BM`
%$.?C6J,5]V]s#fnN(X-UIpL8D'`JdKab5nPj$CoI53Dp?UT62kN9alXH+;eA5"f=L`%g=7S[<6`H$%aZ9HO:]D#uT*TI)^(fM]n@
%9G)4R"_lm[iZ*Ku_<L9`#HnHb4^'-t.Y*W*g1aIEUJCbo2Oms?7giC6oY%W(Z?mgNV)lA7EF?[4EU0gi'dq)G/Pi(*VZ%]oQ7crj
%j=F"7Q#b%BG^'Gm.F7eJ667cRq7[mk^uJ@>I%%s5Bkb/4P#]tT^*T/FhaFIl!M?]j$0ub)`,+&oPcFO*<^S3""JkEdh*hk*Ys:dE
%.fg:ES[&FDL>:cA"sQg=-Wdje\c=ong>.cYjc?L]^pk?!kF.u9X5u$Y=s`esPZlM7ct]\5r+4bcd)X(qnn*"nPq?k+`Kh'[#PC!k
%S=uo/\TDO\Y8N)%-$$X>>$FTB>]LRlWSf";buZ+Z77UW#hcFVX?2gbhn[jNM."cuP8fh6T5UVVeH1s2C1cE9K!K-/^C5lKEGg`<9
%dE\lcg>AlR\sU[#-!*n+!7*VW;/oi5BB#dM.l_Ki.Fq@1ak<+jF<Hm-5<2tfH'?p"/^sIr-GEtT*Q=BIVAK<,m9]538teJENh=I[
%(4pIXjn1M$P$h]0ln$[lF?Ng5]0@2eZMDSn*cW4:bsj8=*@6W9Z1e1qDdT8S1c$UqEXc.]8mcT;IPH=SoH1MrV`dF5eC^V$+K/t=
%W\6-3CnhkOo'%JTC>h^bm`?mI%$r6/bJ=TZ?tX4_rJt7Ch@RsrI)(nt\pru=jktF7GZ\5metD3FlFs8]XF8E1A3!Q`,eXi)UmpOd
%8D,^Mhf>FZ;&:8+$rB5-f1BdkQVfNBC/qIGKQjaT=\oquOqtLl3?O1_O/4&9,.*s3f6inN"Bf^.*3pApL?:Xu'hN[)?&DA8^&.m:
%+_jN$CV85i2G:Q<o*h^3_#(a8)(Z:3#AF$e,CWlFn&st5P5DaEh\P^:<W78*GV>e$2gRJ@CBc3)K]:JRs%I#C=!E^Jfmn8924(<2
%m#YT,/CT+ReD#\P!^9D#X#X5A\I99NIr`8(gM;+cY=WT%gV'1+Se_Mi67H)-*?js`]e@`C^]##bj[N^S)-a9ZLGn/;YF;@*C'Yob
%@`h)/O1&7U+t2aa*'SmpbVQKjidmi-97A:+;Mh.p.0VP.R:s+Z+"a\<Mb4<]Jg"*WM*[6%6OJjYJM`%4mZ7"B0D,("!?&!/!>W95
%,sATpOeP%?ek$k4VQX`4WL-NbgRtK1[r&sC[nn+25PfO+J^-Eca>`#309>fNSW'/bWY_D`q\pB:SCTVJLNYg.iGD[@;ql?V`HSYX
%^>H]+`UPKg;0C`5SS6rKPZlS,'Y@,0<)D>c2Qp/V4P'S_B=._Oe0WW4BB]1:7oV*->q/-SKV2Zi>!+*tI8o]n:[3V&-L0:s?aFTL
%Vo(k`BGRMWqHe#uEIYuHhGjN)"aRBf?+"BtnNXIdiW,PC8nUe_b'4r3iU,Y9@$</7%sg?9'E)-O[B(#3D_NnTpNVm3=e@R#[DUIf
%\76'RA@Zmi4:nV:ff'1V;PO=SGPF9s)-3d?mi3cA_O,PBBA"%o]npK/(!7o[5SMfe)6t@o@<*je!_(nd_'Gki047>-B$(sF3Q'8`
%H3A@nnju1C^1(eRW`P95P4F5WEjO&?3J>KE^XD,E?&F#jOAfoD=*Qq3/rLE^G1kQo<]WdYMC#X%HO%EnZgNhkN1C/CL6\>C^1f1R
%M@B-5]Q5u11ThOK*fIEK]!SiP[EPi\OP'^#kgEEFWMbGXJ?[O<*8<eG%i#[ik:.+(]tRY!2YILKSbR2n(;e8#qCR?9U^F9JT?1+d
%i%Ln0"YWcbm5R@&qU1$`90r5kaLF2@d0\4>>N7E14I@$Xm6J"6V"lOdGgsN>U]b[;%W6/rEN*bH4]8J$iX"7MAOSFB\"sJ3&Zl^t
%S_1+23q@(>G#Sln9iYb.f8e"poX"j>`]ZQRo=&Dk*\TYC)>C8p^AWGc8cAT_G2MYXcZe97n%8>S-@_'[md\.m<&+A!)VIYm&#i]%
%R%3qY:hhTE.VU^k<<u.MXoSKFRL,ePb1jG-ag[2V]=&LQgip83+=/'4P%GPsU>2Q5F@+@sHQ0a.,J@'YSDbrQYhfSJ%/nX#87M*c
%UBI'OI&,]:QP)l_:8Wpm9p,)ceX.D5G#8)L0f@_enlBR-e;C>\%r2861YKQ93QguN*;eJ2nmNoZmC1C\o?1i%a_B.*K9`amkG(K@
%<!^!8$gn1PVn0dZ4E7E04OuNSXAYCN5IO\NA-S;o_E],q%Wbkh5SCiX.ILeq\I2Tlm%I%SlagE"gmmAO1D$a_d+WdT?7S*DO=U;=
%NEuP<MlO>O43gm=`<?mF`lZP]4@iVA#(\c'8ols(Iq\N!FI<jN<\XT@9CCK4'M.<NWs4'd2#!+M/!`P4YR1Xq"8i=qHgVFQ=KoN+
%Ej3@6Y2P@ma4q(Dg,=DJo)FPq)(eXko8?AR/C"3k:O,#r!<>eFKiKNAr9^@@A*YMY"K24j3+'/<U=T0,ngdj+O3hlUfn1.ifYBc#
%/>#G]V+2k.!V.2&fg4mn9#8@>oZMbi1OUCmdX7,jMaoR98>r!8bVPeuQRNnuGS2^Vo*k3?:k/OM1GP:hiTp0BOeMiRrI\eG\6cC_
%8@k!V9#>>&AX2fLF3inY\[ibGhi,#)QYR(C2R*tT%&%!r14M[G]8@/TLYOJhGUcM[pJeu.m&Vs@luQ.$O\s#>8;<>jC1@(fr>,S,
%6VtNtX=d#O'.!P?j-2s?b;33^<TQ>Fg4;:p*4<DJ$,uHP+RE0hlCE<tWl(,pasu+E$N<3![j&&XkZ(`C@e!St`%0?:j>sk`J2Fiu
%AYmn]r<QkT_FGD1.Z!=(XSOAU`7h=B+N15.`j18c<lbH#SG[)RVOVcN36a]Rroqf[ZT3`nndqVmAss<Xr2eIiJZ94.0X5?Z7%qdP
%kb1f!%eamn'T"!\&/R2A2+TrP^\i"j;H,q-aaQWKCZ#V$@^<KnH\;+b.<Iurbqbf#1s>0sWYSSsjGI-;/lU'BN;88\@5Cqu3G-dc
%)C[Fp7aahIIR+5qG!%pjh4HnO[HbfF[N[1l9Mg]@/*1D1%C=uB`Nc9K1+MH#L<N)Phh<\NTcQSO!\<8nR/f+@g>LSHosqEiYj!o`
%D9"]<-:9qO%PMpF(r*3)R/Mus?^G'5`.ll!>!n.!LKlBDYb8IlE#\EG6,k"D^"@H(C^^uY[q8&d8ln*?>XfI%T>5BfiXE8pG#A(G
%]mQn4iIRa5,]i)q0JI(\16&!+g/LM$QjO-A7[CHZJH?DfkW/k()bqC]0aU4DjM:J*q9@:Fm##&2QJIn2;7@EP=r,N/$M9=kQT.Q;
%Wn1MS0=lY2FmR1"E"4X5j3ZfOK8iV).5?kB+o%Sddme._e.-:Sb.pn)1^kP3:GS%g:8HMr;E%6>>_6aT<+uJLk;]fh%^F_Ea0pXf
%>St:/Pb-)q=I=9a#'M48C3,M5q=V&eBFo_=leY5`(bL0gT6n!9>M.'#=;YUrW$BU_jTef;&K_bU?O=q9<WIh2kSYSF83L1i5HB"'
%J3M+%8h.WJ"c(RQY!a[3K1]An";D"'S\R7+oK/DP0^n[kY;]NZP&pl#g.@l))QlZAESu&h#R-3hrku3mU'nn(?*@kPKQ9HK;*fIm
%q;%`pc\OkHZ32H4-"mB1G1QM@CCLh12Qf@\#FR3Xp@o[%"agdC6AaEs;MiV"UQ=4c3.cW,]o]2+D7]4$jK:CXLa>=fHI!uE(Nfon
%k:0rH-$fo5WX.oWU>>"5;c(s\l-_"0.^V.VJ''j1YFhmbTim_\Z56V'g_(_&Ar9'dn!)<dG>hZjUHnjT_K[Gs6BHqmKK933:uZVC
%??JisWk"3*\AS)DejEanLNhRF\1uFHTiOE%RoB\IdgdL?a=:*N,//ajbL<NQ4VRTB>Q,>WFV:1dSb@i5?"81,K>mdB7+JFZP,8ks
%h6qegZHLTiIRo:<*-f3gD29]ZV<^iQ2<fm/d?lL&Xjs1*6G!)kW&3.,PW#^>Vb=5U,@i+'/#%R#9f>Yi$41;n-2,^B847`J`Ip>^
%d+W:322%;9p(ar)[!3_^n(Ea%jRmPm$;IRm&sQWKC1JY]OX:<O&%Bl2'Q,6D0l74(+'AcMM8m!_G#FaZ<T&8Bj>rum'3,i0X>:Q?
%#*gEaZZ:`XBq<^qMa]H2RYD;&hTq&W\BOIZ9<d@!*H43<;L@Vl8uo%UX=BU:c5?ArYW`lQ:03ZVF0_OLN9[Q[jo$eU.$5%m@TJD+
%-O6%D!EG?N+kZr?`BJF'pfWs``;WF(hkk)LOA_rNg;[!$"V+?,D49(9ZGSO1,^/K]ATdT-ED(FpLU_3PA1:8JR(rQ'QRmPa9^=I*
%%9esfjqJGVo!:T>;m0b"kS!V=*bifs:[a(<cF:US&']=04%QN=l8LT,>A<J*I=!Hk4V[I)`P0B]i'Zbu?=&#\6JdTbpO_OKh=FYg
%]pDR1X0hk'OF8P25*U44$GcB[nP_%8<cPj=U`[b1\(^OCq>7]rr_QD*(Yt^Ao++k!LKa^:9n@Zci2Ocd>r1K$T#JCHn_=+ik`e4%
%;nctYgcI>'I@S?.l7);8LM+qA*5kl&f7=sHd4,G/jaO3uGR]-icMEaBFX)/p;o.mlYpX/:T+&*QDjY8u9%uS"2^TnbXo3['l*e;U
%Uhs!4p,CjJIi<ps?Kho?Zp+r8%oqZYb0.7ToL$%_Z)[b!rP$h'T1\ABK)<50s&ci[bnFXRqGekSRSp3p;:l6,@k'`G*a)Hu^C5fP
%1(0QY^42O"h$9YkEa9K?>:5e3bMk<uV="%^W#[('?m?og;6LLK=>?FH%K'4h'mTDZ.LT%F.7J''+"J=(pK]2lSY>dQ,[8RG4(+dZ
%(LR/d"ZX9J?MXMQTL(a%Q'@?]3eD/Z(4Arg4sAcqcb(TU-ILON34mQQQpGl@^c6Stfq:GA"*skSFh_/F*]eR@P/6I^a.RK+>_K/U
%?IESc/DaWXmFTWKZhas=(05l-[Mg;\+GUo]jhR=.bL*E;a)i9g6;Jae0su*p,;'/2]N.<n++"q;4ck#gjJepF7NBDg?LZ-^o`ki_
%&ZP9PYBdYPgCsGO;-pH=G]`Rd+@S)oTEnQZ2N]!g(n,lcc?gOXL*n'eQEob]_og0K=GhS6h#G'+nk4Ub[TB&(0Fs_C5MJ3mL<jpF
%W*<J*IGgo.D-KBK^P`]@V]=OQZ<caJp0idfEm!]2J-36dUuU`U'3QKg@el8NkXm;gNf^,'@M>;06Enmo\;k(.CXJ<EgHNRZ#F9Bt
%'r<76&?^.R^I_GhHKl1mMf,"g,Bi!%gL\lCV<gu``HEjj'tW!-'g$X7Od17[@ujoma(Ei7@J/"!]!]<@/[EDlg7&\ZU][>r_/i8*
%]hqN9,DiPamgu`@7/hanc-lFuBpM'!prhLMBt\*/<KU_O6g]%-m%&!dB,Wq?+\Si=*n(aW6ZCEj:78MK&:;e4f&#A"UTHC9ai3D@
%_;;;94&j)=\eL$V'N.Bg[+PaZ/XIPEmaf8nc>]<4)Mc8d[3'MXF&U:gMRfEB!-VZ(L0C6<>q`Hb1d_UdP+8;.45Em[4/ks_nM@Ei
%#P[@m@?j>4)>bW>_,[J%M%)g$[@!mMAf"TAe`UrVi/t9C03V94LobQ4lW%qp"Zn!>Hp,$:)QNX(.$@hrQ\h)M'I<BGg<#JdE>2%E
%#saghVs)V^Gdbu`k>;kS&uE@%i<;_/DcQuu^;_%)3j?et/*c-WP:BV'-aBK$.4lZjlTNq6Q0$!rQ"kN3-aL$'0U<msR\lO;dtqe4
%4[i<%g;MFODPp@ErN!b0eG3,3&q#gk%BX-.((?7[jSYhVGLIO"7$8pim!:=YPg7:iZRQ_+'U[cN?AV'L.Xac_Pp9Wf_qh/h:M<gj
%lM@;7!#)JiM_p4n,Y_0&(9bi:Dh(+U2#`rel`sEE?R7lf&s%EhQ1jkj[u;pa[7DHC$imc,'.,coHX!G77O,KO7$^\dJ:52dM>`mE
%`#(%%lPPN),htNu(-YF$UsoZ@;1^Bs^hYbYB*t\SHIln%:WN=3,ZVAk+-:]4-aQ$+a1-CFdA!&fnguU)mZ1;;b-0To3$YJ%A*q=.
%\9d\a>_g*Y,1mIP&jp#018<kdUj?2A`DO#n5_5Hq#FcIj/5'r!+D8&7lZQ#uSj/smIO^OUnTk__BpK.tHpN$im4l0uR)2\a+loKe
%1g>,R,eEXO,L.A'S7M@N!^0oN;OT:.k[TTnEB?3EqL^j:V&=fbIV:VMqI.>fP,YksC8nBehJL1G\"n)<pJ@XL?fj,@.%f8:5pg0I
%=EU7neS]b5ZbHXa!2]!q3(WSdQuU(J5P&+gEjn8Ce0\!+I.?^L;QuN3BW@r6(i:&Q9_K;!FH9kAp;[R'm]trpj&q5k.tQD/66CBS
%))3auSC[V8&3B2:]rZ.&R^pQI&g?*T^Gbq^-W*r"`1[?e-WbeU`^16&BLq8t)QN$j2Hg$LftbC%CPR>;C*t,O`9#PH-'EPO`1k,+
%V;%sC9ZR.cbH4mt83u<Nh/s2"&6Dl=4rkiO<Yl#"aYNMP:`%$Y8rAp"M?4W)`<*cs14L2\=q1+*,G;4`]Kp>4^ClCkh++L.ds&5/
%^>\Ia,!JCJs!Z!>n'h^+!5XP^HJDu37q#%%Qe\>daqf&8j5pBEY$'2M`Nh];ERAUOrhp<Wfp=d"3p%31=<3=ZS[C#(/,BgHa5g4"
%J_eXK9dZtX=0WV-QD@IJ`^0WIH'KGAk)2#4'_>pR*tNSmhA#^E/344!3s=g:@7njZV?bc&%3+u!TXs*`DHNu1aOVBbF[ppEK#I(Z
%Z3S%q,:r5B?FqH;^&c)Nm>*$T#aA)(JYL=T,9!dri-S#<o4`'m5h0t76IM(+2"tg0Z@*.<mud3/FT!&0hdZ7_3<'ujs-Xb[F,-Y-
%iuo._9N[lBS&Z6,cU@"XUO#\KD@,%G>55U@4tNh^C[g@nrNr@bXSgV,&09c=?-;F"F3"osqT.p:(<)_=Nq<i&fT;%;J&BN*37/mr
%q.@Hg>+$G_YAY1;;1(OZG-$ff\QQpmZ2;!1_?Zmq"!6toi8P4)pje"0!@C%G5uuhXb.mpcnV+!MZr:oo=#/J5[ums,?sDo2Z6^qK
%6lm\#R@KGO4%0HiODmNRnOs*Z5)(NP2ORH39tQ2'D-lX+Ktkm!r<HD;[??(aNCih"?#j9>bbM=fAZc'r>19<+lqk,9:-#`rFin@6
%KQ0ab25J7eMMcijK+sdMp'HeO20Lk-H??TrWBRH/2J]TaP"posY"-lSQ/rD[B3"'t4<,aSP8(&+ce<U`4lJY:&b5.0b-,</As^9u
%*Yo6WkqL*2&IoR(K-R2tf&WUS/<Ifj7`>n!i?kh`0Jj77?_C9VL]`3mW-n+1T[sgTNERUAr#sUW0geT8WIit;b]@)$s(VO;O`]m:
%cr<Fnb=*sm\p%hOnLAiZ(AM4UjRMO!K;)&pb]fB`T4s+?k2bqQfeeK$M]Y7D<[4a#o-i<k;+9#C)WPpuC=2L)eYT)&h>Pr[m8hX3
%at:7])Q!+S\l:aR20SU6Y?TeJ,Z!a5Mq`\DVWln?/d.'bPm#dB-'AH2==$[b;bEHo\88PAn'r-t5[,Os<C5fBTj%nb2@&.;g+hqB
%!`ZS9e+SsV!S*3P9^F'H=bY=1dEsEi/84N`=Cn$%X8QNfDb)WqpSPH46a9$R-RGt%jdOTdbFs7*h0Md]MgTGgMMu\hj.g$M?B[Yd
%mbD[bAk\HY4Au?rg7gue?U9.\&cue6XjRcVN%s>El!>g(oNe9s:GC7lgcf77+ID4'^M5!@`Y=PN_357uht>cUCr("KO/,o1=;'mV
%%a6=&"Lu%)pfB?%7hi53'X;ANQpNZaJbG7,jA`*f4e69B=E-$Jr!,4e"4:/bhp^/DqD`PWV`?'NbK=BB6net86U!'gDp8?N%2-m_
%O.NfW>h-84$AV3=L-Np,gNZ"+A;.iI2tcUN/A]4;*>^K#nP,o\<OQ:93P<(mTbgg)E=4I$5#5_C]Es#nWr8+Z:VOPXF`Tauj%><3
%>C4&1\X;^%Arq"47@Y:@K.B(,RY@'NQ>4UK_ZJsPI`)3t]74GZV3DMO"9nR4Vs$4DZ.A_?f$_0b!Mr`16!,XV-:Qc==<6H:0SgJ[
%J60f*EO8[iJ1U<.i\<Vho[$%jqE::n.%dc!f'abN-&cT6oB7_hRYR8?AOr'5IbN,GFDYY)qnNQ\il=B%.dQ&g,i-]WW/_qK#$b]=
%(dX*UZoPAcai_<('Zt"q(ucO?%a&lopJ"F2(@!(]pnkGB<qmjd*#S$*E!%CJ=jUOV)QKpKj<>:2+bAD;84r'U'GlUJdMY%?6*m6,
%)u_820"Di#BWMI4E*QrkFiMBZ8RWqU>oo`&aIcPT@>*!`'j:9L?lb62gs74mbQ:LFrSVkjUnlr03N57,*Za?ro9>,H&nDqFl\K,Q
%^QeP=gYG3*.'7D>gjI)d5?7LV\:=5@0(N7+RAo(KQ[J2V=Y6qA'Z)2CAd#MCOu3C1^(Ni4#`<2-E4guio!eMXakDMp.',9dSk#tZ
%-)_V)m,,0aDPmT:6%=3d8oM`K7U<>=dk<H0=uU+6RiGNb[bGV3fq[*SAEXhPq]q4gYc7ni;uN6Fb%7tFeaA9X[JKs6dON\"@1u&)
%_\03*i]+.R;<XHRc*Z(O_62$!mACk!R_S]Sc*jK:7P&R[gu0sqk`[Gbb[DB=Gs\?M,4"5<)8.:7J;<M<ri=0E^i+!s74LKVl6&"$
%di7kcN6,;3R73m)CZG=@Hf7$*q(c1LldAAH&bBT#LLj4t9F4<E'T&FqOG?Nk.A(n@*M9dfLX#P):&0jPqdFi$MutI;)i$DP.#]e)
%_U5cN?=2B!ngpRAn%)<#Q,/e?\D(:b<(kmQ8gA"rc]n3[Hio#TQ#*YpAJ:SrG4[<n"aDY2R@XO"G0*=9bpGK;!hPt]f!^-%`pqX_
%;**OJ"58?V,*BJk9'QTBr<i)+6kJI]!pm5@Gu=]1=Wl\V?1lUD?N`2o7sI]0d=tsH!BV&FGYTcDP#h9;,Q-W'$njRG>$V/BPthl\
%M?+DY715qS_,Bn8oC5\@H!&=(P\`u[rjZOi[QJ)>\V=SfJ0`PO?:Vgi:=?h-0SFJ2LZWsne^q')m8ZX'2!$X\\R[rJ4HV*S2sXMH
%0e7!'(5>Pch4YoOo[3Ln,-dLajM0FTGJW!.IfWF9Ue"cHe^JI"$K@Q^CdH_klJsZIm^I]I/R5S/_X6SI\k-;anR-^3SrJlPM8H8O
%b:X5+7u9*=7eN^@/!^Sl1e[a]-WaN<UlmqM+4*@pqQt6*lu*E(i&A:0Op%/e>$8-g)?.TO7d1MW[;=XDX=mp-)[G(7qq,t?kH=o'
%XtU">Ze"fl]"7I(:rq"pM9&1[+=uOlqe>>F&R[t%24g^=_qNi_Q>u>kKD:f1)C,Xdb$i\WT,ia^<IurpH^G$%LI0NI.Q^T.RRmjR
%TYN1\p8a*];mrSdf2q?n,D\_Xh6qI7l7HA-qsOFU&(3W#Fh%RiSmSJss#SP@$1r\5@4VF^f@1#dhKFl4F,]_Lbu[`0cD"nA*A*^A
%()`BB)/=?;JP3VLIR>*b9)oNLR1\=ZaIa/ucr<rkA;2SZ^j]!\f4gp#p4tq[5=6*42Z5Z)((^p^diI"PMe:YXY"+M6r]o#:Qer`W
%6T]ZDYKnW6DaaG,+'usn0sj%Z+o]ts_\7,\#C5_-4"(j=grCmn_i)#n?Wl]Hb%a+^];HU+r\+_;qLaan^j=&M6b\\2\jebL2c^!'
%U".#-(Y-u6:B>WY*YgM!'et<V+XG'!$R&4-A"g2[,$U=AoIOWRMC>2g]9(b"%dRD>lH2Rb>%K8f`aJu0NpBFeC/Rhg_RVF]&Lrr`
%.4<1]]c_')mU;dY##9oOWET&uIc0cD-f6YBKX&4T;[!/>pJ(pojd]>l9XYh(Ne<moUV-DrhA1>L#/\`Dgj:q$=cN6.J[7^7H\^4d
%WROn`<!9Y]/l9LGl_n-('nA?(i&9/D!_jna@3jQ"9E&Qm[iaB[8458a'3uC:>Z,<*21-pTG=^J^<&;r3@K`\km)6]<Rj@J0U/^9Z
%2F>O*$]nrSdW3(P-Z0j6[eN\c/%`c1a%:[_K7!.41h84!09='13PN5Ji=DXYF$tKgrU9Qu4cfA%iV4WRq.H%^s%HiB&tS3EkTP(p
%9!E3$fQSe!/[tVXf>:`)GY]%rGGW@IlX?!(h@1R9c%jR:Bbpt;XN1_E#%q5C"5?USC5r_Qm`31rmKJuYP=0UQ:GN!3jiC,?Sc/)_
%cb4H/rYK`dbkSieZKiDA/*Kq>+0WN\am[DL=a"1@PJrYs"^LDa^GK'KMsk&PVko/RN#p27UJ>)N))=_2*4A=;bh!?M$h[At=.-,E
%K_i&Y9?/g<`Td8"r1CI8.T-Un`@T]fD"KBR5l:Ni/o$lZ0l0i5Fu0)/]\9FiE@p'X+%a$`DFo6Tdh8org"C.`?GRX!Q>`>RO7&cT
%-SnDJ"%o=e98-Ses-5-F+=s1pq^HQ9nLa++`S='V3MDs&o+%AKbh9ds27<,gSZ<f3gS)qa1a,,85f%Jt]Bq\U^NU_"\e$IXbEt2m
%aA!20AcdKL@h?l\g&bEs=[@7tIQ0K?4SlP$=s^ahG+^(1i<]PG!am;D"r]t_#M@rnWim_Hp1qi!E7,@pqifU6=N/E3njeeYp_g0m
%,9s;7[>XTu1ioS:,X$p&K>b@RZ;c8`8lZ+:a9Q,HPl>jqK;f$]B])oL<Y>ij[&?oM7ERZ1RTbHC9Q!-eY1r:cZ?S@s\6b[EP571s
%NfY_'`V2]3-'Ai&88M*s_?_'Rk]90j/Cr7e-S-4&nR4Ma(+G=:RbZUJU@1-V$N_VTR"JT,LapRGot9tb?_>j_Uo$C7m`HTl2Z:.A
%O<AbM&cu`8!R`hGei7->A=1?tX[Qj$52UJ6+09f$JqT8P/9WB;@#[.[]3W<YmuVIqM[KfqS"p`M?-)K/L^qtY)Fu%g;Y\qPL7$di
%2RC8F-X*M_:$Kjf)=G>$->]W6:c*X4Ifldpq!n5=]_*&^UT<)nUc9KjIu41Xgse3kSW(Hi:O94+8\&!b'8L/Y_kR!+dYQ^$7MEVn
%>*E+uLfRp5ge[_<F;8`-8\V%8>BEY/rr$EkR;gJDJ0JQ%du;U2Di.j-T3QH9"N;cNO"(d_RaI/J5[;,V$uap""PkTD,m3EiZB%IW
%_QeL63Ca7Kd+#;L^;,r'p_:WE/h`mV4FAOR]b]-]N0.a?`2&.0Ooe+U[QG3ZTQ='cBr-4Rd*rOrW@3+-qoDaPk3#1n9@/=<P`j.e
%>!ADRHmu:)UI&hA'g]FT*H_<J5"H0'R8TaaAPPJ(XD!&S,:L(.au6Ce=5e=_!3h^PcM,4lHh4Te"qg?W9FtWg?X_tS6nlV;47OA+
%bcbMq1I7*Fp3^^gc"h9dOhD(CYOr/(!GF+Rf(pL?qMju=:J)com*aHjZfCM]hZa??,+*^_5qe!A$09E4Irs`'Tjt0s)N/3_SE9B*
%"^kcL61bNU,Ae;BgUk5E=LD'Ckn,?[f:=00_)#d\lK2,X4B\Hl1ZJkQ4hUO'*3:KEGq2S"/2XNrKVi0n_[&UdX-`&P+;\`=o,P>q
%`ie]XDqAIo:eXM?$l@[nc=>o\_JiP*4&m"rRNO%!`<J(X`S*9d2$gWL`VD`[=Tc*1:fEb"%Ob@#-GY17JLbplLVtj;Ot.,=LF7o.
%r'"I6.j"aIOt!Gk?%]Kb!+&]&Pff,WN.SN"4\^H)7RDU#'$,kR5_gBBH'R&)pX=5Y+Y_I][ui)?`Z8rY:TRO\1[Dm`,Y/<Qe=g=Q
%BGZt^AVV$K`7TN;M>okZ63(h[H1GCV\=%UU"qiBZX>\no2upKu=Gsr89*6Q#+0$$O@."eRGNJ)t,A61VKu_A,q.#2@'CU(S%h'![
%5[#nTZ?r%A&5k'Z*i]E>.B@Qm]A4>XKe]at@GZDqcGm?=Fu%b+bSm3:dM5@R/n<LEC'ah$`>_67Wgu("RH,AU,or?C&ULimhl*iE
%5qf]4!,6R[bAXT:equFumD$E!2r?#$SOkQ?]P[A_[7uuHMDX]S?[mW@`)O5NkYeCq-PcX@!RE#Tb#+QH$TItF+u,)!%!ht00H6;[
%Kl+hqh(Rm'[gIGj"?EA&,P`k:'B^]sI-6b'Q(ZBX7T>X-WVn.,B%11-GI=V(FH.%e6$oeUL-8Q0*Cc=UiY=&V?Yui3PuSmQn!YcM
%=V?p<W;G9g)TB4d(93CZ"Bj3T8OiK=`<\l/&2;&0U`oR,FSkNT\t$G0SsTugn]`]tAs2D]V3?jB7E^@tc8)IPX#hF_h8$\/(C+55
%1dUuX+\8NG2WldjoT.IM4^Q?ZD\cbrjfeOX@(:Y'&hko!cMJt6Ul`-E8Q/0OJbmO==8](noH"an@LMMG`hO#j7bY6H,\gI9P[,n-
%*cJ+r.(L6PLi`iP&OVjKk'rI/0[ad&95ugg7NQI.]hnkOGfL%'(a0b.2=(s@I*.+@V0q9nm+Q/Z6?=g=E)'q\\*>H*:G9O-YcVPI
%2^/Sq`2DC+f0a1XM=)rQC*O.;ls1uhZ85B4!ZEg8%p/Z$GRn_@7W\nPPEi/Q"EOa;V@YE&<8r[DE^.]m!:)"s5kPOs]J;f#9\cFN
%*j$2b(sNuql4!>'V8bf/7/n[3&JAJs7h)pQ([PD9/AjH@Cq_G8037q)o6ri/c$O)e!/ii?K2dO$'``GZ-:0/:<`Z4)jHA=XKjD$L
%"8FH*k(I8n!ZVVd_bD8mjUTJhAB>u#Phc[+W$A^KAFg4`6[c6(nlU)NmGWZ3*cL)PO,5?R[MPqG,t^I$h%uVdY+X8r<VCH19KW:r
%!65Ft9!Yec#\.'sV7'-Q9.%*S8QAfRQm(uC$'grj,g1U(A9kqYpXZ[e7ctO=+9D1)\jT-hOT,\**tab(NnAFsVDbhiocqm&ZucjP
%.j(d>S)LP09c41fO!^B4N=jV+[HHLT<D-8QVBHPR0LC-hn\BL2TtZ-#<-o"R[J^ml-AXq;rA1LSA4^oJ:,TYILY$Qp.2%JHTj:-H
%:s`?VK`#-!\K<7CT/,lmDDEY3n$5cj(AZ'$RUp2.42WojE#"\*d'f8(;N=3c%nAQsQqIhGEiHu\mJoX@G%pd2S\9;?9o7"<34QYu
%LpFJ9@*+SFejPoZc;Ke;JZ292^Er+_Mo1IP`,&oQ1tIXm2/t7]Y#Gl+?`FNd4YGh"-!S4r._uO$B*DXtI&hSe>rJ/Xbp"b\4:?t>
%lF]b;83_aE:#`Z^agg=4;@;uL+,bfq:'ak2S\3<$AAPYk,/f$F0>Wpb30cst]EomEcn+5(7#KOS%6-U40IcRhLc-bi1CRFc;''$B
%`#6epnD66q'NZo(N-.Z+J3?5Ea9=Rp);?pUfBR!b\$kbJD-Zo9dIQAgO]/B.%-FM=jOe?@nZ<"rMEJ]L'eY`>DF8nj$>"]JTnJj(
%S/d40aMe"Q%a]bYC2FiMR%AS'LPc$,[]"bgTrT/j.r5o?^?PiP;?r[g7FTj*1*A0a.<Ja29eE4-P-\$h^sWu-&-`_?(-$)4fWtR;
%ASkcq6F>Ej;Lk^-D$h>X[*"0]mAL%h);Po84K0KaR_!:9<E3N-,?>al1+J$87PE12)m0?#)U(U,2nVD1[P4FRR"Oq;k[.M*3,kR2
%`R204&f:q'DJe+7.*3sc'=:uYJaKZH]*D>1K6a7DTdPP9i:=5qX?ui`Wq[\KOr?XG"H*Cc)Fbk)@Qp'Y&4-:KT^YrqU0PU*D/S`@
%@8HR&@N[+A"dQ;;Z<W+&&W8*P\s(Jua_WQV`[>)lA<BFf$2faA."H\L^ZjuJV5Qbd@e()-c7#7g18poWDP<)tJkeT]]r[1N?)ocN
%%6Ihe3[@eOgo.kc^/U0oWC28+poO=YC7eAEdas&+0Nf_IQE2H*GMVW".)%WJ_;c]l#Dcs>l'*YjHQ9"Ne:+Wt?cPsR-tFFK+h9QE
%&uUWh@J"5idu]E_U+-BY_cZ[hq,Ql:(#^(8*IK.1R4V9ZW0g/B,m8elrKd7o>bgDf9pk!s=-B9.-`hMa?h2TZ+k``H\BGqEO!*"p
%EH@N4g5u?9#_K1Y:cH!D'ELP(W[gZOLV@N[7anA:=*hq4?6Rs!5u`Tnil?Z>FH`l>jgqIUC`Ym4'NYD_WOOb#[Gdp!^>uT<4rs'K
%VB-R#l(Y9s"EDMbf"FBUE!+_Rbt?)]@Y8el)>='Dh`RN52+NHY-d-HC.T8E_nOCE\Jd]l976`3LdUgKb@eT!Lrj!T9HTumOW,D2:
%(#Tq5%]!0eg_p_ZKXPKRhH29/p6K*l$F#tU.WRF3iT@u]+_'Yd(FH.Z$538I/PnN`aiUhTMPK6>[!Mi=HISLZYu)1/^l;e68J9_!
%<r9^([#sWV_fqW5TYZsaE0lh:e(]&"9QEJOhdV]UHp"-dQC]4k?:JslUHGG(e:"1/4>&s8;ZCKu'H/+EL=)N%^G&jo(0s4N9MPZC
%(7BW?R9`ppSmK@H14/(pg<.#SJ"\>29'QSga*gR-`fr/R<=4=gHghtX#ta\[Uqol3rFcH`3umL?iiG`O).X+BJQ`c1EBTiblY1OV
%);bN<QOf8sFjeG=&Xk.0DjB/^Oonk^2ni[FW(GHo$s1!.eBG#b/.HKn\c=BL)/b]?ME=X4csE)<\4K1LeP*P#/+OaP4!qNA+N8bm
%qqe`TD<Q91N7%3bm[ITHj$"Di,k)UDS"fU7#TFtYSa@MINQ<*p#OW]71FTOh@7ELVpceTA+f(g.Mg#U.jNC>tM,lm^AFF'QdStV5
%Vc[BH>A?`%Y?P9$QV"WmpO7oh^ZB;KEbdlf$YCD/0:'I*aHlAnH@0#e7YOeROib=M25Y3tJ&7,+FT8b@Y_2.6!Q*g%;r4cBE+R??
%6t2<rc;Ccro8gbJgR?Kj&Pf.f-MJM>M.q*Zq%r:<3X1c"99t\R#:@=[qfR?N?2T'>,V1JZ,]45`eNP^`(`q$EZ';iH_o9TU7H_GW
%h):8.4gIQ0TP<B$DN4Fbifgt":6<$R0!AW-\:f5[?ji`b5Rq$,%GOU`Fopl)>We>*-'i1/(#nQDo%uNM@+EkZ5#kdC^SKU/P-sq9
%@Cds]*J(oh.'k[lXhu<f`sfYR.!Zu&_44pI'TPN^j(K-jodl.4,;MHZ0Jm(jUU5RXb)?[l7LI6LInJEI\qXZP!-mnBj(ErU_Skp:
%Ca(CEVP/B+Xl]YQ/=)kKp.m)8HD-H.Z,J)hpqXE]QE?h<kl-IX3faVg-3f[YM[&n@S,20%IQ]jV2fAqP>'<"5=RT=ml/R_GEa3`$
%,WR:5X"Kf$1A2bJ.a6)6AW?8(bfD<lQ343E'X<GcG$+CT,:nUAs7LUkDls8h"2k;R'r=0_?oHdQ%43#j)RA]]1b7Y=QaG>Z)/17j
%7"clr7t<RAKqDcIqa0G9V4J`B4mFSE@,.e6\jSQDOpa`g;"gc(T63NhH@4%E]8jfo_]K93c'W.;fWpho+C2G=8Wsd[XIFmu/'HX%
%**^u[Mim<u@'Yl+XLOKg-'+b2I9uVZ_tWTFn%E;CJ(pEB4pqoj,$A=dIS$S!5md?1Mi0(kKJ0%9N@gO!g84'Pi_V7OCu@UP;IQ.f
%!1ulOIK\+*ajhHZ'B4pl"=H]!@Bh1#FZf=c8D0+.:e+lE;7JuI=IV`0Ro9$o-)nCkd*+B/.f$27VJ0"!hXfZ]\$!@sb6Ch]aGNW:
%pXA$KZn6=n@dOpTF<*1hM+5_oiZ3Mo8Ko!;LoL^28%9B5q-`*<3i:o$h.pcp[!p[/8W+`d,ag&Gr)8lE`+i1:`-fN6SE_S,S\r+X
%%mf`]8)(ucM313f]?/f(J%N=lo;.AdbPK-,FtZ`[gnC5t5he1CgX@_TW?$A?GL?o>lJUnoLpCSfOTh-MNJ;kaAOY^!'X!'G7KJo#
%R7?GEN+bVZMhDUJ44Lk2XoS1S/4"%Z?<d'o7pr:f">L^]G."'Ulj5JD;6C*Ue,&nV"q-MXk2^m9gkK'.S$T]5>h6bJ7Z3+6lKC\F
%1Wop7iaiGhb%%B[bZ.!`%l+Hj+J0cM;4GSi>6%SPSZJQ+[&!*(X<&tH$/(]>!Sr>c4=+1^jRGToRp,P=EKlERr367;h27e].cf35
%3:4Xbp#"A"R;o)JE]<3mG24jlS0IVXR?^Qi("HILnjNf[ZGee;q%#_s<3aeJ<1mfrY`?DF?[<H%+mM@4)10<^)qV\E_c\'iW-5j#
%i134m?/ZI*D;J3U3)h<0T#oFa"*u.j;3:Di3sst1)$So^?plKG+r7kVW#=Vt\n*o\7PppmHlY.N\B't%'QdD:0HU_#=\p).!+KTG
%//a"c2%M;q=XV8W@?L\]5glR;9r]/+U\"0JftSI2?#4\l:aU8Q$.:,):!p8ZhA9kJ<aIgH%=^#uEhMgL0Sh)H[I\+;\=_@('F"Yt
%>6JMK#fTb3/5X]C>f1o@("c<fZBCM]2opqT;/!<ZWOlO>V%j\HaU'sM/Z,9Zhg:"cODVFUf^X!np67oqEfU?g5YW.Mc5!H?Qh.Ss
%2ChO$Sg#G3b?7d-,q,1Y`ajH<oki7rSX*<r3$!r-Vc$pe.E!>VX.4&Y>9C.Qr:B7E+h[Om;chlEhNPfh5mF-C@Cqh9]!2_<lm!JJ
%%b6RZ,GP__*?9G&R>*0;U)fD@L^bZ*:ZV\E4Wq`u8)f&2<D!p+m6KDXPg547qNcd0eqXD6,=Ph)jjs"VO?^@+fM4M&@0/gep,JAK
%$"&QcT6Jh<O4_stoqtgPe.p0f<\:$W]5&pWKV70g'M`(k56]ppbSmA2&o'GnKuEugH@54#`g]Q2<sofMRMNbJ]G&oJfRrD;!ic_;
%YKZ&oPJ\/jln(;4O%=HT'UC'A#6./V6Fpt)^>oEr#!D]rR]$1l]^MjH8BZjnaPA?:5_NVN\1uYU/9_ea+)^/Q%n[R2'7D=Z>=KLg
%WZ0Cf<giC7/SbO\[R'nkMsJ:k.](&)9"AoNh-`Ht.LS(].U]uIcM5emf+rD63uZ(9L^BVHnZQXgMhg[6r7^!Hh7[>PA:^fSKW4;E
%Cd?0Od:K7SZEe[N[dbKl>H<W?7BSG$q.tU5LT;2YP"A[Hcp-mr_[Q2P*^d!\9nC,(BmN[Y7a+\/_;:;sNO:l*jM4.*20Y_57DMqQ
%Tbai6<U)o^j=3Mo5J!7a,_.<_?;sq*0]5E+)"h[&E*9Vp:;!et,HL]3IG0dBf/NpN<^nMm44Lr5Un(NNVE>Ji*jC8LTl.Hf/gq@O
%:qp&3b]N5)#mm\FRB?Z3c4Z\lFc7[N07qR>>AI(q;r=N")Wa&dkMBL"B3OBQc](arik_g36V0N+H3-KO7>k1Ypo9q-\8=V#S`Yfr
%A0#<n:u'<Ol")PMUTCf"Zhm3"HJ#?]DmX6Hac&g?Yr#2$S6PIeYG=#p/&Bi!j$3ctQ1j7nTh&qPq*+MWqC67Pduj;C3CHJtKF53$
%8G0l:14Y+ZM_*O9SfST-4A4ZcHXUkB8SJ4km%TZe,>ebR^P^HtAn1%oMToaX7s"Ja8Qi33VGt)J0U-UVk,:GN?[AE=UqoU3rII;P
%!8i@<NHsRJC:1j\UE&4m7+2164@HmZ&VcLo.!fZ#YsZX=maDPFDF[W%h(OoZg5CK=^^%-,oQJm/"G6Jr>k?g2s(,J0_&00PW.#UZ
%3;\!-6\o<!;l#L:"FD>/C:I?>i#,X;I-[kK0*QYfLLlMe+@\Xh,k]\TH8-4?2)(K4D%Tgm*Pu^&(W+(1kZCMY/I>NdKm<\fD<Sul
%#8r&\eqeo.oo*X>Uj[R7j.KeYEk6-[cWP:SA;n6(g+[Z'2Xh3-[CuH1&Zi)ZVmm2q<>hrdW56dp:3tDdL>BDTPTaZ*>=b&sG<i@U
%3H1=E'ME-)P0S8<Hh>c8/gXn1hkU]M=*3gD4'?2fiRM7]6?L.egOVH#^$tcNW?3Sl%NoQ=.i^kX(\f9!fO*<UnW/F+a__)E>n[aM
%aC_Rq$i/=Pdk6fT=<FE;BItZ:LZFl(AY'>h7Bf;6[N(Fk.k&A?QRC]kPB&6p19<GS]Wr%M:Y2l+/gad"7'E?o3Tg^+]<#AHCtmpW
%gP+nA.o#R=^8j)CYUb]X;qDL`5!i%]q@"Zh0TpV&$8QHWHehl#Tm.PjKl7_.1saeu;Kt(B9Zl-UG)6]DOs*DA&/A04pb^+F"SQ8@
%!s0MbrL6_Qglb'6VFaFXbH#3t/B<9@atn&k2hi7S1V998//Im3i>DN-an]h>SKk:)[40WD8\de9?'Xasq*PZXN2DZ*K;KH4fLi/4
%mj<1BV`08t4a-H_G<DeXID#;7d2u$Y8-Ylo#bdDop:\gI=:Bbh)_HdK+pP?*/i3.PbI$?'8qX69F/(TLr,E6O%R$kD%t_:5'nTi`
%>.f:MrG(2JC:s[;gn@g^J7eQRpPZp_)oS)+5ZBGM9$imZ.WHbJ-$hhDQYY0F?:tY8_XXSFPuqeTEg=)f@@hY&<rT]@;i,["Pts8s
%.iV&[)p_@o#l>0d'U#..ZI)Fu^e31>Op?i[d8CYE8jokj+ahenE065mX-UZ:"5kM58T1#==8=I>n<-'hJob/AOj_S^6J_p(C1$4@
%[gR2sNp=+W24$p,0JfU=N7)(=L64mK0UG(6.>fZe4nK%+a(rd4VEj'%fJ=dR/;6dUnCl[7=ra/+cm;8:m-<**%''fX-+UT.L!0N@
%;[OLt\lhAF>h^'gTael*!!j?.c&tcK?gJugl"_mek+qOTCgZQ>I(%1Z^Xk(']XZcMf3ogL<STm__KOZNBr.br93XrJR/hKGLl0<>
%JN8b:74"jq/\5f%We?d'037FBDTne2ZfEC::3g-o,0q//D'^U+9V:\p8c&Cc`b<g6@#5D\<Ka/jNo9p'&t9,>(A!S-#-!^5Q4)uf
%m]#&CL7M;$6O%r?oup6sYWu*e?"#r:U2(=.Pi.Gtgp)<7k'hhcg=C5/KAA$2@]!LK;MTRGgcjGqLCa4*e=%6hB.J%k^*gJ"XAsg$
%YOY[^X[`_!b8nFHOI_%MG4Mo\T\ejH#8dL3EhoEJdRKd/UI`XPE\Jg:pT[^-4)%F3'd1U]+sau/N!;kt/XNt/lA>c^hXBO=Z2`=*
%((.T6:a:p*<u2Kjnms--$8$IYDE@_l_rYVJcQ]>UTZ_@jEqfZl%IRNr!)?fJkrFc)2eDdsU:rSi)a$=Bb>FnAs,^S&<LBrb]Mf@5
%r9Z])9kt^""i7M^f)ehn@9g9)7E[r4B3P_Lg*VOY.4gE3W<]bu6]C:+2Wf"Y+-Lq96>E9>.Q=,&6S)up$]f1T#sg_jffs=*GO:73
%FhqO@-Ied];%LUjki&mUNu.E=#PC=]l[RS0s6[RNr9sY#g1=tji$?ES=W1mR$H34Qp3@u'9p16tbmmc4_e_Tb>V!A3UMd:>1o@@5
%X%1?8/Pqfa=>f&j]9&l4N[ic6<]LH-AY"2?.07D]d@`ZhLkL_J+sB+c_B_RJR7S-l"eL=1@A/V]&\J659!"\@/,jk-O#MjGnBe<(
%6^t$a.3S..JM+Ofos?Ga`#[C3VEG"@h,sh@EojIO'kimpQF9^*h2L`tp>F.HHko[LT!%&"_@9j5^]f<&X4AXP$J<4;l@^$C,9+'b
%AR.>j!LulYK*>FQ2FN-YBiP9cM6aG0UII\P..4`@aa>0Rh]s(2V$?4QP7i!D\\qc*T"o9GYIX]Hdc%QYC>7Psk$1:=OA*+tCuds3
%S;'OUMpemZ&Yu.G<6^\5@P<7LZ9e0uJ0V]Nn*8POQ[fl1*i0PWX]:&(+FX$?fDG79dbd-c!-0q!5!dmM!NfmrUB!aRS^^Gpel0\J
%,,`-t3![t5W]Dtfc)97Xb,45Z4)-I4+5fG%_:p)<&k8kA.Y[]FTMbW]-VD.0@#X0K$O%`[[?NohnqZD^RN'ks[n-i<&?_GTR3mL_
%'ZG&\Xu)&:`I3S2)^Xs.BCObj/4tfr&K?YomW8X]:fS6'eNW(:l]fDgBWAn&fOE9ALA=ROPSO:KdkcN?6eJT.QiV\0C'tO"S'0BW
%9ptZ!`^s/66&[ZN-L<aq`e&W3QCs&c<U^/TdLpTOU`+51ZItuY>#d`@$?.1<P6ESJgHn:%i?>io'SOH-C-2Yg3#bP%)g*f0]aZGp
%)K0*Po8k=J*TVO$.4`cb<^?<A7Sc6p,/B?flS>;uX9XH@WAqu=g*'%#>m(X3(?!(3Z\ej;%VL^?^1$Xt>k6M,NP'HndP8$u*[]ma
%%=Ac.PM^2a3#HpEG/%1_l\P9Lkri"l]="a#06"#+@H?a'epZTXB"'lUkH01JbP$j$Nu.C0)5[7lJ"^QO:C?]l6ke'E4B3*a5qeh8
%$Nsb!?3id,GhH!JYYDT<F[4oc>p1M-oO\[a<hQpQ=(f!p[PW\?S\iP*oLJ1/FL.FI<AH!\l6e(fVj4=M>3TamLKiDab?CVV>X&le
%M0Z.$PWH#K!S`K0;Hm(,!Lsm'D_,,K5mAp38eD"jB+_7=?%Q$tK=VB6:Q"N['^%<X:bh-o-<6opUBEc'8t)Gu:$^MbCK.Yp@A^)1
%eW,eM"FnKFF^*R!1[!]l("<5e"/Qg:4DR5q@_DsL<)*:#-NR;[_CZ+H-RtSo-A^GfCs0t&`U6=OU"&2'6@He=[_m]lJoHK_7g)3(
%reJ/N@9,\ZJB?$3f/?qLV^Z,nVPS0&Q6WGEL?OXc!,6,(=O^l&+/0aT=p/b@/'7p5V$E&T*Pj$Y*7bc0Mq2:h_<hetRp$ALh@hN(
%KYjBMV-r[em/A_rQbtZn9O8OSPF$knGo).EHVW#aO:#62!>S8DgEdL#iLcS*#"n*XhMLM+FHmSHq+rJZj)9VM>fn1pf")0l`eBQZ
%;bNR6/h&LU6:4j0`]C3-Jon,DBK>r>b?_<],*:!M`$e_rUf.Ru%s=n$=uNUmK;P/dmqPqY#Z'*uC*g]1*J,HqLe3_*;cO_od$'%q
%-"Z82d`(MI_tpA`^_&GC0Ar*1:QY)u!&/-mMbG=)@[OGi6MRQY!'9A<cr&lXg]FG%fjV+D[iPDKm)C(nFho*?G7*g\<Sap@W=F98
%b.Km=g/L*aEY8lG:2Ol'#u+e0PQ`[tX@N763<22U:C)]X<PE]KNJ((8FI7JNm>HQX4m6eV..BW@Aa6H-93=MJ5I#SjL;W`3aGWVl
%GHW^\kq&Ro#2A_d7F;_A9%-K(*ncRT):Y]$A?=Md6&C.-Y#XYG`)n"rj5?#-F__f!BTijA<EM[+cDA"?U@bl\+3UK>jMUX[%!%R%
%0_W>5T'G:0kKk[9[20Jh,qhbSEjDS(^gmf,7SUc++6ome\5niNWbSXqg9K'4p8/QF;&6`qe3bV1.JAkV:@Se)=u#l]%(4Fn9&VkJ
%nXB3QJu4VL`-*Th4P!4eb@1]4UA$Pk`2%-XWr^N_L)\E;f_hHXb(C]/G1q;(V;YSeRqUG<B+B\-6q<Y^'L]6/-R`!UG[s\ij!(.C
%&Qu+.+\59Srh\[(PB/nj[-1R>TuarKneKUN2+G:E56]<fb_Goe)=f[FFD<u_pHmVSbP@lGo.(NdJBR/'mF=B]?NU)YA.)';opJ7#
%a$Tn)NYD]hM"$d[23l(i)1G+!)6V^sP*_]D)daC@:U`YuJu7@]/qa5<A6j#K]J!8P5VQHD%I#90nfO_a"`u_dr;I7!l$A>A]U*mq
%-dQT.78P+,9+8l[niEf"@H.mGB;XV;kpBTNJ;iH5K>M7.J#`p_/s$W2,Wb)doh?u:W5WV?B%XMUoag:Z#FJTtVOuG9cCsaU.6V$Z
%7f1?E(piPVnBeIpO:CR],*<U'P<.Lj"+"-pYaa$WBJ:Te)]Y>F\r=$u<#Jce"g1(TD+k&"SNWI&W_J,C=Q^RKF14"6YYgj1T)o[e
%33[_N@@Kh=^rjg%gjk6MBVuXE-'@c(:"P*Q+ft7=<"8-r'Fh<-7Y#o"Z8i'qGqZ=<b2s'?h_Lo=eK`>8HEtZOcjK`;XNOs;d-V?k
%%4%XB2QE>XG256EdoYVMo]=n^QN/'^+"SB^-rO>oEJU)4"iPC-S/15W&f!CjI6s&[FX<GS+c3k,QFFaHEe^,)0o6%`6uOcS':3*X
%aA["Sn;E8:78B6]MtY7&8/GdK`,$kDG(&8kFVON(^BB_G$>63Gc-f"Jd-3H:6u(57En.t6i%W4Ej/e+:5;HDiK._R<N.cgU6!\g-
%U3_$A^JIifMMdi)@.#<WL?qSg0sO^SE8$^e22[%"<T5l<)m]B5STc_K+$fSb;,E@Zen=L/ROQbQg=NXB%l70^3+da<'@[SMh,C^K
%1^-("q8a?XroB53/FbLS)$)Wq!r7MjK-Yf08f:'Ihb?luE)R5cZ>CgF5i--'e/)8ppGd+`U#(Fu;-,U"Iq'YF80`'CLs(XR>=`[i
%$Z0jVUq3Uc!:a]R@arssi=KsNL)-$'d[X&T.t:h\>HFQBE'[K=>=h3h/ld^ckdW.qi%n<_'#,Apk6\QGWB_aaQ=D<b_5sGd;MW[,
%-!dCK<a,/mVsPUNL>f3\Rj4e?=oM%k0U:uH/jV`+TUOR^fmS)7:p9-&fe+K9akr4s:Lk$&"h<B0`(1>43$5g/:&:Do25F8&USs$Z
%As=a?X8C4,a,8k]Z513Ri\k-KCrs\pK!">5WY\cC$c\+c),r>`(G`C0<e"$lDPMSf^KI5Nc0\jM>?%#UMCUaZ/DoUUBB'SZ<o\@\
%rP:lknof`*Rk0u=G>=FO(D[Q56XKcG2I]JX1n3]JOgb@i:^os<Dt;H.530m59Ek21TRgJ0\sTiNkQVKY`e,s%%NY]lD+Z%m^o`qT
%Nl%.u14\Zh1j+AD-(!PeZTPZ0f[I2+%#9ZO3qSVN[$i9-T^T)-A\jk0N\1ck6e^6C#PPl/r52,pqlL9X8P:=DUB7,Pg@a^ZWN/O(
%h=&P$a5%A""HR[1?@NdC-`./2H4%gC1(:8Ok5q*55]=ai[@c?40?Kft"6D[R5Do`CUZa14[k%99*Sfm(U;\K4R7.<k<9]Hh"lRH"
%GeU36!uRN6_4CFq/]3Sj#HGi4Z`O<5VsVd8&pnEN<a"L(;3J$^k?=ZH5;fqrr2"99(V"&")?VZC[]&7AP*8%j2/('t#,dMD8Fm79
%Bue,M&^poB=cT*\MT]#h.ZIU93*sj2Pq=qar&&*liG_e!iGCf2B')YmN0-5uE<t<jpgA!Cag\-GAV6#3lOp.C9.!YT?VjPZ,L^Ji
%@Ws26H`*P0mcN/nD,V?_&fFg'badMU%I4=*q#u'JFq5`c,[pXNoUK2iDe^K]\8J(/-B>AW!8N,,s4(s1ba:+p!#\mcE4N?j38A6o
%8bl#]L8JJg'p0pRF"@sP+VGRSr;AY/"KtP?^>SdE:\0a8gjM$c5\S-%L(;1QZD+/DDB@5cO52jb);U(;CQ\tPh!3F9+aCf%Q9nQX
%HB_gr]FV3*BS-=i,Xl!>jlcWr;DR;h9g^2c[R5N'qV:Zkh^Su4'%C'hbFgfam9[P7K3^L!4>Zom_]qM,g?[;_B+cYVHCg5<&/D!&
%=ng)ZL9AY+!&Q@:/6n=OZV3>,AEE!\'R>"-;M8a&>B)FOT8+-KXe<Xue$E%FfUOFC[.@th'eg@!,tlsu8D[$AR`Ld6"^'LV.hCjn
%)RuBCAf047,846s?Br?n@/rl!^)pBBjkI%R8I,I#B#.kM=HB//#kG>YNDbPW5j=2uVbL6'2I_i-_"-3UOVC&EO[(]Ejp!tR;-lmd
%6\ne(.rD#*Z.!PPH5(b/5T)%TPNGOKl_ZfhU(sXQkUi@dKZ97e2oKC2?u-oB&ATgLAP[9?CgN&cf31]_*G,g9RX^C,EE4=RP;-0L
%@0F5eh=R"Tl7l*:i0P"k+2OTfXd9^3[Ho8+\3"Lc2TJZN=KmoVOfs2IL-e:[Khf8\7b+/r/p<4==-e6KUkp";T'Mj#ZHGPH1B4.@
%Mj5sJ'+$D-YS"3n8XH]Z1!YqReFL[/N5d'g9#O&U4p")%lTt7Nofl`kWEflIV"a;j6Id(OX(gSBG8E'`40&/3g`!`9m,1tl#DFUu
%6)iup=f"Rnc2qg%`<)O00\A.&N+K7Ha"kO1/o<k`G>N^b(6I=7QUQ!0`4(SiWP!.1OV%Xt5uho!IHcO)$Q&_bn>BDYA!4C]_bW9L
%/XglO4Tn.i3,<a$?33Dq8G-^`(<!+T+9nVUVI#Z9WOZ0U@6MM2DHN\dJQ^:FTeN4XCY:f!_-iBrI<5`*K-=2+ApW/>g*T_mj60U-
%K/G]K(m%sE;lhSV.:f!&@aOPcEfaQ4(0Juu%;@@K');`K[u2b:h^o8B8e]?9B4.#"h5gS2$(1A:\lM4PW;+=(/$h8[l/`P.CCHC`
%lXAOaSX)-#o2_014[AD'UoN?6Smei<kJ9;&9+ukJ6c1\MP#Y4?m;RnVVd6"\DbM4;@+BN2<EK8MQD9uLR^uVkTND5qYR`5X2T_a?
%Vq%esJN2fqEpuK\nlf*76u$h9_0g^@7gr7SeW=n04liJ.Q5`/_:3EOh;X#\%,DOHWE,l2(WPlKtJ%)D=Yb"9sN@)/&G40l.@oX_Y
%"Z\/0h.]C@?4J6j9m=Rt&_,/N&>fkgmA:j)A;oPZ\uT&s2Ne4p\M_Knde98daD:RX$NXLH7Y2*K6-h8-%IVd6^%hb9dO^as)Z3V2
%3VN`O;N6)ZDQ9(V-.L)jpT'lm2[#HRdY*F[+q2NnQo!gb_M:3E1iHAtY?IC3@<SS@*HjI:Tp;5(&%[gR.=E,Qfi5B_80[]Y:W$%6
%0f4TeT0!#5Pr2/k-&6j:ngDbb/`F(\[\f@hSStDLV(F4Q,YFH`C[nZIIqL3p'rk1kI=43o6!c"k.[jYISnt%3VSX/oLGXTA`4nA)
%(+YJ67?`mZ*j7iLdMgN=9%TL-cDQ`JY<c=20OgJ&@MtsV$l)K6%E6J$\bcu1=UVaBN-8e%UICUH/)(N:;6KJuUE-m[$UC!:0Gmi#
%7,0>;>0qja+'k[nM!AW_8Mk&k`JUd^b.=9PaB=%F;`)+%T\q;e_Cn!)/2&/HMc,h[Fq#92]Hsi3OqCV2P%F'JgYFHL<JmZ2-u]oM
%Z$o73SkW_,p:g23369GaL;7<S"EH.p8^q8e=,,'f5-h-O[]7iNd)-9WDV)f:pJg?\b'ktL'%-"WY^IfRP/-+u.q6,r"!K68G/'Xj
%h:6O\eVO#W)VSn.,W,dXUfY)UT6Tf?jMU&u%kF4k`5P:#<%0Z2O3?Z.VICs2[pm/W#.koc;:,g#ZH-u?,;Ujl?97II4erd<O"X!"
%G`@T4^e1mi=!LE*5k[6%^3t`N$Ys;nca#!u"F\r6he]N.EAl\#(4`0I_J94foWXR\,cW6E%i;e8"fGWd!CM,S;$4qoa0@4]p`Upg
%7N;D"Q.kE&q$_q/KG67H:hVe'@TC@/iq`m(*I9Y3>H<-SX?7cMjqqkcgB;3CTcn+b*s./kK;W,o69m0KjqumBSnPPPdUj[0_C;EF
%c!b:U)(RT0:]X<iIbE3`fB\3\?@:mFT@XlaG]bB'e<35"<NXtASIBN*%.3o&j;!K?9's:1h/;M;$rsWFF`5/ifA/0.g,>)jZFE6g
%/,nOYDpFZ6qg!F^.,MnLcmE0=4:`a8I9tp)ncG^r<fYN3=A+C[2$dk2Rmj)<'<o<gcmN5"\lp4ljQXEk+X2XZD8/%gRO1Ut?,#;B
%.3o@b+)8kj;_3Y"f]Q@0iTc3j9iqG7lEi2NCo6XNJqd'8EHZ?ZX+F#p4b2QH(RO$(4e1q*s3%'>FY>V$-d!4o:r]2gMnVm8f#72+
%R#NJA06T+[MLunS\suhg##]IKC`^i"A%;Q^Bk])oW-ue?*iFWqQ$sJ$b'+<&id@8&GprB1JN&T9*oZ_.&,Fc2B?qtr&"1hM,N2D1
%r[Mcf=O=Ak-6sCA*CA]Pm@8?DV=QAGW>^BaC+_>>m%:RDLK(61=qAb'KbQUX9%j=IkiP'M4u$?CfIVfm?h+Jqfq_.Q+7r#qX1B/"
%r':.F%Y'=#=nL>24r&D?dZTV/j9uWU(5[JEWan,H)SFX72sGOHOlQt)!Xc=[5BU]Pnr]QEI)`@o/975C0)pb"rS$[Y_E0Y<P/RE(
%_U*Td1ClO,62)(nY]eR3;p_ZjZ6g$k)He;5MUNnt8Z;iF5U0(dMBnpVR;#K<[mQ/ZdSDHt,NC/5$mqS^M3jib=GEWI$,e5&?l79Q
%<4MO1"9bU14ag!!15W?$h2C6\UcO&4Z-lca:Ad4=/KV0&TI';sSemNf0Hn`hL36A%e-LuO$HJ8aZ,(\tYRqT]FX0T#1M>WG#XGnO
%/N[u#=q%t`N[&h3rkg^Kr?8Z4Xe@LN%(22)QO&=V_+EI@K+^b$=P<a8/bQf6JK84*>d^:<>BHgZRTfVP1fnjBV[$N6c'/0,H&9\5
%8C",BS-"JtMToEH`CZf:8X44KibS^MdJ-+78HrjsX\n**&hTP<ZU[C6"NV>le;,2$6d$aW7b'E8ER8c2r(saYICVTRYDp7f*'hC$
%RkC$d5OPZ,.tCk3\U,SoG.6&LZD]>#F4b;>WW24>[`>ZDROnA)E'h16&.F`m&s=g.Ee+0^_,AmDZsF[)JX^KhBkn+$bJe#1,#U"`
%.%t^#Ip@WV)<p]Z8usdP[A[RkUn%Z6WIuML`N`a0+_`"Gm&IX/Z'^1oeAkETO3;"=Ml^.KD`O/4`:5EZ6]>HI75FZsj1@?MHE2d`
%,Mab*>UcOG,jFq58T./,0Js4+2E,XBEat1J'01>dVV3hZJg+^:_jA.;D2@kM04"n_^WWDOPH1/t9"`CtN2U[<C+QBl2NaOBh2RG]
%jG[)X%pH]sR0/"0s/ih!"Q1GP32YG0h)HDaj\nP_eF_517UdZNJf83-0ip^hTd(?uMai=jMF7fObQ%-oeKst&:Z$)e;jtEe'DDpU
%3Z"0f_pGS<P[/flSSLg?GDAi_>j#:2Lda1>JK!6(MVU^<(gZ[2FD"DunJ?OlqGpn,e6f!oiDd"jPPETt\F(W<-lf@8!@*9#R5;`$
%H:u=/kXcr5`nKPnKf-$5"C]@Cb=ghUaQ%:7fXAsUr?1il$PJom<1S^VlOcKaJhEKK?9="DLAPgG*7]L@oX\<T:[:,t$39*p]"N5]
%95,Z-ESqj882A)[F()Y*hGJm<ep73*5oXEeT^=3a+J5)m46>eB:4G^d'-%paK)?]-kk/U8=-SVb+O"Y=ZH-m'X/c&##EQTMPRG".
%S52p*=q9VP!R+0AY%5Io1>6fB%epO.q6!%OS2@jecJ5(7+[[er;34>CbfWaqV*H]>^nu4-]An),k\+]b#qQPmncM.]SDGeo#A^%R
%^+5Nm6nFm?Wc7O?lS$Yt.RsP"%RR$G>*npceZnB*6Y^^>-qY6]-+^Rt5u/^%:\i$+MP]Ad%/5E&[S5&U:*oRRcpF2&h4F?<YPajQ
%ad\2^-B^f]Qi2FX-k_s&X$fp$Hs0,p#EI8M3sTLe$QRS0,=q)edO%Q2Fi,cehAp52i6'V3X]F&='o!UpBR&1r_OM-[;$!Z2,SQg%
%N30Ll`CP;m`m<_$6XZd_4p^L4g&^BtAp1`g4#5'r.DmO\]o!sOI@cS8r)sqR^5QSE0Lk@'DuXG[I_<UDI#r094@ntQeBC$>lTUe9
%e/6<jCouf?2EhQ;`gWm^+1G;^^kSFP2J$H$,=:t*1>o=/a(c]?*G$];,JDeOJEU*.RU(+;TX:YcA_FA'?s4<Z%GHp,!85g&otKW*
%$%F-p'Ck%@6N^\Y&!E/\<Ql<q5rD[,IEA/7<-!cuh@qo=Tg4.2'rVoU?0VM"W,ISaHJ+0QQ8m/a6R+;a,VHph!tV&6\cccgYT&E$
%I3F[`Ng$rY3>busc`nA:NDVAs3b)u#N\FOtQ-;QT.EA'A?505]X"HY&:oBhlP8&_;O;Apn6eM(J8B<F&+b"+C/O-!W/D3FbEbSr^
%R3SX1+Z5QpN8%Bu13@RR=Dgp"ifOPMBhP\HO0CY*AGNMM4A;@7bM<*NQOGK5[s\G/ULZ;?)9agY4`OnJUc5"/C=,:V`3t3U,eK_W
%V:Q`V^Dl>>UsZ4@J>c.S5tKOIN>:jR>\:$F!%;RK/a:+1OXZolq19ng0]o#(VO!ofZag,e/635I(Kba55*QoKe+bI3QK9>'"/J8\
%M$HG^5qK)Pj^b'[LJbU<b''sRgYAYPn54T"%=['3a0:f6%_Kr_0een=Vm&P-?Q$62r+f*s+/7;WaSuUeC9/?5<%10W.MEgj-;G1D
%YJN-WFHepT?VlV@q>t>k'<.q>G]FEfbCY^U(k/!r)u.8;-'B-D7_psgEU1D!Z9tos?OQ9Q_2'5/Zm$!_5VcQ/%U&=n;(*@+c*I1[
%6.(L*REi/q1:6;BP9s.r&&I,/A9)BA$90K:mAS7-iGDB.WIAcPe6,DtDl/>@<C=TJU:59PV21gf.4cj@NSk7[I3sh3Q&&!eo>Op]
%$Wf^SqNJl0aVTd;N3:qG%uS4r\I@b*R30GW$m9.#pdjL[Kk#h5M7,t;FBt_0p0eKGBd4?!dHqS;@[$0NVjlG<YUB[Ag09bC@L0cW
%*CJSX)7JqJ;L3H)BS0`g+c.:U..80D4TLeMp/b`dNu`bn!a/LIpQYeHW@+lAWJehQ*o6#+O\S>'0u#TqU)I5ap1qT'I$K((DNs]s
%47temJJ`.QkKDO$1^T,#'_Zsc+,r9pj:)q"ZlN#MD<5.FZS$nl?!qeQBlUu)h41mtd!>fHDt!p]CCP-=ci?@"XuRWQW3\&O(^dj#
%$I;TZ&HHOdYVne9!X4+_OgS(AB;\1MW/l;e;@<M'bg7Ce`*Ps5To0%0a`&b&,9U>q11ggPB"4lk7C4ir4Vo+gZ&I[!61V`f%5Ko,
%+0oA@=Q:]LXK1_lcGJufq!ZYmjeP"t"pM[Yi>)KAL)rnb4hp=QA6Q?tCfagCB\DJ=XCl>H)*P6hcU&1&;/n>Do0pK;8!Qk<a9C;2
%,G[dQ$`4X#,/$Z$Ue_6>e+HI\p2t+`/XJ?rDFEX:ZK5j1Ltk%FWmCJc<*HYNm3"t-I5bH=e7)@'aLP!1*H!'*p:L^&m"OqiD"#'j
%,\7NE$Wq*NiGRi\c1!EKnEEgPd#t0oD*:b`%D.Dh=tP<jP%:NAOp!:V^c5PU"^ZZ/0#'AF:doLI+BiqC%D!2V;I[OKcc3TtC+JQ:
%AgBZLM+*hnJ$fP>;N&K-7'nu64d,-cMh)FN^@n^lG%>+#?oP#>3s)M?VqpK]Y+]Ia>EiJC:ti8rg]G,G*NMa^>ren9bG4AlMCft]
%a.Bh^KN43WWCgiZ>"(6=qk'U#8:.M`(Lh;c=&";@3MPnd2TVmUlMbh]3dD:gEbO"7A_qkB5/!IQ#f]<sednOWae_e1-!h4$&T].e
%-+.AWT<\H7X`)B-0Q`H69uduW%/2do<9sAQX)<m...\LKdhOU<#-0T':_`J8)8YQT;q2fu`5c7t[d;L&2u@48GDe>ArG4!7@uV[R
%B:@ErH5lf>iPM`@`LJQpY(O2'hP`<c;kSQB*TNO>36hS:R6oP%"L6$N8j+P)!`ecZPPsSla!\XtX_s3f$t+4Bbsj_tiZUf![A2&h
%OiigoC"j.o)XpW#=te^J9o"GE.n$ga/]e20XIN!TZe^8n$d#jJk".EN3N['f^ej\qF'"r*oS3+&(gBWC/@$=p%[C+oa0Yfs,d]"j
%4f,a>`_RifXCZ&T^dk)V";J3Xe*Hh,Wo9IsE'VPIF&%/*g3[XI!.8<(1\Gdacb<Rj,9=NDb7u1s$Lll(;`H[8cnqB!37JZ&EJ_o\
%:`I"d0P>1DAbrjZhbT;N+\Q)uLb5liYbiHEF_c($/?)4#@(7;\\KL#X!P+`\Z8ddp`!95,qCmn39<h(C05^n"XsFCr+TY7le28mK
%ZPpH1/@lre_H^Hgb,0d<9Xhr)>Yup_+%nue8AM&BF^:':F6kq8=Wp?b[j_i%fjq%A(Uhik;[+D<pl`f<lH9TdC4gkf7\CfF]ABj)
%KA)qPC.Zn%mD0ZiZ(/RriW8l`)H8YJHm#mW(XRu$[U52f5I.kl+-D$Uhm\OVks7+'e67L3<NP#HU);LJ)"1QD`5\9j0^>'-ED@ZH
%S22b+X+9&sq7'`mE>[J2Fi:$\Qq@kE@d=\8B[&$!-!K`r&>f]I5I;P@PP=1k.,3OTON)kp/&\7##@@\kh,m&1.k.U=P$4esjLb!*
%hV5T)50%@m[0U4lKJF0"nD15;Aarct";Md\,teFUBkJ5"jcGnLUq[[;W^5pTZR-(\5840bf*!en7a/rAhYO>'+eXerPYa&!Qq+Ng
%,Rb@$aWW%2l@?_kJ:?fO=r/D!Wrh.=9f/JLPXDf,5ul@U7l^kcKZ.+d:j='TaS,!IZVqe7J^%.UV)B#TMq8DTd[R8)MU;2<jc!_P
%2b$Ph`a6A-q#0hm.<-o;4Yl,o@kgMJmNKC/>JnoBTD1d\U9aC6ULJU3nPBPq"N[,>R#K1d`nt;0A!\l\)M(37$cQdYLRp`=f(L3_
%j.u.W.B&["&'G<-Y+q7AXA&p#NL5EjYh;2X[-t5hqD8]k0pFfTi>l&cdD*#T[K.o.U4f,PSb(+p$1.Y-[VIM>pg;;M\,9DHXn7Zc
%PpK9?%8GIWI+JRG"59En+*jZ8YPl@eI]1\gL87/=2*pGJL._59EYA':2<lHo#%17D#^Z1&Rc"%3Zc*<j#jq\,I[u_NL>$V&\MhN/
%f!AlF-C@f/C_YZ$UfL7%3Gh0A/22p^rg[BP;EWI[H9^k&mgH/&(HUK>.3qak?)5B=B*FHh]C6:Qj&Ceg$<!,3<@A!na<-O[<+E8_
%(NMN)hjol)<&mf)P';WdrY.8NG8RWdl&Ys[p.?uCHm(s)8+6:FRASc;'6"89>t)A\F@Mt)A(`$b?WkZ`KYjZSiQIQqO#+V@$@kB:
%WtNTNM#*i1i71.:B7N)u9NA4)A@*)j)o*kl6J"1,1#NBp!O)>L&m0op+B)pu3cNi8_>k8T<bn[qcVPqG"PitfN#[XiWNUWncE6mh
%Ud^QFq,0RRTW'>lc!`L`Il()&'k1q((L)C/.@ik?8BHdglrFQlo>+-hU6Qop^Pl^"_<OrKg%j7jhQ>>:,X'Jd(Y!q:2Ze+hRY^au
%GU[L?_/t8;D7`eLVV"M:#&dY/ltZ1]HTpoq`S?`*/QHpnbqo_n#<%]cX?"<<EVL%4!HCJ5WhfEcD;>YKPD-S[8T>Q\$-jm7"PG])
%9dioLqT*$Il-%3*<_gu1&-IP+hA!ANnDt7(]tL&Q027<k1/[28@_H9L$%VqO:)@_^aS&4/c]Y*6JFO?e3EsV-g*c%E*XiFB!&6ND
%<HOQe49VE-,ekJG(3:Ulhnl4s*/e<Q__h158-^k><!6h#,hR[qY*`<J0,qH`&$6hO76d.F5ntniD%^hm/tRq^)alWZJJ^&][Q@CJ
%Hl56pRd*L<),Wp;hf_6h0N@'rW55TM?f1U?bQM/@3Fh,-+b=kFB.((,<9E>*,A>,&p2'Nj93ZF2UjFiQ;K$^S`#NS=n6cYSfJ6eE
%Z[$4/lXSZ^;G_)I2J%hnh[BglGEZY#@?t)5dXJkP`<lN9ij*_:'MA_:@9R$8O!7Gj`DSGDjCg(#&I$Q/LX&F.dn9,2=MjS0<`V@:
%m:cT\&4U>W[A./FA"9O%Kl_K-;<P5D&u4:5=#s2qq.m%5[HZ=BA^R,3/"]("312a)A*..*KJ"gh,T?b85?nR'X6%\l-GhU_]B>r(
%W7"4WgDg3b/e&dtoW!NJlKLM/g;tU+@_dRVl7n3gaJ;!F.h#!T7nfH@.HTHbGS+<c1_eGZ[d3b%1qI8B,eO*A#=SRPQ%l9t<ipYC
%`)ssaeXD*j`B>9Epo%X1=nI_Y$hO$hemIlP8:J'/"_=0q&%I2ZYaA=b<BhA-]rf$Tl_Z8[JgE/m[V8^F,lAnbNC[M[j:L^om>!sY
%os%hS'+Nt^@>GMVddS+0@QsZ<s.W8Hl.lS[3,-tVO&j#T(t+]8.1Ur_9-b($>dX=/OmI4Gi5GqR#`IVnU_hm8@+C]V<(]=a1*/CO
%aNU\G.7Zu34OLibY#fBi><&KmbCF9DUqk"iDf05F#oRGT1eX$65[Bg=4]7_R)e.,1<_Pn'onn6dGaL-%eD[;.Nhkj)Z8_62@417^
%,q?k82PA$gb&Lh8k7?G&0`VhN-'uO\#61SW4+EjCQPSXd\H6rsO@g1lH+JoiD<';;`uPdp$4X@Q9p6;Y1bo3,1qf&q.S;nnX6u-<
%!uSVl#tf:se7r_Ro4spJ1i2M6Pu9LH4(f,/V$+jdeY\7Sc,J32G,:;0N)Q1YqWQg\RAV6n5P!.nSjEj-kq/uqBI<3pnUo0<rm@"$
%>ZVoVPsh?;ma<bjA/U\CU<MfGUC`6k62WO'!`E=Z?m_'ZKh$2<]&q;'19!^QdS]U%4]^1Ec+7fl0Jir"5dg(YTR`W^fd<i+fB3_^
%3ZDtB?eR[LqP)7_:4,j&CBO?dkUcP&@c'S1(0*QF?78QDobm?\4&VWR`ae\H-h+C<'Qj&E<)7C!?4P.trM@,Gg]+>BG8b*k4mM0C
%6d&KnH)iA4_Rn?)./2G.O\ZqGW->W1[F;_5$ru%DGB:(`EpYm)B?LEp.Vn3!.pF(Y'$PnCC*(Zl?:S8!OMK(]"AhYBJ/1g!na*A7
%IB3"T7OIU^]:lU:9Q?h?Ui??d+`]]#IBqfiq9DcSV4b:)'9eTk0;Z\1;C!0i,:;Sr@d0ngGcsG[PP,=ScBquC0B"@g/JUeL`o27`
%\F)a@MG]LNC1F18qj*8hTU.f_dIrj[0h!oV$,uV'YLc@e*ga=(Sb(BX^-_qCZA;BKDS`%XK9<!sW`9$K'&"j!K@VeU>C90[I>_8[
%*B<Ws12,[,ia9Y'::J()jW_U`N38TK.-6'6,E;&gU/_`(HLTeUi0P8&iD:FE9GQ`OrQl:2:(Cq0TI^R=iVXs*?7L(mdQ+.ibP9WS
%23&.ikX5rhAq[*Y[o;c%Bes(^$*5$qiOf1<PM5(Q2FoSpc,uPG:J])gM?$^Y]!kg\n.;]"+A&N0NmAsHr\)#W=2I%6XbN"`*G%<0
%4Z(qD-a&Mui!V!hA6MrF3Y3o>.roWUn5=lMdS3)#T[j>WE);k((\d]Ga*ME\<b`,Pe@=2"'3'g6-oeW9os'O/3K\o\KO]a^[6J8$
%I2+W@P&-Pbb38ZE23f=X#ID_0kgu_CX`ul6F<de]Ji&.)1?O3]T+&6V/raCUeTk'7[p"&C8<>H^aIPj^iN2F#+un!cWC!hTRlsY?
%&[n8(H<BMt[M<`5]H<II!$l7^%HT=jH!=?ERU;>!GZEp2cVB?:%'fi`HkSC9d&"'rY,%2UC.04$F'.T26H^&gbTK7OBr=EVUZN43
%Z)kDu)!*a\G$%+d[i_lWqn70[qa!5`C8a4qTr`o8!mhh:HjQk"8f_^k^qF['>Sea,MZ>[k8Vi!AM+HU*54-t"=6_St%(1,^U>(Ep
%8cso&<h(6Ge#aQBia>s[5Z^Ye[IK5YcLE.kGlmKUQ>T/*/),^qrTV%[C2dER6c.**49@?'mXNW2=ZLiiQ-?XV!%^.Z"pK@m>#p)K
%j"-^r2@3V]CnT(tT#BkgH*ToDUB'2N+Y#I4C#C-RReTgLa.NubQOEG*Ir=WM\S81#Tf0*I28Ig.fig;HWCs+sOLjmKV=9-Ji8G3(
%/MF5K#!JV),nSuAi;eYB>D<O_c6EfU;!4#>jFR)gL3bTd,1899\"2m]@?Md$lWbaQ#(0H='(uQ62m9VCUQ35/-/I%s8-n(Jl)G>Z
%7Q'71Vgch#o]\\;W1-mIM1l'ZdG&SXp9fT/(4r6&OHE@Hqi[_?PV%KhkSBuGVi`Q[YgeUbe?Gg$4U?RZ9okbp)#DOt&0j\ED)uks
%+'N4?-RBReAPkuC\WHB@Yua@PMHi6EQt5eh!c#D8o\`6&87Lfuo)1'>P1km_#Dq)?YcMFTE207BnIg\J[*(l+F5Q/tEW7"q?UrFH
%%a@'LOu4!=h)cJX[GFj?!n;jV.nP]28ag$lN:oG%4q<E"Ca0?fJ`3$5ka'(00\AP;aoVTTWN7d7Ulp\b=HpbM9)o-TH9:bmGFDRf
%<:bkgqG^qr'p(c97Jmsi>mnr@aK4*3F;#:*4:2$;.WgjRMg_cm2\D\cEQ;qq(J9PY>2t[!6t#p=Wu7B9-4P;6\9(5;.V2Lld,$%9
%IiGlH<I%Io4OiaE9(i3$-R!/e@9o+__ZV0_.NAgnXQ@a,!0@$%g-9nT?"t@^@A9aQ&fE"q1Q=qbOJ)Xd^edSu5XUb[5$Nk1,s4J=
%fR]hm.%""*eD<5#_t4\;1J\@A0PZ5BND=uME0Lq0gjcIGmROT,eYY17kIRF%M.fG^GD9e;CIjkdLW39mU@%iAS"pe#&=,\gA`Ftf
%Kgubm*Wf.68i1/N3?<tK18N2>6P;4TUu'Er8S&jFclql:"A(o&X9"ET:_?&U29$0CSi55Pl-ku2A!b58P7@F._U2$F]SBeS=$llI
%nAM0r>jAPHhW.2Q7VCU_fj[YbPqeJ/'YC6U44P"X++.uMgIksq?.2VqAuX$QYPhun3@b*g&*!mD)K^>I(\?$.]-PM\-[2!1L^"L^
%>X6ht!1%[Ef2ppbX&SrQ==;WI0FBKiIrHX<'mnsTY<doeP+oanhqKE>3P=t5"Mh6oKH3*%B9;)-,TR'13+6NM<+>,(!p"I(*.>8=
%bhRrt%iZ'ndH^.nIBV[B]W**"Os2h6*2JONFf(S!>b<Hq%,lV:']sBjjJIBPapnaCFe7c?pJ1TbFYe!f;nGQGTcpH[VR@"l6&(S\
%1;Z%W3M#!=Hd$j-Drf3>-001$'$!#A&Ya2h5_.5?Kj!Gf8(*fk9]Be<%Zdr'W?9"=jTi3_YgHdFnHNO*r+kH>n?'):<iAm]4lXJ/
%ZltK7*oIi9bnN21jNpKK#CA$K@pl#nU6Sg61KN0IZ(n^o!6sRVVU$mlMY<]X-+Ta6P!V3kkgN@$WT6h-la*FEk&`"Wh#$)d1cm5Y
%P9BQtArdm8YF/0XT"3UDQs'1K1sSe?@Phk8FVd'+OZ0#:P&ZITpSuH1;".@b^+lh6L6ZJs]i^K[PGQib-%O(GcVuF[=D:JHfC&'+
%F41;0TY8A:;UJo(<Qt'14_Fu$Ud0+gV4D[WnJiu_7Wiu]_D?`N2k_5,V@,5-BMfI:PKV`,D`5irPKh9:bA/l77SO=$!GjXJ![6Fd
%<@gkZ<5U^=WRZ?o2/2")brGR6.\tY"j2YeF/#G9;_KL(OB&XD>$r.n!V%@_)#h+>Fjk[XNToa%HSIXk!-&FXOX]dl[,oEErH"M9D
%s%tftCg)0:$hHrV7b\anKl8j@lVoD-A.*@Pl8eg_a,g)RUIio:_1B?9nX9L&S*o;,NQl3%,WB#g4og@jKO?%%F0<2t([i>"(6Dcf
%Vuq_El)'4u0.@d'5dMIuC1Tqu`:AF+M0\L\B+n5ooa]Gi?-2@+B)6L-)CXh]_ONHr21&iTW)F^CL%0"ll9`7$fpK@R"A=dID<)#5
%oW)^`E)O)CRj!h5]msf/7[Z\!e5fka7m0mEr`e:1Jpp57@`<^G)Ass%P&-q?MX6OWT@IgM6EDKR/>7(f/0ffJ2/M?J4QA16QH"fd
%VU6tA-O`SJ6rH6]q8dg.*\p\h;K7g3Kq2OXiNnm7S?[U!.P?'>o.)8\PRgrC$?q3Kap@&SdM8pkC8=Ij#FJlkV9<+"AM'ihGSEIF
%nipLgc+DH4!"4UH`0"LWXq`nJ[&QugY)!2\0P4Doa^[BnMfF0KG'56t)NO]nXELCC^`?>Ee[_e)XV=6''gmIJlnRIq!>Hpsbbk\R
%E]H3\QWRr$Z#c[@Cj.X`*Jd0&YEZ;g3e#@YkIcq'U)22V[I"G-*a,j#-Z,;=n2cCD8[M4CmHH"gfcjhs$$V`GBM`P(em%EKd`(3C
%)&h3t;#Y!6XQ&_Q/>6S@XYj-'>F0dFfZ/H_Ubs[MI)iIbOT*5TU1YqN$O*F&lS0YfD8F[oakIj,@<YrpZjO=N-65*4P9nU&OkRE+
%`(E1q0(Vs-&)-B1T@>RlLJe0K$I?&>Uk+m)mr;*pgmn=#c*o!hGi^/WR6s1YG?f^J+-b6P\<`RJdPo@>Gb_sI+o;u$Na&pjeti_9
%3/p$*D##6NU$XN3VT//[H5%Qn+bi;E1k2$#?S[L:s%&pGB^A6eBeQN'S^V<OQFDd.($il`F;&HsG:[,L#bTY%RS;ORY$%+aJPb"A
%p[HrXS+Pb5Z/O?(D#S+=['Wp95@/4mdm9Dc#tn]tT1@Jp]M,l&UZ8cLi&H]7]pk[JES.$5Rt:!9/!["2J6\@m25MJ@-J3\12oTne
%?oJG8^<._4R53;p6BsDrT@N(n1)"uT9?.;AEWgJ!1TLkdh@5O+aD\7U\a+6Z(EgR,dS!Qn[LE.5<Cgia7]h44EE6"1aBhd9:?(g(
%'#+0E665D<W!&)G*G/oeb7QAUCOAf,.3]Aejq?qp&3u3ePr2suPt[>WZQ^X/-JtP4"j+"(XZ?!%;a)mJM^2JkQ'hb?()*_n/`-.#
%jNch7Q?c?Fn0U<1=`Pafh$n_'RF7+tEb`dmn,TQj'Cs5*O5F)#2rl6NcsEF@?M?q<:`i)bL+(_P\./^o9]n2nT>dR97m&85Y_t%X
%$.<j@^\V9K\g`YDMh0p'$X"u'/JIH,&:mQ!37;umP`#7r!(5Jbh@7c\XG^.Kb=jM<`@=:Bc1Q*/.9u%tn%/m]E%%?\-`9@-`7@Yt
%"l6P"h;L($Kr9r*Fk\9i:7Zf2h&7Bf+feitMr@FCj>BsfjiuOXcA`H&ZsiuQaIZcK6bNDiGX.B?q/aiMeU1''ig,>oG!BJ:l*+0G
%gmL8U-m8e^QFS=7)=BX4>?FNk9(@YrWM*6C+1lNQ/P/?(k=FoDD9-<9Q$R?E.nI";erlc@AA9Ze"TSG@J+6A]YOS0ZEcnQ^<F"^e
%K/KV9"1Xh_\S<QBY"SM$XVAR6lt"1YW*J4#afA=tcsNjA'BiXDK3Oj(D!]#+fa7kI1m'9GhX'#aEj-p,=ApC`a$#':8h<iJPlbZI
%:iRg!=[JUW+9FW]n%BW$R\<'4U"DO[%WZ*qpNUeYeO[g(V&lCn0o7NKi]sUX$@O>\:oqHBA4B;,d,T8SDTFB:+pSYd;,G,oSTnm=
%#WB^K>I.jd1"R/u'O3:oE'Th&F.KB\+s5)@>&+0c&K'ouql/.c&kVPjT!Uor9Vu(rKSS3PTf^,;`-RkkQ`GP^,qXH(K\[Ub/X])C
%gF?OaX2,CjC-fp3Tkl)`ERI/W&F%*Lk=4'S?Z3GEaCNgCfgOKt;)4Neg@r#p?51kgMijSp=ukl/E)+WQM$;aP<l:TLY2YBoV`ePO
%!FV4If]n`-Od,`U^BdIB!a+rD@Wfm?P\ocfUe#5e.P6193jlWRFbNiFD.Ek_MO0k'+E#/WY\KU$SKm7FR5rrp:cW*#MIkli-WN:N
%:g1!1BsC-^2lkb.)F=ZqQ!rk3X+ist*c`nqG7H!4:8<DRBQVm?`h1eLb,?(-g<h\]U`%C48["dfe)`K@OOiDo44>6U?e`lK_3DI6
%.&,=?H/:\!Y_u<nOu`Xd*+FbjPYDehK:uIc$V`)84Ki&EbGenak54loSa2;"k02CX:K?cbO\gmT&drI%8e:4JSZj/R<I$K[KtOU,
%YnAb#AF)'kf'-;eCk(S;C/oh(%3/n8A=7Qh(t1fZ-k5%!9h@PGg-2Xa$l\_DCWeGMG^AH'`<.8If`1eO%(HF%XO'n3"ebb"G8oXY
%b*I^-F_/b)?0QJu8i&pcb"KYj9[613WD14l2br8Q\KVGsUo>kV^N#:Ia#p0:BHN6'*`iZ@ST35VDT],:*POZUBeoV8P6[j;P:3E.
%X4LPrq[P\!C7BD<L.l)\;N1G'/F>p@+;nZ=6It=Wj2+[/T.tIcXS/`$::BGYUO?9e;PQuAeYLVk_?(tZ=+g(?7`t*XV/W>5Lc'[t
%:oOmOHBj7nY;EH+BtZ]&(9.8N%>PTHMF6)WocSIeSEa-e%sZo5K!quX/>-)V9^HdT<crf&9*.--qHA5/=':?Jaj.V/'+E*EM"16`
%AbqH&A"?UIE)hqnV<2J$>0oPoJiDts97K^#!9X;tSpbM6ku-hsR)J+Q&XP_O$&Y<#mKB;S'u3Z9*_o/(SLbiC:XPl8^W57nGEf#L
%O:MJ"fkV):*NE7._QqTGNPmODf@RTWl4%>h6c3qa8t*M\-W\L`C&p7@ru^&WJh!f*%<Q#=AIM!Rij7r^98etr5'8gc)H\KZ+Xl&E
%4J2nREsPRmT$#l>k?Od]`sQTSGX^j@l_nqdC#-t`mW;\H>gd0FZM]HQVl$>LHa`!>[:[kPI%PpD.7P&4M0A4*+'c^T,0.6"%2XrE
%`+FJ!'W^q%g#d$V7o+T<4GR%7%#NT!6hf"P5_B<B^EY>)/UZPN_e!NkomX(RY@NVF4/8aAjrr+&)G7no8S6f8KN2IAVkCIKQrb:[
%$?oW`O9[$f-16*FceR+4!nkjC5K1#^meum^*)fORI4I)#nbh)i&?/.LMPEmGm7X$/YG$,r(2]=OD0oS>Z6JfUoNaUV;1#*F_hh(h
%4I+&\2K[KZC%2l>Ni9'nYopa9PX!a;L2+eHCi%s3L-QY?G8/tuL)dPJ;3T`:6Vhq!^'sVa"HjN]drp[<TTFVHlUQRcbDc@$.@TZ`
%'3LbglQhY([!_QU.Rk#T"a^Ud.;gLn!Yh[FqGNF/A@pH3mql30!acflM4<c[5Y*Cn4utO,=+9FnF<%<6XsF2(f(Jor2Y9p%U78/q
%0_nrcQYL\em[7fAmO4ukr+3MU:iKkK_Bd-1LO;J#F>>=]+H9"h6D]t88j%E2_ke*90`!`;o\,D1a2g?)![GCuTh(R64iOIk=,`fL
%Tsu_?]&t)&gle@N]K>%(hPZ/&b"q[5EAQ>!d&a8$LgB5eQoC=6lu]TcPb8nYN_j,np%W(15l[8Ceb6ob^*/[cfn8C'>pVND.@ni-
%GZt&>lGeqsH.#M#"*<ncJhPiD#8P8mULf^G84jFk[Vt[u.!/IEO)BX5`2MV!npK7-!>sOmAP'7RTsh#IMg4s@Z2nn7\@.5J.q)9i
%q`'@3$P+h-EjV>\m9;,R>($si*Std0NN$g%Df6og<_qK&cV6sD;NJ!9^j8(F&X.!>%NQ'K)?&m/gAgEY\(n(MamU&X&i:lj#"+:"
%o?nKMdLAZ36aL?[;,u8rOI%5=5[W-)ABiqpMOCs>KU=P+R%0J-kBBi^V`cQ6c6Oh5.bCl(PputNms_e:f3=+cQ$#q_p$Uh59QanU
%oOJCJP*9KI?T6n))75ZGH"'9uo"-CC7X)`-PBMQ)S0L<sZR=OO-:rb:E7,nDd\j0L(oC"3F(F^1R_L3r4@INc6cKLP5qf#Nk=VF!
%,29@sh701LZ[_r-dZs1mm.lMP)^BFj6Ih$%I/6MB>jqQ(X4C51A7ggTU8<!*Xj_C1Vlas8<i#cnq4`e4=_J!uGM(YBLgFXRMCrY?
%Bu9"gAC$Pua:hU3=I[l%e?G)kb6R@,*:0).="DK$s6NHI]Q\]!&C'o>AYle/>[Xr6<_-e^fWr[OFQ9Xi)2M6:$qup,\RF)okK+H?
%;Fd:Oltm7@VWtA\fN&gC-m3N.f'R;rO>.0G>&LkVCr=7:l_MC4?hN3"E6cSOorT0SNR@p9nb7KI7SO6L#32IEl_><i+a>"O!A4'@
%e64[P\N23j;WV.XcTP/ZW$8GmVVOktU.,^6aJtPMip`#I?0$j4UU0iMX5u8CgBg6ZoK.(H`@c&acQ.F(2*Sfj8^qe"PO2Gp8-mqq
%k1CHY_o2%Kl/:duZQ,>f1<L=u(DHSM$,r#CDKCU'M7A.2nd#eq,Y%'2mrdS<*0quFQW.4#BK=G:\q@GB#_+_^OB^K,?976a1CPqu
%@FoPMB=+cKG2dBq3md&=/Zkds'a\M>>E4n+W]#MRU)5t1!TACj^,K9`Acg1eG<_@0?,8,3!'_jS)bWQSZUke^`r&gSk^Do$[eJ(`
%+l9d;iS&b"_:ILRCDmMOH2;-)jh&sO],]:tgUNf9Zh(@0pVJ@gme3/"gSTX;*,k:u4XG-JT8Qf\3E,PcApJu[RRMIsZ<*%GRFX/o
%lYOV\(en(Dp*er-`A(9'l6nd7Z.KWR(l`D;WJW`EbP$?mFElR[#Wl;WpR11NLI9i/*`k:E6o&W*V`lbrB2b4,W1'$McQ1oV.Z%2]
%I@^Mtrk\&e")hjTFVkCT,\8HUH2tX2;&ArL,@\_@5;G)BD6emjaWT36k\;a_asWq?/RR86G074W@T@B02D6FY'0r4%O_pcFoLnMj
%'P#bi22$b0$?>?261/<b`.56B*H!5aNk5_3:`s(6*$Mae<GbN:Fl6_kp.f@0eLWD2Gbm3`&!C.QQXcpM:5[:fdAe-)l.DS@.4TWj
%;.4?*i'=KDoIZ?4a+8gaKE0XKb2`k9<QG\0P44)#hLjA-$p4tRVel<@,tsHD[O`#SAg@ET,^mLZ[0[<t(lqG.oZh44@Nl-/Bcq(^
%3=T7e6cX'mi20>P>%j>Sm#X*!*M'!\>)!`lg82i,S"G&!m5IsE`CGbngL)1!Ct+GqBtk(&&VK]/3L<0\c:Bs,.?9>@h_._\HKr`a
%FcQsq4=Dt@]f0e38,"#.4XF*rJ+8,g6[_:eFMF!D#jR1N%*A.`RIhuJ/G/L1MNMFIJ_Z#r^_;!0_om5?*f'B"$'PMi(ZmFUOl^'?
%_,Tj`f[qOP[UuOM2<??Hb\QZoko)0c.orSm0905BHZq"U,uM_D_9B45"<*539i^[-I03od8g5T$c$p+D>#?9ha1Y^=PUkL9`L:B#
%4\?RmYtqC6$@u"pfZBA4MlF,iIHE5A73I;L)uaT<+tkQ7d0X&LiGE3TZ@&LIPUN<HVSHUhbBiO"JNjKd6c,)b9$Ao5>c)NgW5EZk
%jN4meNp:obW].aj[o:lsY&ra4ofO6$Q3Ag4)R_%h?=Nc&5#R_+C2.WA=J''9-U6ebU1Ea::M\$jroTM@?Fu8lPskW"q@jR@3mq\^
%-3A%ehLjl3+ae\.0-7C%pu=8T=B\B.?+.[$Tp<%Hgr)f*GDISA-;MY$#Ol.7(]Xau5PK*t9#nd$chHfCK_BDlFB,`]02d]*husV"
%-4u*Kpa:.;'0$2dQ#iD/[:A;WCq=&$LXsrsJii]'G(s3)Oq"Fj05<j184":PHA>C([n>6%(ZbYMR?sjM+R8T<Q=4,(%WVR[r<(GE
%-Y-_cVXPiH7/>9XJ5J9Z'g&k+&Cs5+goRbIhHFFGFKJ!c-TuVaB2TD_VK2'?-W&9&h>t*K\<&JWD+Y%uMN`QkG_\&.&nJOu8/4Y*
%,+17h'Q2F-5a$iFRqYT&.bR@`eP*/`J$`HX,+-JQ+JUC[gsWpaQ+j>?;er)lUFM'LINt=([RmL.%`iA%="\]S.$+sR(f.pQgI'@d
%hi.a1=[">](b1G)\)s8p=N/o:0XdiLVhM-q5&kDErm=PC!D-*JgSB@I&em8pDtdESb8M*sloqb^5h5h7<M?$@X$UHs(;6b8WqS':
%i2U!?2d+Gdf5pKsXfTJ=G'8L6.1EmkG!NEJd>jVB.kFEcMpf@C(O%f:'XL=gH?qDET_[H>h+7^DltQr3a^171O>.Gg]]Ba-r;;1Y
%7"YElP.)Cm$St$"Me(e%bBj.B/bN^T*c/=Z`24&&jLE@Nb+'MV7]6ZmS=os*b]4TTF8h'][3uZ^>lOM6Ol\3HS3H,Fg:aHL]X6\s
%ML0,ok)tI2ae>,cAJ,9@pIbXsQ0"R)8GkXl^ZOckbt:Hf\e\(2c_7,CQ54l(,/E@<`uPUNLO^rE_iB9+8t`+YBWfFD0Cmiq']l5a
%E>%BcW,Q%C5BdjpGh<cg</mbmi4/,7-p91s?CMub4$e'>?r$5'D%ot_LL'Ppm9!q-G%(fY>Zf/_'e_d#RO$H;='bbq_Yr,T$(5=6
%Gu.k;*mrt0@M7rZ;7q3kAaf_Z&7B$49o6<(Wsg1tThHqUi!%(<ZH.GYd^k'1'%monZ&Y<c4@/EP8feV2X5njH+G>q;4F_9L:G.W_
%jR+NqcV]I1;tFl9o?BUB]3#S9Ktm.K,i6Jn2qnn>87S<^H\)/K#dhWpGhQ8.*)Ji'EPYUXM?$`3\;[r_WsYCU3VbT/;q,G$MdC9s
%#oB^/EHerLXpakbnosM:'R?tZ+WQ[;3sAj[fL*+N+camR[_9q%SR:suU4u@-murnHe;C<K9HH4YSKu53aA\4lSrn#U@O\p6OPltt
%2kFTu5DgI>^`(Cn*Itrj2/o\e3Hj%2`_tu6N2'H6*DUIM%#F$egKef6o8p/qOSnr1FBm?GW)Ygpa)%SqBAYF_(P"FU?Lt2L;QSD[
%do";4.3d:!J/&M4KbY9g.-Gh1/1$lFDm22P"/*OnfO6'>q+"7mQMX!?$BHYi4OIluKd0ikA6]$#K_dNKF;+i5M'h%KaNbT&f>Dir
%a%GS1O:2m?e42`tR+&Bs2q(M!lI_SI@,Di?kL(hg]WN+h-599dA3qi88#i#ANb*ZGa3K&[R>F9$Q2K:3i[ku2R/k&;6=%_@X2cL?
%\thNQT:5+>]L"E6<(M!_6*/leb>B#9/Q,kokVPWi[DJ(/q&'9q5^ar$'s%idK/<#p?"?E/c0FG\QI+,/fkC"hcMY+s[2AR[L0JhH
%<4-o16g`Q+5FOm[*NL\JeX,;@1me8mqP:d]fiS&ciHLHmgP\B<1#\_#\X)Z09f#6/I\+B/<m?%(bi<5jV$]]8g0>>[\P2$oK_Xoc
%X._#&d*n7fn`-iQWk>L5JXg\88X2+i3U:R407fY491sjseY;BlPYS!%eTirh=7Wjb[V8l9"-Smq<pM@t`)qlKP&"[!`n_Pt9.dtD
%WZrg3qNWd7NGBGMN*qJ\]\O&c/3#J*-'rO=-U#L_K\Wp@2%bF"`sJ$U;<3Cq'k<NdBqg7As-6H,\+3/)fc%Bu*1@`i/*.S<[7X:V
%I6RB?JZ4g>gPQPh80ghV#$i_mPH8Xk-MkZ/Y#*Q*WtP5p&P?C+\:J5C+CS=g.fHF8MR`>=QKM-G:p$G6KmY9/_([,P;*3s1(oCFi
%[h^d*`N:seRteD#$*.6T9klE[\%XS;8eb;]&]V7O2Ts!]S>3OREL1orKJ$?bQsT@\gMUhC7&M:!<0pd5!*=t`#&'@ic1qdQIeN\A
%UGK3+.[8Ftg!sUF`6*8/UcYk5\.@/Uo3N>n9@^B1T,u1k;)2JlD@r0;))@i\_F.=.LQN!-m2qYr%X@cZM+p)9U'8q;o-NWS`8b4#
%[aIVGQ!Lj\51!/a&$9=eLN;.jF+B*$e,sVQ6M`V#LgjXn6DF2L=I.la9lU3j%)?<PrmjkIarM][C^pQ56inH[^Ej/3M1XM#cmtpg
%ZI=q:10t/FL2;*)\Q6.3"tK/o-#!/;\k'EYaM_M!=_(@mmJAp`!Oj:'Q`!3scd[=SY+B2Z6Kp<]=7=g/>9#_QR+JG%?D'p3KlAYD
%9Hg3lX\[VVX1Gti+a#Z6#R4Nn1GLQc+2EcLeGM.c/Yef`T1%X79cu)FiYahcM2aTDAL&3oe1#-]4sM2ZVQGgF/lT"Zaor,`gs5n.
%[U<5m0#XD(MZiZpisScCnF'&+*\!1HSu1[$S%>\<5O13!"?+@#[IX0_)6ZAR4H=KW:)ckuUteqD+Y:I!b6.sS9Oc'-g.+6r]Z%j`
%jR(3$]0PDg*kUeY7;+'@8lHca#`aM(Q"n(E^SHVNj$R$e#qaOKqPcfTa(&C<=m4)cOhlUsm`3!m@=8q2JhX[k/KGg''WdZaV-2uS
%2Os#[#ARN@O&kH(cTm]HFsJ]o0`[j79V,Dp>R[lIi_;B7:+LttBtUbsG*tW?:]cY1'0XTtO`_ns=O27.[s[m[ccA*rrLE377bkuc
%OJjf)@eD@@-ps)ZVF[G[3ASC<B.9$g5mTW=>e!aDD?c>d-BI\c8jq)59m'6?VhseA22L@@QcU`8eaJ=lUdp7_KYX0Yc"V/I+dSR`
%CuaZa"K_(IWGe*Aj2Z!=Z2h:9V%1JtH*f689d"f>a5<$_\G@:U_;XiBK@Bm1>KG5L@)E]$ATA/d-*<<+:Min>@pm7Pcfd\P/QG1a
%%Zm7F![;LN%ad!HR6#]-Zs_#:[D;"l'3T+iAr9[H-u9.RL1RA!D.bji:V;Cfq]P/Ip[ilhUp_l.PcaldV!gm'JeG&LW3-S6?W6(/
%ok%f=Hdg[(003P6<3[)^o5=$VA^WND.unGqkn2M6S_+G=iK^8GDp:D\[Uk635+?.+$"tQ/Ol>nONpMnYPci2.F6cIp^&;\S-g9!I
%"et_"X'kS=f"QfG=Ym%XB,21X+qQe#Km^P6Vg1@W4&HCh2Sg7Wk>?kHO/fAJ93-a],#8n/D.j")lp2,:?k_Y63UTHo#\p'YQ)lf@
%7WjF:@Y@=.(H2bbea?.pq@71%g7;0EFQkV!BhbKa/)3Q'MiULSlU\EQ20QQD,4(_IgI:s6<CFr#NuY![oY!aj=:0t7%8f]%ES"3#
%W+8MJ8bX4%C7k#;/`@jmCWe*DQB&M.B1;Rs8+j5pcpB`A/_*8\<g$"^65hA,:1sS.J:SaYddReZR+T<n1,<n.;PI!1PG\JFX`NF)
%1W]5X,:h$(\;kA<Ph:1YWot(`T47%ZBb,jW&kI.[qs<ErKGlauU$Yu,ZRH=,a/%`[$nkM4>E-_t's47u\Yg".0`nujq3!!7CTB08
%'smg-l)X=FC%N+=1;\I+UC#isCWRQ=cq/k1T)t*WNtfioGJB6c+H^P4/'(EA.`?;)87aY(Xbs6q?@ZudD[/8qG6ika5Y9<n^gKS!
%FqVP\bZ'tteb[eDj,h>?g3c7SAH4.b@Hg<8Q[V8t24]ufC/:SjLqYmI9=W?72H1:6%/CZf2Vm@hlhHLW%Q2F+/5OF&eN6qYT@q`h
%L^ogm2;!WL47k@`A-YgUnNYk22$0.b7>Iu+R1*DeSJ`U2OjY0jlYa[kVu3D3&T,.J5MCCH)KKM=._lf3?'fFjn`n%AP-B>[!rVso
%s3P9*XF94S<e#,B21'ek2B%6)lY8[aAAU9FpIG;j8^`fBmE6L%&i.rh_P"I1><26'[GD9kCODZ>)R3aHoj[DtX68Pt#AWp<q0H`s
%=!jN'cQbq(bGtIt5q6CbMpqmoOn!9fHGBa!^[Y+'I'3MHIt!sAP<:P$/h\YO.A5D!`X;Ul@.sl?[ok&M2DZaFfLFu'qYfpo+rI#r
%,`e>OZ"JV8>00^06&-_SGfGoK!ctr^4"[bfYl'fk?)S*mM`HVX9E<S%VPM/>Iu6jCqVDDpMpi[X*kOS,20+RJZP?;;n*g"IY=;jm
%jna@?WIDrdS)/ZemOEG>EG/]?\;R_G72(a#\O<\4RTa">Q1YsJ\5fWE>s3dh9I/5C[(Y@u0$F,6oAZ7)/P.hr8N'aZEn&eE)Ps"V
%1*uE$/2I`8COS((m4qtJqgr>!EqbpMm\(!f`dmfIh]OKF]lmQk]i,fNrh,]kqK#$#_KWcjV9e3)CRd%!*E/dPTTTrAU'D8gpn?PS
%1S8/Gqbt_WqWpjZb]J$\ME:C]<!;6bU"B(E,L>[nl`oK?\%h^qhZ!6Krpdc'kPa<7p6YgOMa&_1lk0D2(l.2smpbY!l0N>/>QU*n
%8.5N[r9^[IXN7+%28FcHQ?=om$H=*gAHS,+MU$ge1bm9#b35XTp0n*n]M2#c#cObO/8[5PO,j8.r+[2BLfV-,?1Ma(p>F`(K-?=?
%AQ\A]POg%05XM26V_4AR+bQ2*aX#RaoN*!f8.,r.J2[@l]6T;Vh!XWV<Km-mq#>b'r(l1%hM0IG`T(81.ZLn]?g>[!P"NgFbBa!r
%DkW*9_SI4l\]]i9bL[^^,>UZ6TguoLmY>5Q"p;N-?.n:qo@_@cXUS#87,Sr-54^lq?[t0EE<LKL]nN0,h$jh8KVTb<;C@W]f5+Qr
%qKV\ROC*P0.4EuZFfOL3Asr:igEsE*#a(QE[mK,_#'.Pd_mWPn$8Z4+L7IToLg\5lmqj>/=9=Y?&+](Qc(uh*Tjl6-I<q?n^#SMY
%"9(G&cQDl7le>cNr?KacAJgg1`M5j]End0"X,/Cl7kl:%]gPQ:SX1.l*9q=*4BA<M`DC8!Vn"WF6We7eJHF4:/)MR;D5>u3eNm6f
%P1?+8%ql&..-4seeZItnF=J%5k!M1oO3^\EgbN9=l'oHr/)_U[I(^5%K7G^T,]&nM&4l/-,dhN.**)V22NHXrJC;E-drM8m95D5)
%mMJ;a4^VI0pJ:U]YOZnWGCS8;qTmlZhu<?<Idq(B\+XY,&V&(*qjTfhTD3Z?Q<oD-,@IG\qLa*5dpbP^m4?23RYr<rN-D[gdEL;j
%UCB<-%TtG:Gpq#2]A*S;eT/.SNL%3R6*cDa?J?t>gopp,m)KMD5p%p\NfitihX0##ciIgO;+&u9m/[o.pkF+-eT5'\b'#=JU"Lkf
%d1-Ybb58;\':RT!KaU5uo[/(=3PC%'-4j%>BN(1=Oc8-d><;%A>&M34YumC&j4V,?JdNBVF=IofX;Rp<Vo:U`\pG]KmNWFe$uL?u
%8B(</Xg\1,:*BAO?68-EjXIXJKn("`CEm=9!)XqIjAWZJEmDc<?eMe=9MOO89R&h.Ml*q"/Cj6nl_=RPVq;kOT!h)I6?Y"kZL[m9
%)A/\F"g\YEN,@%\MUqSsCAK_aY^nS\mmMLaatq0):A-WpA!uk7/1'YP/0hUMGD+?:dR.fh10=`?H;@6E(t^98L9b"9A+fo@5.3^f
%+[+6sB#'do=9+@"B#EsQiW)TU+1:NsX.DpDFDY]CpEm!?oF0C:d*j:(YjGN%eT6mWrlEQoZ>"!-<elT5<aB$C7Fdn0a*7l5j(c12
%3B-)4]^Jm;Q!i07)`i3h*?u.QBm_jX'T7Q<QYl44MD4LOqlf\R5#Z1+BK+Z!.&]5k>?MP`/6;M"5Ikl6Mk+]M,9_J-,A;q4n<i?Q
%I/h];p4Z#PF0AZ0,3:.3-W%YUio`GpPZHXg1b6l@`^NC<FmV]$g3GX)o,0)\@H@$5T@TL$4&>X%EhNBPl$lVJ@Gg!NLI6W0l5fcL
%:hNrrKaA`>0PrfjHV<WV@>p1(.Cb#d,:GS.m_b8!+F6t1PIe$l'B9kgNf?,\reQlsc7)/0&cTP>de/PkZ_k16eWQe&YF8FN1l)po
%f?aiU>7U=i!Ng>rGnNFJe1%WJSRq]^!/YPW=q#c%0k3qKF@ud[6mELGPA#m^B2QNUW!J3rb)9jh9[:+qC2VLP"*O.+a7-)l[.bPA
%3RZp7(g4ltD,U>jK\KEe"(2`\C)8Z5]5T5;p?jgp(e/pXgOQ(j:=n[/$=\&HfFEtWR>X;KSmUl4UE+HN(]PdONt[_!oi*tRPmK36
%_Vko!-D8NN;M#(Og$!]j%_*!SL;PN;l@Bn\[bp(H!)d7K`<)G,jPeqIicUjYd7`i?CPQsI+N-Wf!L`U//PiL,7?pdP;D/nVe?3>9
%;oO5.c,)k!0WiXAaF#'V:m7:@n[iYN5[O0t4C8.A@:Y)Pl]iXfU_Vc5TI<T>3l'rJ13=c]l"$fT48E')ho?ij*/1"tXL9sP3M'j)
%XhQJ=WH;k(YKYr`Li:"<$=g-0rXjnL?kGt7?Q2$$W3=k^*lXDDKscmWeEr-)j.+"#Q^hRIUZ.(H*YaTbOdT>l4^"(5SNt;Nkp[]a
%AomT)\DQ/(r6g1fa,[]I=G;AV:qb4(i9:J&IJV+"[P\j,QtNiuA$d@@Y&c&dBj$ebZlMbqR'sON2/7VCju:p+YC`7Kc'c/4h^k+\
%Y/q1ebZp/p45,`n8q-hKD5#+`6s`EKGInP>lA9ir/<fAEoH?\;FjraB.rR7[$#XV%3X5:X@79hV#6.W]S?0Pj+ddB*phcqp!S;0L
%F`%7NW"&-+<,B1jIXA6Ej1Gs^oo6Cp^ZD<S::s&KUP2:e,OV/?N7-u,Ti^i,R(`C5W/'f2D1J.*P:;6e;_kOQp(Uit)Hp$r<A9nB
%S"B+t[YpoHRC%)CqRni?K,IOT4>X:,=2YGkY._k[c"Gq,G-KLj7Cr%Y?f%X1&o):,(bM(\21!sg(170O_WjH>-lI23@Qdq-d4ARK
%.C!3iZ/1/hd\1."R<l5/q^#\f;DR4D/Vt8jer(\I5gmk#);L>od]EtmIT.-Z\V>DPAc)N(?Y<#]Cl[iUrq4&$X5Ecps7Ho;qPPG7
%lG*;eO+6mGJ+Z&*iBR85rQP<;YC>UurQ@G(nDiF%mRR7W/`MbkE$:0@`8c-EITMUiEKaLsqJVF2M$8)rQXR'fm<RDe1`Mu:S:k8u
%nW5=B2.//o]6'@aaWtZU6OL6_dnUt%ZYO'aLjaOomG]]S>X&FIH_/L=ihRZ<ZHQD&C8NDbWk-RbQaQb8nltRl?5=<b<LbJX,h2ps
%n]U9Z>?UmOh7g7DN!OD7(DeJG<Q1V^heW,ZHe:d@mGq0#d)@Y)Yu(-NK&,OHpQW^*W.#D2<dRnX7YM7#jhr)NZ^.nN"M'PT*aOZB
%-Yk+DW-YCugUm3m5kHXE-)L2BH*oQ&=b=e<lr%,Hab86ufF7Ao'[iOf=$7a[[3FAgjXm8pW)@7NCrMpe>p%kjbMU8CrITe&U8uO6
%/OI)+`=\5b]o[CE$\k#,=.t5V;!g<pNu%th^5[f,E,L[]Han*KL`1580R>MGZL1]SCUhZliNmJu'oTMh4H?KkqJ*4h$4k5\<uUc!
%S[&pGNX3&nOL!L)Mj12ea05\I"p-u)eI/TO.g!me<Q'(JcfpFkG2!*`]%^<$L`.95.Z+h2"1T;;7/Z7;S0l7FGj6gn^PQhi+T8_P
%%H*.SHMJb4B?^u@J14!g&?CrRSS1<V<Z^GCk]#MnS@KakBi2jfq7`0%GY+aD>>atTbOhVJA>;slD0:c)n*H/q\Ybm2Y=%b4-(Zca
%21(>o=$0TT?'$o_Vml[!_9K^d7:_nXYq?NCAJ$K+kT<=7ep\W])1R">b4joI;6MK2]1-XD(eE26@8A:sO;1Zs@_/)+#*Ol`9o*oB
%9%iMZVSCW*(?S1HXTtBc^7E((=FE^O:7KYt2_I>LCTf]<B.I2H?0F$`l-1k+[To!NqqQQA9k:(\22HU&;M6>.KaZ95GPdj'nJ?]N
%igAYblrmk5,*\Ju[;*B$X_(]SiS^^<AK*EugZZ02Ic_)6@skC>G!Z%pKSdM8_[fXF8iC)DA*QKn3[0WJ$t?+dp=/Bpeb,&1b.aob
%]#rLjqIm@L8kmoss,']beaG)qm'O3hWh82*l:]#kk4W]\c"oa\T+,1JH)1/@Ef"FYKbO`i5J3]W@Q8Ed3t<6t[Ss!u?[LWs.p9L<
%lHZhQIHIVmT3Lgk].U=qZ+7/'8i=MiiVp6%U<ug]-/2!(%F$N3n:+`D9eue`#@u]s\,4n"8U8e7/(QE^'P[8<%+7uXS4ut.]lK2Z
%HbJj)rp1HD<:&VE'IL^G3jIInGE(CjA_k/KZnF9DA][@(U7k*N`%!oKP,&lMOFe\>j4q[7:aC=#F#H[%l%?,oPfVE;Cb4iJKWHft
%:``ht,CoK0X(*ul=JY]?%5d^5%(W`48MQMSj_196@AO-WHZQo#7`QD[4cc::eX$8N5;Qn&OLk#'F\6_6<'M^#YMK*8Z7%d_kNM)8
%=_GDie5s^C\gGM#BL@%EC0t0m!C#/kD*_2$CRq8dOiMnOZbT^PdZ%4GD7WOmfOmB(7nY@q7])7hHmBh-kE-c$Q2&H"JEXYJ//t\P
%V5T,I(cWbghK&YNDc'7mb@u$>'o,q-**]$D4HTCaT*p.OMP%&@BIBiDhq[VBX%pXIYbFHqph@kp1=J&pZfS(DqC)CH\Y#C+4Y.n<
%B;FW9Heb,o@jDB2dTjKkH>N5+92EV0l&6<To?aYFo.b@or6d)8-PsmTmEGc<1G[11`/jK*+lKZ;L;&ttdaq6-[--h/gO8>Hr!!F-
%h?^[e^VB`6O.cbBL55`P+,LU$GEi#s,DJqD9H-[X03;7D:E8G?8liIkB60/c&4EJf&,Rc55Vb`.<GaA?![]0&jc'q^r>BN@Dh]ou
%P$!mN8:a'J\P%2ui'ZoWL^JPd#VP<Cm#r_q@FlP:b'.HB;JkKm,`l+`ogSoAr=/bOW9lZeSiV2q`#,`[&<FjjA8S+X3oiDk^E[UQ
%8Yh'@(V!(?rmk"MlFCW48Z!%p+nRK7Y'F+njHkN;a<6I'@WBq=U?H21[Y8MBIF2(>0k6/$*Rqitqoe\n=5C@#;N)d,.n)jP`!B!s
%gA2Y>hFmIlhT!`WemSR-4S:l\Hp@[bBHpKZ$leHc+`AZL:"^j5n")LSW2USr[Wq_,!Dk*J<#'lV:k.YSrI\Ib3al[Y51=[Bj,4^N
%>WbP%r.JWX?!g@Kp*5=XnAlG9Q(lj!8BPZ6+ukY&hut!bLn!1c3tjl_o\M8pOit:/`M#*X#\8\6$L3kC+=l^++5l@QmnU[ml6sOp
%6kF1;FRmEFV3.E;U/pl0k)oFA![r5Ln_8M_E-).LJ`(%-"ar!+!5jhZ`d2*Gar*`^(]97BARrJ5aB"NDhEB?>^:2us(B/sdf'?1@
%s2ki,rgi*n,LgWr<\&3[(C*5U-kZfK4TeBJQ2hT^/?>`V1;p?K&6P"QIEY:n-4?"+d*]k%?7(C.?h@!gkl5nL]QR9[TjC*RAjnf0
%&RiML#m=RKjiM3F1mrN:l5ND,_$]:MGJC>YrSaiTOF,r]a$5US5MsTI#8,CXUsQ_Nh1h:-aa<4U!AYX3P7FWjBuK*=N4PAindY\t
%q+3^38"MEI^E+4/d-8O#&$$K2:M&l%b'@3_G=W1BH%J@&SZ:o1;C^[Ig6^tk(dZsS,`S;ImpT22,d#8N<k*oP(gma'$rO`Uf)MGR
%A:1F?)BL^!#fVpkg,$F9Ho#\iRbdE1jFf"g]_e?qpm@qOhd#3.lU'_2#n_kX4EKhk&Y@/DS@aq>.,m9cgelUc4TgZ0C=rkPeJ^PC
%hUWSB9(>f\mhjB3*H..Th/2`D"KT.GGB)&[BA:V3k*S7RNhAXeToc&4%!,3Kg6g?Jpn]_u<.><'L'0NG2ms>WU4D\bjZE1f63*&6
%[>a%2p_sT3WU8mlciIfo$-?1]L.t5[H@q3B)skH'5oZml,&OPW^\"K$J%W.b5K!>9+]p`*`S?agS+=X4USrU:TGgEsqU2MKFBY)+
%l70^S#N?Rf`S1H/@P&HA7803=%;HEqThr4*M+p$%Yl<-NoT^BmEsG2l=)oQI3%9]6nUuuaNXWgu57K=rCX*2F%GG-qBKNhecKVk1
%#lOp['\L?X*allO>eo%n3WC:k?b"hdn0WMg-C^gC]YKn1khiF`V070mEWNPi]=EIj"lCt*TA&e!6DZU2gl[U9"#O9"K3B>MD71jW
%_Jde]37e8JiT#_EGqddh@2;8%(=h/W_/i</nt=dsBYWcK#=M#c9g5jVdn.H4lFj._XI_\EJ.be?$pE-1FQiO&/&R.h@)X`%*6/<7
%5u)!f*Jm"E;:D<PiE1jWfsGIl6d6P8PU8B@\du;;c-k5.(gT>'7*c^5,n-ug7]R2V%!N[\fL,&4VUCSFOA7IIlnOK`.UlM>XhDE?
%DEkrq%a?YR8T4ifarkc&mZ%o0=9+:B41Ld?:eB9QTBUgln/'op_Y&TlQCHM5S//GQ#c4slX(Us\)oDH,-iX7i.egQ?#;TC9TB*P;
%9(kBe8BjGd>%P0QYH&.HMT+861>Fj1+3Q$?1Fa\lnWM!TLe"mg/*PO3,/Y3oH4Mc@%?"EJXrthA\KOl>65`m?DMiW]i2tM]ctqtr
%m^4<odQHt6oOUiUdQ6DuUO,ltZbRmB@Ei'!,A'!5Wff&s/S@*,"d6r9f'>TBSf[;-&uo"-^;o.ARfUoI6YO/p#df"m=S81*6C[0'
%;qIDTgt=(.3+YLP10G%O+R*e-HZ7lYh;7"Lr)3!"(_bFG-KA@^:Tt5/c5a)^3-/V5k73r[@0NG.BZ2.+,U6/5gLIO*c,k)?L3m$5
%92i;I&lE*QRbhW4l$Y\-J%Q+p]@>]8G[GPXcU950c[3l*9'MK^@P`d>9sU?=:SEBA>sl6#h4c*j-X2J-/V?C*[@k'cMh9s][4DOK
%@8,f?7W6g6?e!-CogUFl)(_oKAinsrb6NG@;T5([K0`h0lV1]gRPi/2V/q_L?Se^"#l#P=4<9Gt<\%9ebF(BFW^6:G#<d)4*l$eq
%qG`f*J4pN4PCt5]\ag]6C'=('K<)pTb[QkOEooKYW_Y(2k@#"5<\?W]g;pdJ3`qg9erh>[ME1j\AQ^*'@RGTsk+Mq#A569tlO(ht
%hj+'e19?L6EA&G<9`;DY`(I?;6^;Z%*^t"uB2riY[Cm-.2.&CT(PU+B.B*S$/rC-N!6I@BF0'4.U1%UlI6TH9^2_f?;;fueL/Z)U
%K?<pX;t76X<*Wro1/uMT2olpE:6%Z'%dM2u9[qR?5"^d5BSf,dY,5F1BXL!-'Q]87O?:e$#^629@mjU'@9'PX@l@U\p.dUaKmfh<
%0jX#h.M%Xq$`e;X9(i01?X&He;ZKl1(*j>),-r6H%d$V"Is*0c#RV`UQZrZnN"YRN3=!@P]LhfAR9$8d9#rHpZ',2OKq1ZsVC.#(
%%SLS1\40!$i76dImZ)Zd5q@uVgLW9:2o\qdZ!n/ua#@$+&nd\'ORqK%#i=Itl_".u$*aOOirXg1eg`]i\e]a,PWK8qE)0*"j:!,#
%kM4WRn92BKXX&^H*Y]67BUj8^@MV%U#]`K</7[=&B'RSA4DVJ57S7KsI2c#<>\GE@R[8T3C<:!UE6.IN%/r[NA+D^%JN?9Wh;lbO
%ru[6%,2/,X-du16RP0iMMrs'#g@oe_`\/^)N9O/eY)t*`\`#@&R@,FfoOjN'H;DP'6(o6DL?C;%JnH=<[!hJ#K9ZXWIE(C4;>sD$
%^Y\!f)J#d08Lk#LEZNPt`nG4th]i2LIugd]rdQu%$@I^uHu(k-hg^c![&`;E78ah)(SDT<"J;!%<^42H>1QFY.SYsZ`%5(cq(*7D
%B!.<ZW$R#*A#IU/FkU(8@VZu-ers]#J?$H@X><isUl=tL;/Z*>jZdid&feI^YW"_RL%ffcU?DP4!Do=Xdi>bVW"sg/\NW^]A.s=F
%1U(!u"A*Ah1/[[e"c*L`qJcm.Hh([3=p)&U),+qK;]uNGZ[BJCqF=rKn6PTFk2DWG@CFc7<?:j#!c5r5SrNT1`0`;ci^.DQ%W\lm
%+5e6thr0J,-qkCGc4JOC^>u$8e7'Z!l43"/B.%=E'%'pd#oQadA&0V%o5go9.1n$_0r"3U[YX3UEQUq=A'\6`k%E1AJ<87FS1_&^
%qjVLM360Wn?LR9Qm/6I=f>31t*LbBnIN0p-Dt(.FOD![X*&N(Q*'_4_g+\/;X`NYHXHA,=1n<t$$gF![9`UmaghDE5V-D>mkFYXV
%);!A=o2#$9=lRQH(eo>fp'p:4Bno#NL=.-N8HjlghM+<`9,-[M:N\-%QM[lBffG01rBEl*ZEL?/'1K(6eJoRIAWhYr1@+Qp6R/Mq
%4K1_tq4nD=34V\)oFu"ZaW5qpM(d2,OQd;e.i]5"d+*?c/fXYID#^TnVi1HQG='+e"%Y6fi4@G]\.pZs!&>S):PMX2qfhhh3O0p%
%F*.f)&q!QS.^pjp?kY9rn*eBa)lPSlG;76*4WU"j@:;2i&ud3c>Tb+@;ol*Zj@5q&\sSl\Y%a7p)kW0SeraG-@tYDK&*n&^9CA^$
%1+YmZO)3)^&>3T*0<"O02<i>7Iu>sdB!N8s4+tSl'AU%d1K:-MO'\Bm'CoW?6*-;=7`s4uAl>UOHUUELO&-0609a>YV&ARGQT]@0
%`j.3?&_1PD-R95.7FT%Wa+Fk,Y^0pSgnI\U'sr\%6H_&J6CS)lk'K0KCiAc[n?pU2B7YG>IrCY3'<SYkkm1A,,WgpH+;WiOIn21^
%*e]cciPTK*=QC&s?#DR?9a$A\h$t#C`k$G;#bVjp*#Dh1.bl`D2988j;dHb:O@A)l=!q2>Re$"rkZ/"tWN200Q:Q;0RPJ]E\YLfJ
%/WrRa#^>?^]D\;JfDd%o/=o=rPu"/RHFt1#[;M*a:p'#Y8ugKEX&b')q08($TJ)djZJbJ*)XXVR)@^7^eKp^`1?EXChGfP7<8H?7
%nGA^*EYdmj$'8'md<^:B(./iWPmB:OIU#<?^nS]WLI=S4#h(&HMXYKt1O?K%\u=]@I<k<A=:"sl";7Y6C06op!-Y<rL#$0lB?f,/
%9tKF`l\C6%^!pT"X"kk<bR^<792UY6#9Y*iih5Hp&n`_q,27[!O:"cNCQHkmQao98^LE\Xo+YF@MFk.>$4>QUS[3e"ZqOU,XG:LV
%e)VjHMC?]>d]o#022m[Je'=)t,<DqA/L5W8GbDHMaru&FYfp%9Rk8/i'5MOmHC'd1niP3FD!h$>90/FO9SV*QllBV0?!aWmMP=cg
%9\j&K0LXa>cGgF:Vjms4cY;%hIIN2&qBCFG;HY)[ejHW9U[4V8&$FT)\N-i#l(2Y1V0e5hi?t3WfC&Rp3)U7'WCU":V?ZnBeZN\q
%g*=Gd,.0$VpHG).KUqRH\]6P8];^%n4DADq83h'-VpP=rg(mSWB;d%jq1'ba,7L411@dE#ng$F7RXB'l6W+G`MA&)aBQQA8Q.It*
%\f4IVTfIse&O4[J#cc&`@6qFDbE7lrX6<DRi*8Y+A]?3O+Uo+'%sXn9aBU:/a+=U<B$u,UcpfaQ9C](>3N.5,::N]MRuAFKRb5Yt
%I&qbO&[*r8m1_np@?4'8;@s_%oFoT4@WY%k.$Vnn;4!FUE+;2U#B[GDOHC;E%8+eK1[:mj(I+Fu3k2>[CmAHP-6kn5#UO1]&cbQq
%ZnjBYH/@5ZV_S0q?orJ:MWa'gh/m3q2_N@>U@c*a[W-CR^.fDKBHW/Ho8mNgm61-4];Ns:pXhbpBb]B_c)SXPWTNhUaAXi!k1$:W
%Dhn-99V3LN#ptoGOdUN8HmWj5:@H6B]I-(:]imfPC:PDs1.e%D(;?Q<,+X;I%^X`S5V8UkW$0V6m[F;4/-QuAU/f7qbZNN0EB^>A
%2BZcIq6Ruf@U0[<&1q^eUeSh8F!-"fYUH).h-.=mhrqaf6g@GdC@!!p1h\E>gr]M.Lcc:+b78cbOP-`=*_;gB8q6,/qbr;^8LI+G
%YtUbN[Q"eC=GqA<$[sc[EpK$J**Xh*G-qMg%mK*MA1XYg6RP!C#b-YS/KR80mZ*MF'I]lk]BYkgZt_%K(ckdnZB'ERb0LD(@5O@2
%D;,/OV7)jAB<t]R?$lh/VFV2$/"&kXh<<rYj0'aUY`$+QLf8)-%FGueAUL\[<&'6(;Fa'\fBoX#ag0c^#kSO:kO.2gLEm1CV/]CG
%+.Q$8LLHC0(HQP>B2)qo9B\#:,>_8+?PW0f(i4A`Q`/PUZWh4F;$7AkjchB;`hhCO1`<A0NEa<i+h+7oa<B/1;Q`Dlo&c,AFiaoX
%ANTS+\dl8R[I8`ogXTb`7tic'[Cp2EL,kB&,T[o<=\(57B4.ZJ<VCl&rWN,4!lOLSg:IZa)O)nO7`j[JZrTZ#KBtab]K6f[9!T0?
%3D?\fC;p?n&osVpZB;ZJN'I%F%T@.b<9GtX7XaJcGPK%T,)'I&$uc#9e.KG(1tF4Q/ngs<Ap-7+aN$/*k9c)'Pagb.194mFWP5Il
%N0sXeh>@7o&/ELr1RPc7LcE9&!XJ&Y0O2n)H2%nh,7LR%OSRBPK$,"o`o/U8-3#B!^8;efpPV]@BR'`I>2mPEc.`\0fA/#]':I=-
%QDo/q160(,*Hr>p@7.i":sP;!3$cG2A11cJNa=oL)YGP$;MtW"5ePXa^ai.i/K/1/Ke2;Qo4?4FW:4:]G`Js'p;,*/H'_3JVa\R9
%i#p+A/#UbBI`;s@2ZasjEYhPHJlt.O[u[DsCX0scAOmJ9gF`$*Vf]?(bfEXQD)%9UP\!+ErGK0YF@gqC@ch]I\q?q11$TOgk".M,
%81cas/`NeY+qF_jCX;BQghY2i,ljCN0]E+fL-pC+YXm^Y9OlAU[9W>MjJ-2'?Wj><5#I&p6AhZs<ESJ>f=Q)-&:?oTQ;%KaeFF(:
%RR8fh/DsN`g!Y%\I:GGtM`n&6ar=l.GLr1CA?F0skaPE[8Q48/*Mf!]Q4fUEm)L%7<#d-lm\-"H[_#^,o;fm%Ztt*M>,bS(Xi\/_
%#lr[2+uUGe''YDI4K3@]a[`>BJl:tF.7`[*"g9PS?M@.F@k"H_=IBG1b)&T,[c-h$dI'o6=*G_%D:k@UZ/5&6)l@C!f$h+fdl5.U
%[!a2k:fkgI"kCNP,Bs1i=+'BHQ=@+.cM*Ork8NU`)hi*B1RC!>&_rmX#J".+eS\T9jW1eO&9=>`8>G/cq_aFZh"XXI>I>bEp7g,2
%0-nG.4(TM&FE/q>BKf;WZEFLgRC9Cl.o-qr!E/6TXYZ8Q>;+61')duiV_6.>WW;;C9-Une1OX>F0<H;q.DROdE#"8:WBJ\1o*]lV
%h@rKtVmF(qn<u[hV^.2>Zin2&(Sj/(b?a[@/trD[(EpW;'(CjERo,2fhu_gpV%C`[WhTakN2Y%,o1^dKrEKGm!iluRbK_Km7%#p=
%6LfE$>=uG2.A;onpG`!?(\(")\5Xs(&dGnZ3R-:G<HM&1Uq"QZ93u"W#Tg;5[X9gQ(dgHI%>o?*%.$]"Hgk:`\\Vc5:%+7rkSS!A
%H=mG*lkLr.=FW+sB4MCCdEN30#Bj-WHb-ni"lKGC8hqOA6NQ_u/Gp)k\g-jlXhOW`r6\%fk03=cU-mem:BCEnap4I\r5D$@_,C$G
%dWai5`kII!Obcho3Q63F7FFih29_p;@*nRWQBOZD.o''mC-'O\1j`4]On\9cYts_-]a9OWn0ZG$R@KG=JLk:.fW5A&?JDWn/4UoV
%'51[c]A&[dLHcg,V+lBJOca:ihM9=/Vr(!CXbW`*<H':%"4s<<5&.6bRR4,Tk)AQBUdU!iZ%O1->EcX0PR<YbJc5e4TXY)F"BS6)
%jn*AB/N"9]J1^KaRhj%A.C)'C8%7J3D<%;s+CaCplNTu_d/2RGbmX?85eL2ie\:Do[JXYhX3Hg*is>;e!.*EgE[pn8$'Y&;;;Jt.
%bqN)Fe[<@pFjtk-]CO#Q!RR4>15LT?cotZuZ-1RY-CMAcMK6Uo$.d"7^N.J;M4li5QTtR?0Jl6H'9AcK\(7X<rk[F)2D88o$:JdJ
%Mo>KNJ#s\)YV*E2_9lQ&^UX\?&#j`YKP$e.W^(UZ)&ua&6L2ZdQo;!ibQTXRo-M!Q;+A=>%NA7odgpj53^pMt9M2FELdgQ>U,oWI
%,U:h$d9T_^<!=TjqiS8JqqHO=RL<"GEoIMCcsJmb,c>QIN@C^qrH;6kXU,:^:,bP@A3FI.8<2H/=a$7nZnk[3+bmK1G7-Fq%18lY
%VEhYKnd!F;;6l(u3BeB+7B\h,p<%'7cacQgkFh5S$Tpb9Su3;<5_A'u#6?rFB+2JRYn/($/4R3H#h!PsZeD3k9-HXWYZV,@W4;5W
%M6\KrgBr#?cDu3D<O['?4LqQk]ONH[RBW_.U'e2D(3uYB5?D+*+^Qhq.+\\U_8uqMN/G`p]aIFGfeW?bh7e(#4J&pKCl4ueV7\)e
%T/GC&l[hA[f9SDdMi0N,\*Ot)R@Pf^T(Lec8OW53?g"q%&"OPK_REtss+%1n*k-#Pnl(/V51A8^fO#UU"OZI28F>=nWnR%q4;OPg
%aqT<\C,ENKo?H+*]\q9bJ%u8`<mMT>QgC:chcai=,[RK^pI*]^M+f/i,)5+FfD<fN/##+,h3eHo4OuCG@P&QML/.<T>Y\bE\m`$l
%g.0eiigp3mSY!,6QuPo2e_,Y1&(WnMP.t^rl0[+'N4D45o>0h.oPsj]i*o]LD-l8hp3%YqGZF8D^ggJmGe0N=61f\.s#B;I6TN)@
%<2c,3]+$X6,u`cNCjQ+6-'6[$Df</12t('Ce9mI^@.T/(KI-QsT`N0<h(,u-=J9a\hJ)i=VO:!m/@CX`729OaqARqI6qr@jo_Vkk
%4[Il`-nB*4`)*]gi;m_%DA1-;"6a<n8/l"50_%gWoX+EV,"%(OM=Ai^IKM9L8n<B";^e5+NH3>i\?e;U)GX_,M0$<1:^!)M`@RQs
%L_i:pKLp78a)c@?B=qe?b-.HJFLW(:$eSN<62"G1ZG05fIXLpnDA5]A9Sq]28(qSf5?&gPQVGm&6'-^J'4^-6;CV.B?#I,5rD7&2
%jQ1FZ'XA.Q\.9YNmod_]fUGr\X>Y>3kh2YqjeIRXa-JDA$LXUFV!V@.L:4/qQP+g<[T"r5kHd<u<Tau\:+qRS3RBK`Ldf&V3o`f%
%h5PHi4\:,FC6@=(O+#o1Rau#56#q%7V\1f_J7]E'?6Si;:N9c>Oa)T!Xa8?gY5VKtT!`Xi#?>Qa'!%l_AC6NJ+`D6EGDo)TIAKZB
%Aer<H<?UG_S2DPE8VQA\a8=;/pcIf]J(UB>4\Y5&9cBW4Z.AQ/fGiMQVhKpg/+`;o.liii'NCFi)-4@;^_:N>]YUeP?2llp48LsD
%kH7HlS_J"M$DEu!"A++sU(<9U$XNa6]Mo8hZI%d6cgM=8]1bsTROZ1)eZ?Z[7/Z*i&u0!#MoCjd-`F@sn3,bY#DG'oi,6(U<8e55
%7US+J^j/\obn-CZl0)1+LmD.tn&L\nk!F?-7OKaW?*$Ig/V4.Wc&mWp\7%h]GPK$I$''s:Vj2o@>-9-[FD1ICjm>lrp<3?B10s;)
%`R797j`NH_gXtZ!+*WZ?;0iYdMqq<K0.KuqrBp3r\bnKVk]j`WWSc"U=H__=];bE9CkWs+f*\t&1NTr$ESCqUa,aGFo#:q0m&]uC
%3V-*GV:J++EjD.Ap-_2EHoY(pY$.YCK_\6V1"lstTA1UQf&9I='XMM$g5.QP2O^t3_q&&N%MR._dM]p??qm:-cIN\2$iHfV'Gd(t
%Uf)TX*Jb$2;`&k^d:BBqrt;&m1k&sCIV`oN>He7^=<U,W)+fLF-*iQ.'24;`duoeDiSI=I_GXUrXZI#*X`e!m*o,cC_)=@9dc)S\
%&;Dq4'lbFAAT`.&/e*V%Q8)(;@pOidh?/Ha+r)RZ#'^^]"CVGCkffN9)mI7%9/GPBr,sQ6'nFtO=YL8Ga$9*YIGrKOgu>AN\ZX=W
%58htmLs<AoTNjGhO[_'W8u`ePBIbS#KqN7R]au4D`k+cpR0d$"]*pK/j#+qbPX`2+R.bjSka)l-^l[a]6_g!q-[S^@H"DaejA]aV
%^@KA"-FY143Cai9cT'\-C*=<Cj_H)P'-;M\bag/\_m7o07^2`?nN$XjqZ`_];,t6[--D0]ZmO7AlN3r&@5U1pioBOL$?@,eKFsS>
%\[c7G^rKsr+(-P4b_fMWN_)1KD>G`9T9bj*BtWO4'reV\pC8CVoH>`mAb6l\&p^A%ZQYpR00egm=='?]l<VuqNsV%nfsrUi,ep>f
%ore5ke;D5>GE-I-[9\/\"D<h>3KF'+F?\3BEtlJTR"hg%m?pT'MqC7&qcGn&+!i'=_L5MBVWUP-7KBEMQ18XZXuW3H&pAR*'?gSE
%R==EQ,5%VaNkhHd?.'d3+g;q]4fO:AXdu$8\K]?9!AkQn4&.#d:K9PO%!$]drmM5g-(oBjM,AGn+=DqZlFdLI&S^m1@M4%_.:.Z_
%CM)mc$.2]%^UKFVLAYaJR&hPI?.7'l6n&o5@:&E,i><?G[f'2!/I>94qp!7'PWc14M^_aq$Xc$,'"#Y6Cjb`7"gf5;YB>n[iBK87
%rUIS0DWQs?jm-iFl2*o4Mkq&NG4'uILo>!1)AB(I_OX(h;"q\#;MWDn)=$&f6`2qKZd>c0g2goRkT+1_^Dm!Fo;ujd3&.+a%?qU_
%LVpQtk.*VaL*>TI(5h+%0BQAR6tB2;Z?j(f\YbJU(pqD\h/3L5-C`Vpm/D:%WNYIanW*M,Ab+QOph^YCO@rd9RJ3&Eq%&?5Z7HXd
%BS*CY2)nR(Ft+JQ*b^%#I;`tf&_njgT0ceaV.g(lOQG'(WZe3ELh*X%q;j/P'iRBi+nLSQq&\XuHD2RkRo4o35a[CQ#e&8.C#g)>
%;/]K]2e#AU36g!f)G1oD^G2#j$*"Q_6aKgGnido`d#I$1R.VCoi=^?O(HO9#3#E'HKWasK5'bM-bWP3gf2h0G';.bf=?;NuYHLSq
%YMqZY2Mp,Ykup[sju=jk.R>#3-/1Sd(OEL3\gXT6P$IIqAT;S]Ws"?#VK\FZN^<+UhP')Bfu#?QpOk$AW$E!pnq:a0HPVj-=R9\U
%aZ"FX8n'lW+/MW)PH<0El8Ogj+4NK'Y+a[d;)"Ap1Z^Wl<Y5[qGuggp3[p@Zr^DLhVpF(36_GpTp?>:p[%=2&lKm-HL>JH]<qj^n
%;@p3-:G,i!):Ya1CbSOr!-m:pi_(lE,dUrb+_uQ!kGFRH.;HS:HZ,HMZg(Xu9:kNelMu?WZS/Els!_n@Q>CIcdEb,,oHal*b:%VR
%':#D62i@Em8AXYNV:])@_`5,p]>8qFIZm)-H,OI$FXn9T.fi$=ZfT7FLig"n:pf4ETUHtCOm7,&9F<aoGS/V-6peH.)_\U=dI"o4
%"EL0!DdmH?H@NCWIhR;W*fM[TKFhYU^oVq*YiqV<EHb0m.W]aE_#p;[KJrU'l/lDi,Y4:NeW,i6T-,W#Z.AF2-/P*9?9?LYUG,?U
%!R#A<TU"DrBTNn94NmK`4p-SbBmDK`2G?:uc!dK@2m_f3";$]6d_660p!n!>O2cf,bo_jJLDntXV]D::72?horaXZ`!8XoOBHLbR
%Eq,aX^#mElF9S9lIDF.-L5XR0hSdu`k[H$TDC(2g1]"\V;O>+UqNE<;X1%*s,7nN</%gZ*3+g6^B73M7/uPXGk0]U_#(bh<j6_JG
%IHc+Re+$i"?_*sl\"3%:AUN\9?pol=J3tMC]hTmuWn$&!lK?s+N]'dd/(;J;r`>Aq_t:PU8!#uT]0e(t]Gh,3T?KBjMFU%5JiIUM
%c)T\koKK..*KO:Ob=th6e$^O99e(l)G`K@O<&d#0c-<ubFo4q[@.c:g?00bMZrH3B3J%AtGNhY1@kl<'9$T\W$3Vr&7R#p@Pk_?4
%dF1[(:VJZg*,Jmp21**A4JBglTX/")*@OF43nTXW>9hq:(ss".4qKjQjPXUYF,R`m@lc<a9ENW[`PM%&\,4n'9I`uYZa&q`9*:Dg
%Ur^U-H&9u!MPQo%@E%(\L=I7hGab07OCTk+=PND<ET0Pg7g+aDr<s-)c.ku7]KFTAc778&ZR02%[HWbWkP!7,1\Sq[CQ->AdfK4,
%2VLpmb9SH^J%Mn4Rd`RtOjV2j`*YX<blXBD?*9?;,R@`A^`%7=WJu59jN_++;Ck=HF1Ha+6>VAJY6pE*_YMnGZMgja..:KI%-fnH
%:37nGS1DLqDC/dfIH.=L5OSi<O/:5VYnsmGX;BbJ+N817/`m3gU,hlZBII!h"9J.^*Z?81Il-2AoG=Dc_'82hIB]Or%Eu*A0L^k$
%qV&Kdi(+aR(6,12&1e-Ql3f24lhoRlfI;I-];`4QIS#/WQ2+(p)SpN7o^9u<G34lu\1KLN6&fk)M99PS&?SLX/,=.+$[n6KiK0r*
%/69u`]p^/@q#&ob$5l+T\`jQ"ZaaitiH>s!>;9Jh[R\YF)c]?Pe?@&tb,GJ9eCP_dn4JEsY^CDkWu6S9R!k6#SrJ0PS`6-NIIYdn
%DNHd$g2/4sPIIAZa)XE(\Bf\1Ju[=SMI4K!;fcF=_/i*clM$hCNt(4%LUU)1mF!ei;U2J"hsOAjV'I`"qVY@i=A1kX!OMc!gE[`d
%HuA'(JS`O^e9[sG%fc(tXhOF!ra@Lbhu<9BJ+`REJ,(2+J,T-ApikWql<f#8olo:V#6+Nbrp&s%peS[(ec56uIe`Rhrp9+Rq,b?,
%iU'_HplBgs&-):s:N(a_lQ?-%J,K%Js7#a.s7"qG?UhQhH,6-Qq7ls!s5OoFpAY0h9WP&~>
%AI9_PrivateDataEnd
